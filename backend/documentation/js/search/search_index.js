var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddMessageDto.html",[0,0.269,1,3.118]],["body/classes/AddMessageDto.html",[0,0.404,1,5.53,2,0.955,3,0.16,4,0.16,5,0.125,6,7.009,7,5.593,8,0.634,9,1.056,10,7.009,11,3.504,12,0.663,13,0.011,14,0.759,15,0.532,16,6.376,17,6.376,18,0.16,19,0.009,20,0.009]],["title/controllers/ApiController.html",[21,1.999,22,3.118]],["body/controllers/ApiController.html",[0,0.244,3,0.096,4,0.096,5,0.075,8,0.382,11,3.144,12,0.689,13,0.011,15,0.444,18,0.096,19,0.007,20,0.007,21,2.554,22,3.984,23,1.813,24,3.372,25,1.189,26,1.889,27,5.967,28,3.15,29,5.414,30,4.749,31,0.998,32,3.844,33,4.749,34,1.676,35,4.311,36,3.844,37,2.186,38,3.844,39,3.783,40,3.844,41,3.259,42,2.46,43,4.404,44,3.478,45,2.654,46,3.844,47,1.627,48,0.772,49,0.786,50,2.88,51,3.844,52,3.783,53,3.844,54,3.844,55,0.256,56,2.489,57,2.255,58,1.341,59,1.628,60,2.489,61,0.67,62,3.505,63,4.685,64,2.489,65,0.894,66,3.984,67,3.061,68,3.844,69,3.061,70,3.061,71,3.842,72,3.372,73,4.057,74,3.844,75,3.844,76,3.844,77,2.143,78,2.143,79,3.372,80,1.001,81,3.844,82,2.489,83,2.121,84,3.844,85,3.844,86,3.505,87,3.505,88,4.17,89,2.075,90,3.844,91,2.374,92,2.525,93,2.168,94,2.88,95,3.844,96,1.262,97,3.844,98,1.427,99,3.844,100,5.417,101,5.414,102,2.654,103,2.554,104,2.374,105,2.641,106,3.505,107,2.292,108,1.832,109,1.832,110,5.414,111,3.319,112,3.505,113,3.844,114,3.844,115,3.844,116,3.844,117,1.427,118,3.844,119,1.747,120,3.844,121,1.961,122,3.844,123,3.844]],["title/injectables/ApiKeyStrategy.html",[124,1.311,125,2.914]],["body/injectables/ApiKeyStrategy.html",[0,0.294,3,0.116,4,0.116,5,0.091,8,0.461,9,0.866,12,0.41,13,0.011,14,0.427,15,0.522,18,0.116,19,0.008,20,0.008,25,1.353,31,0.739,33,6.062,55,0.257,59,1.965,61,0.809,77,3.118,78,3.118,80,1.8,83,2.084,92,2.566,103,2.189,105,2.084,108,2.084,109,2.339,124,1.906,125,4.234,126,2.189,127,6.72,128,4.07,129,5.401,130,6.911,131,5.503,132,4.474,133,3.346,134,2.829,135,6.062,136,6.158,137,4.028,138,4.234,139,4.64,140,1.698,141,2.799,142,6.158,143,4.64,144,5.401,145,2.189,146,4.07,147,3.191,148,4.827,149,3.414,150,4.07,151,3.695,152,4.07,153,3.695,154,4.64,155,3.004,156,1.315,157,6.911,158,6.911,159,4.64,160,5.401,161,4.903,162,5.401,163,5.401,164,4.07,165,4.07,166,4.64,167,4.64,168,4.64,169,2.705,170,4.64,171,4.64,172,4.64,173,4.64]],["title/modules/ApiModule.html",[174,1.624,175,2.914]],["body/modules/ApiModule.html",[0,0.326,3,0.129,4,0.129,5,0.1,13,0.011,18,0.129,19,0.008,20,0.008,22,5.342,23,3.104,55,0.282,61,0.896,73,5.242,174,2.782,175,6.03,176,2.519,177,2.519,178,2.734,179,2.734,180,2.519,181,3.704,182,3.502,183,4.507,184,4.507,185,4.507,186,4.963,187,5.567,188,5.567,189,5.567,190,5.567,191,5.242,192,3.502,193,2.734,194,2.734,195,5.138,196,3.836,197,4.507,198,5.138,199,5.138,200,5.138,201,5.138,202,5.138,203,5.138,204,5.138]],["title/injectables/ApiService.html",[73,2.743,124,1.311]],["body/injectables/ApiService.html",[0,0.358,3,0.141,4,0.141,5,0.11,8,0.56,9,0.981,12,0.616,13,0.011,15,0.561,18,0.141,19,0.009,20,0.009,25,1.533,26,2.434,27,6.945,31,0.898,34,1.745,35,4.49,37,1.967,55,0.254,59,2.387,61,0.983,73,4.517,77,3,78,3,80,1.973,83,1.908,124,2.159,126,2.66,132,4.905,133,3.444,134,2.856,137,4.417,138,4.797,145,2.66,205,4.946,206,4.403,207,6.977,208,5.638,209,3.65,210,3.65,211,4.946,212,5.638,213,5.638,214,5.638]],["title/modules/AppModule.html",[174,1.624,215,3.118]],["body/modules/AppModule.html",[0,0.362,3,0.143,4,0.143,5,0.112,13,0.011,18,0.143,19,0.009,20,0.009,55,0.279,61,0.995,145,2.692,156,1.219,174,2.92,175,5.717,176,2.798,177,2.798,178,3.037,179,3.037,180,2.798,181,2.912,182,3.037,186,5.097,192,3.741,193,3.037,194,3.037,196,4.098,215,6.261,216,5.007,217,5.708,218,5.708,219,3.695,220,2.692,221,5.173,222,5.708,223,3.695,224,5.708,225,5.708,226,5.708,227,5.708,228,5.708,229,5.007]],["title/classes/ArrayGuidDTO.html",[0,0.269,230,2.47]],["body/classes/ArrayGuidDTO.html",[0,0.507,2,0.679,3,0.114,4,0.114,5,0.089,8,0.451,9,0.852,12,0.671,13,0.011,14,0.719,15,0.321,18,0.196,19,0.009,20,0.008,31,0.722,41,2.061,42,1.995,44,1.988,48,0.842,55,0.203,65,1.054,96,1.489,102,3.349,103,2.86,105,2.312,109,1.534,117,1.683,140,2.011,156,1.812,230,3.535,231,2.78,232,4.423,233,4.534,234,2.825,235,4.534,236,4.534,237,2.825,238,2.936,239,4.423,240,3.088,241,3.455,242,2.569,243,2.699,244,1.445,245,2.936,246,2.643,247,1.489,248,2.182,249,1.286,250,1.795,251,2.182,252,1.67,253,1.92,254,2.893,255,1.92,256,1.92,257,2.86,258,2.314,259,2.139]],["title/modules/AuthModule.html",[174,1.624,186,2.598]],["body/modules/AuthModule.html",[0,0.319,3,0.126,4,0.126,5,0.098,13,0.011,18,0.126,19,0.008,20,0.008,55,0.284,59,2.128,61,0.876,71,5.25,83,1.701,125,5.534,132,3.254,137,4.188,145,2.371,147,3.456,174,2.754,176,2.464,177,2.464,178,2.675,179,2.675,180,2.464,181,3.666,182,3.823,186,5.22,191,4.201,192,3.453,193,2.675,194,2.675,196,2.93,229,4.409,260,4.409,261,4.409,262,4.409,263,5.534,264,5.026,265,6.488,266,6.488,267,3.699,268,5.026,269,4.002,270,6.488,271,5.026,272,5.026,273,4.461,274,5.026,275,5.026,276,5.026,277,5.026,278,5.026,279,5.026,280,5.026,281,4.409,282,5.026,283,5.026,284,5.026,285,5.026]],["title/injectables/AuthService.html",[71,2.598,124,1.311]],["body/injectables/AuthService.html",[0,0.224,3,0.089,4,0.089,5,0.117,8,0.351,9,0.717,11,2.236,12,0.725,13,0.011,14,0.702,15,0.513,18,0.089,19,0.006,20,0.006,26,1.779,28,3.422,31,0.812,37,2.285,45,3.211,47,1.969,48,0.892,49,0.951,50,3.233,55,0.25,59,1.497,61,0.616,71,3.127,77,2.865,78,2.865,83,2.35,91,1.55,92,2.834,93,2.549,94,2.941,96,2.151,98,1.894,100,4.062,104,1.55,105,1.197,107,1.497,108,1.726,117,1.894,119,2.719,121,3.342,124,1.579,126,1.668,156,0.755,169,2.973,269,2.816,286,3.102,287,7.235,288,4.764,289,5.101,290,5.101,291,5.101,292,5.101,293,5.101,294,3.601,295,3.536,296,4.241,297,5.101,298,3.536,299,5.101,300,3.536,301,5.101,302,3.536,303,5.101,304,3.536,305,3.488,306,4.062,307,3.536,308,4.062,309,3.102,310,2.431,311,3.127,312,3.102,313,3.507,314,3.102,315,4.062,316,2.5,317,3.536,318,2.816,319,3.536,320,4.474,321,3.536,322,3.536,323,5.983,324,5.248,325,3.536,326,1.186,327,4.474,328,5.101,329,2.837,330,3.102,331,1.197,332,5.745,333,3.536,334,5.983,335,1.607,336,3.536,337,4.474,338,3.536,339,3.536,340,3.536,341,2.816,342,1.882,343,1.882,344,1.882,345,1.882,346,1.804,347,1.804,348,1.804,349,1.804,350,1.497,351,2.061,352,1.882,353,1.882,354,1.882,355,4.062,356,3.536,357,1.882,358,3.536,359,3.536,360,3.536,361,5.101,362,3.536,363,3.536]],["title/controllers/CategoriesController.html",[21,1.999,364,3.118]],["body/controllers/CategoriesController.html",[0,0.158,3,0.062,4,0.062,5,0.117,8,0.247,11,3.466,12,0.712,13,0.011,14,0.648,15,0.422,18,0.062,19,0.005,20,0.005,21,1.175,23,1.175,25,0.86,26,1.366,28,3.288,31,0.949,37,2.08,41,3.206,42,2.439,43,3.55,44,3.093,45,2.688,47,1.792,48,0.735,49,0.865,50,3.057,55,0.247,56,1.612,57,2.277,58,0.869,59,1.054,60,2.535,61,0.434,62,4.097,63,4.425,64,1.612,65,0.579,77,0.986,78,0.986,80,0.649,82,3.859,83,2.017,86,3.55,87,3.55,88,3.654,89,1.854,91,2.614,92,2.036,93,2.11,94,2.524,102,2.922,103,2.812,104,2.614,105,2.731,106,3.859,107,2.524,108,2.491,109,2.017,111,3.654,112,3.859,148,4.324,149,1.832,155,1.612,252,0.86,259,2.282,294,2.985,316,3.102,326,1.786,331,0.843,350,3.213,364,2.881,365,2.184,366,2.692,367,2.44,368,4.097,369,2.692,370,2.922,371,1.712,372,2.49,373,2.49,374,2.49,375,2.184,376,4.352,377,3.55,378,1.712,379,2.49,380,4.837,381,2.49,382,2.184,383,4.552,384,2.49,385,2.692,386,2.49,387,1.712,388,2.49,389,2.692,390,1.712,391,2.49,392,2.184,393,1.712,394,2.184,395,2.49,396,4.837,397,4.837,398,1.712,399,4.837,400,1.712,401,3.55,402,4.837,403,4.243,404,2.49,405,1.983,406,1.452,407,1.452,408,2.282,409,1.832,410,1.054,411,1.612,412,1.132,413,2.49,414,3.117,415,2.49,416,1.983,417,2.535,418,2.184,419,2.49,420,2.49,421,2.49,422,2.49,423,2.49,424,1.712,425,2.49,426,5.961,427,1.712,428,1.712,429,2.49,430,3.326,431,3.326,432,3.915,433,3.434,434,3.434,435,1.712,436,1.712,437,0.986,438,3.915,439,3.915,440,3.915,441,3.915,442,3.915,443,3.915,444,2.49,445,0.869,446,3.326,447,1.712,448,3.434,449,3.915,450,2.49,451,2.184,452,2.49,453,1.832]],["title/modules/CategoriesModule.html",[174,1.624,187,2.914]],["body/modules/CategoriesModule.html",[0,0.358,3,0.141,4,0.141,5,0.11,13,0.011,18,0.141,19,0.009,20,0.009,23,3.291,55,0.282,61,0.983,93,1.797,145,2.66,174,2.904,176,2.764,177,2.764,178,3,179,3,180,2.764,181,3.866,182,4.032,187,5.777,192,3.713,193,3,194,3,196,3.287,219,3.65,220,2.66,223,4.517,350,2.954,364,5.575,412,2.563,417,5.631,418,4.946,454,4.946,455,4.946,456,4.946,457,5.638,458,5.638,459,5.638,460,3.877]],["title/injectables/CategoriesService.html",[124,1.311,417,2.743]],["body/injectables/CategoriesService.html",[0,0.162,3,0.064,4,0.064,5,0.131,8,0.253,9,0.561,11,1.749,12,0.706,13,0.011,14,0.554,15,0.503,18,0.064,19,0.007,20,0.005,25,0.876,26,1.391,28,3.304,31,0.635,34,1.866,37,2.103,45,3.483,47,1.812,48,0.928,49,0.875,50,3.078,55,0.256,61,0.444,77,2.531,78,2.531,80,1.279,83,2.26,91,2.643,92,2.566,93,1.771,94,2.927,98,1.48,104,2.643,105,2.163,107,2.927,108,2.405,117,1.48,119,1.812,124,1.234,126,1.203,133,2.232,134,1.632,156,1.777,206,3.089,209,1.651,210,1.651,220,1.203,247,1.824,248,1.435,251,1.435,252,0.876,257,1.203,258,2.506,294,3.428,296,4.6,316,1.955,326,1.75,331,0.863,350,3.009,366,2.742,367,2.01,368,2.582,370,2.408,375,2.236,376,4.395,377,2.582,383,2.742,392,2.236,406,1.486,412,1.159,414,4.423,416,2.03,417,2.582,445,0.889,453,1.876,461,2.236,462,4.308,463,4.308,464,2.742,465,3.988,466,2.742,467,2.55,468,2.55,469,3.498,470,2.55,471,2.742,472,2.55,473,2.55,474,4.145,475,3.498,476,2.55,477,3.498,478,1.753,479,2.03,480,2.55,481,4.145,482,1.118,483,1.876,484,1.563,485,2.934,486,2.934,487,2.934,488,1.418,489,1.563,490,2.55,491,2.55,492,4.911,493,2.742,494,2.723,495,2.834,496,1.615,497,3.614,498,2.643,499,2.742,500,1.812,501,1.418,502,1.753,503,2.934,504,2.742,505,3.988,506,2.723,507,2.55,508,3.614,509,3.614,510,1.876,511,1.876,512,2.742,513,1.753,514,2.742,515,1.753,516,2.55,517,1.876,518,2.55,519,1.753,520,3.988,521,1.753,522,1.945,523,2.55,524,3.498,525,2.55,526,2.934,527,2.934,528,3.988,529,3.819,530,1.753,531,2.55,532,2.742,533,3.988,534,3.988,535,3.988,536,3.988,537,3.988,538,2.55,539,2.236,540,3.988,541,2.55,542,2.236,543,2.55,544,2.236,545,2.55,546,1.118,547,2.55,548,2.55]],["title/entities/Category.html",[350,1.794,549,1.858]],["body/entities/Category.html",[0,0.24,3,0.095,4,0.095,5,0.074,8,0.376,9,0.752,12,0.752,13,0.011,14,0.714,15,0.584,18,0.095,19,0.007,20,0.007,31,1.303,34,1.922,48,0.832,49,1.128,55,0.179,93,2.732,140,1.475,156,1.711,249,0.905,252,1.484,326,1.444,350,3.221,366,2.6,412,1.719,482,1.658,494,3.044,495,3.169,496,1.664,497,4.57,498,2.723,500,2.823,501,3.454,506,3.044,522,2.119,546,3.244,549,2.346,550,2.012,551,3.317,552,3.62,553,3.781,554,2.6,555,4.536,556,3.781,557,4.27,558,3.679,559,5.092,560,5.087,561,4.769,562,5.087,563,3.781,564,4.14,565,3.781,566,3.679,567,3.781,568,4.14,569,4.14,570,4.694,571,3.781,572,3.464,573,3.781,574,4.663,575,3.781,576,3.119,577,3.781,578,3.938,579,3.781,580,2.6,581,3.781,582,3.679,583,3.781,584,2.782,585,4.694,586,3.781,587,3.679,588,2.448,589,3.679,590,4.643,591,3.938,592,2.782]],["title/classes/CreateCategoryDto.html",[0,0.269,377,2.743]],["body/classes/CreateCategoryDto.html",[0,0.431,2,0.808,3,0.135,4,0.135,5,0.106,8,0.536,9,0.955,12,0.688,13,0.011,14,0.754,15,0.552,18,0.135,19,0.009,20,0.009,31,1.241,34,2.299,48,0.915,49,0.985,55,0.228,65,1.255,156,1.153,234,2.56,237,2.638,240,2.875,242,2.56,243,2.56,244,1.72,249,1.149,252,1.632,377,4.396,496,1.99,497,5.466,593,7.046,594,3.711,595,3.19,596,4.734,597,5.397,598,4.734,599,5.397,600,2.646,601,5.397,602,3.972,603,5.397,604,2.872,605,2.872,606,3.002,607,3.002,608,3.309]],["title/classes/CreateNotificationDto.html",[0,0.269,609,2.743]],["body/classes/CreateNotificationDto.html",[0,0.437,2,0.828,3,0.138,4,0.138,5,0.108,8,0.549,9,0.969,12,0.694,13,0.011,14,0.758,15,0.557,18,0.138,19,0.009,20,0.009,31,1.252,34,2.324,49,1.227,55,0.231,65,1.285,234,1.815,237,2.656,240,2.34,242,2.263,243,2.581,244,1.762,249,1.166,252,1.214,496,2.012,595,2.262,600,2.709,604,2.941,605,2.941,609,4.461,610,7.095,611,3.8,612,5.525,613,5.525,614,7.509,615,5.526,616,5.526,617,5.526,618,5.526]],["title/classes/CreateOrganizationDto.html",[0,0.269,619,2.743]],["body/classes/CreateOrganizationDto.html",[0,0.441,2,0.839,3,0.14,4,0.14,5,0.11,8,0.557,9,0.977,12,0.667,13,0.011,14,0.726,15,0.535,18,0.14,19,0.009,20,0.009,31,1.203,34,2.339,48,0.931,49,1.146,55,0.233,65,1.303,156,1.197,234,2.481,237,2.594,240,2.943,242,2.481,243,2.481,244,1.786,249,1.176,252,1.527,496,2.025,595,3.093,600,2.747,602,4.124,604,2.982,605,2.982,606,3.117,607,3.117,619,4.5,620,6.93,621,3.853,622,2.859,623,5.604,624,5.604,625,5.604]],["title/classes/CreatePaymentMethodDto.html",[0,0.269,626,2.743]],["body/classes/CreatePaymentMethodDto.html",[0,0.453,2,0.878,3,0.147,4,0.147,5,0.115,8,0.583,9,1.005,12,0.631,13,0.011,14,0.657,15,0.506,18,0.147,19,0.009,20,0.009,31,1.138,48,0.95,49,1.037,55,0.24,65,1.364,156,1.252,234,2.347,237,2.532,240,3.027,242,2.347,243,2.347,244,1.869,249,1.209,252,1.288,496,2.066,595,2.925,600,2.875,602,4.315,604,3.121,605,3.121,606,3.262,607,3.262,626,4.628,627,6.763,628,4.032,629,5.865,630,5.865]],["title/classes/CreateUserDTO.html",[0,0.269,631,2.255]],["body/classes/CreateUserDTO.html",[0,0.39,2,0.311,3,0.052,4,0.052,5,0.041,8,0.206,9,0.475,12,0.761,13,0.011,14,0.809,15,0.57,18,0.146,19,0.004,20,0.004,25,0.456,31,1.282,34,1.325,39,1.153,48,0.758,49,1.134,52,1.153,55,0.144,65,0.482,96,2.02,98,2.019,117,2.165,119,2.651,121,2.775,140,1.608,156,1.571,234,2.816,237,2.845,240,3.156,242,2.816,243,2.809,244,0.661,247,0.681,248,0.746,249,1.261,250,0.821,251,0.746,252,1.856,253,0.878,254,1.432,255,0.878,256,0.878,294,0.978,326,0.786,329,2.746,331,0.702,342,2.894,343,2.627,344,2.278,345,2.278,346,2.184,347,2.184,348,2.184,349,2.184,350,2.303,351,2.495,352,2.278,353,2.627,354,2.278,410,2.605,445,0.723,496,1.457,546,2.557,595,3.279,598,4.331,600,2.098,602,1.526,604,1.104,605,1.104,606,2.746,607,3.884,608,3.027,622,2.184,631,1.799,632,1.271,633,2.381,634,2.381,635,3.17,636,2.074,637,2.074,638,2.074,639,2.074,640,4.938,641,2.074,642,2.074,643,2.074,644,2.074,645,2.074,646,2.074,647,2.074,648,2.074,649,2.074,650,2.074,651,2.074,652,2.074,653,2.074,654,2.074,655,2.074,656,1.058,657,1.819,658,2.074,659,2.074,660,2.074,661,2.074,662,2.074,663,2.074,664,2.074,665,2.074,666,2.074,667,2.074,668,2.074,669,2.772,670,2.074,671,2.772,672,2.074,673,1.819,674,2.074,675,1.104,676,2.189,677,1.343,678,1.209,679,2.189,680,1.343,681,1.343,682,1.343,683,2.189,684,1.104,685,1.343,686,1.153,687,1.104,688,0.878,689,1.271]],["title/classes/CustomException.html",[0,0.269,690,1.678]],["body/classes/CustomException.html",[0,0.489,2,0.88,3,0.147,4,0.147,5,0.115,12,0.519,13,0.011,14,0.709,15,0.416,18,0.193,19,0.009,20,0.009,25,1.764,42,2.345,47,1.767,48,0.724,49,0.853,55,0.197,57,2.962,58,2.05,61,1.024,80,2.01,89,2.252,109,1.989,249,1.306,335,2.671,437,2.327,690,2.834,691,4.324,692,3.376,693,5.877,694,4.041,695,5.699,696,2.772,697,2.772,698,3.805,699,2.772]],["title/classes/CustomException-1.html",[0,0.224,522,1.399,690,1.399]],["body/classes/CustomException-1.html",[0,0.489,2,0.88,3,0.147,4,0.147,5,0.115,12,0.519,13,0.011,14,0.709,15,0.416,18,0.193,19,0.009,20,0.009,25,1.764,42,2.345,47,1.767,48,0.724,49,0.853,55,0.197,57,2.962,58,2.05,61,1.024,80,2.01,89,2.252,109,1.989,249,1.306,335,2.671,437,2.327,690,2.834,692,3.376,696,2.772,697,2.772,699,2.772,700,4.324,701,5.877,702,4.041,703,5.699,704,3.805]],["title/classes/CustomException-2.html",[0,0.224,690,1.399,705,3.534]],["body/classes/CustomException-2.html",[0,0.489,2,0.88,3,0.147,4,0.147,5,0.115,12,0.519,13,0.011,14,0.709,15,0.416,18,0.193,19,0.009,20,0.009,25,1.764,42,2.345,47,1.767,48,0.724,49,0.853,55,0.197,57,2.962,58,2.05,61,1.024,80,2.01,89,2.252,109,1.989,249,1.306,335,2.671,437,2.327,690,2.834,692,3.376,696,2.772,697,2.772,699,2.772,706,4.324,707,5.877,708,4.041,709,5.699,710,3.805]],["title/classes/CustomException-3.html",[0,0.224,690,1.399,711,3.1]],["body/classes/CustomException-3.html",[0,0.502,2,0.846,3,0.142,4,0.142,5,0.111,12,0.499,13,0.011,14,0.697,15,0.4,18,0.199,19,0.009,20,0.009,25,1.789,42,2.314,47,1.698,48,0.696,49,0.82,55,0.19,57,2.984,58,1.971,61,0.985,80,2.063,89,2.677,96,1.855,98,2.097,109,2.364,249,1.283,311,3.463,335,2.568,437,2.237,690,2.766,692,3.295,696,2.665,697,2.665,699,2.665,712,3.885,713,5.65,714,3.463,715,5.141,716,3.463,717,4.157,718,4.157,719,4.157,720,4.157,721,4.157]],["title/classes/DefaultController.html",[0,0.269,408,2.47]],["body/classes/DefaultController.html",[0,0.349,2,0.824,3,0.138,4,0.138,5,0.108,8,0.547,9,0.966,12,0.607,13,0.011,15,0.487,18,0.172,19,0.009,20,0.009,42,1.607,44,3.014,47,1.655,48,0.678,49,0.799,55,0.28,58,1.92,61,0.959,63,4.214,65,1.28,80,1.434,88,3.374,92,2.043,108,1.863,133,3.745,134,3.068,273,3.785,407,3.209,408,4.007,410,2.91,411,3.564,722,4.383,723,4.383,724,6.874,725,5.473,726,5.504,727,6.029,728,6.874,729,4.45,730,4.828,731,5.504,732,4.05,733,5.504,734,5.504,735,5.504,736,6.029,737,4.828,738,4.828,739,4.05,740,4.383,741,4.383]],["title/classes/DefaultService.html",[0,0.269,206,2.357]],["body/classes/DefaultService.html",[0,0.393,2,0.927,3,0.155,4,0.155,5,0.121,8,0.615,9,1.038,12,0.547,13,0.011,15,0.523,18,0.155,19,0.009,20,0.009,47,1.861,48,0.763,49,0.898,55,0.208,61,1.079,80,1.612,108,2.095,133,3.852,134,3.23,206,4.107,723,4.93,725,5.881,739,4.556,740,4.93,741,4.93,742,5.431,743,7.385]],["title/classes/DefaultWithoutSecurityController.html",[0,0.269,66,3.118]],["body/classes/DefaultWithoutSecurityController.html",[0,0.39,2,0.921,3,0.154,4,0.154,5,0.12,8,0.611,9,1.034,12,0.543,13,0.011,15,0.521,18,0.154,19,0.009,20,0.009,47,1.849,48,0.758,49,0.893,55,0.206,61,1.072,66,5.413,67,6.267,80,1.602,108,2.081,133,3.846,134,3.221,723,4.897,725,5.857,739,4.525,740,4.897,741,4.897,744,5.395,745,7.356]],["title/interfaces/JWTPayloadInterface.html",[313,2.914,746,3.118]],["body/interfaces/JWTPayloadInterface.html",[3,0.158,4,0.158,5,0.123,8,0.625,9,1.048,12,0.701,13,0.011,14,0.801,18,0.158,19,0.009,20,0.009,96,2.698,313,5.126,326,1.91,357,4.372,746,4.628,747,6.289,748,5.517]],["title/injectables/JwtAuthGuard.html",[124,1.311,732,3.118]],["body/injectables/JwtAuthGuard.html",[0,0.29,3,0.183,4,0.115,5,0.09,8,0.455,9,0.858,12,0.606,13,0.011,15,0.519,18,0.115,19,0.008,20,0.008,25,1.341,26,2.129,30,4.017,31,0.729,37,2.129,42,1.337,47,1.835,48,0.752,49,0.886,55,0.246,57,2.196,58,1.597,59,1.939,61,0.798,77,3.106,78,2.718,83,2.323,92,2.831,93,2.431,105,1.55,107,1.939,108,2.323,109,2.323,124,1.889,126,2.16,133,3.565,140,1.262,141,2.081,147,3.149,148,3.742,156,0.978,160,5.354,161,4.86,162,5.354,163,5.354,164,4.017,165,4.017,267,3.369,561,2.669,732,4.491,749,6.69,750,4.017,751,6.104,752,6.881,753,5.354,754,6.104,755,5.354,756,6.423,757,4.579,758,6.423,759,6.104,760,4.579,761,6.865,762,5.354,763,4.579,764,6.104,765,4.579,766,4.579,767,3.646,768,4.017,769,5.354,770,4.579,771,4.017,772,4.579,773,4.017,774,4.579,775,4.579,776,4.579,777,6.865,778,4.017,779,4.017,780,4.579]],["title/injectables/JwtStrategy.html",[124,1.311,263,2.914]],["body/injectables/JwtStrategy.html",[0,0.298,3,0.118,4,0.118,5,0.092,8,0.467,9,0.872,12,0.679,13,0.011,15,0.545,18,0.118,19,0.008,20,0.008,25,1.363,26,2.165,28,2.943,31,0.988,37,1.638,47,1.865,48,0.765,49,0.901,50,2.628,55,0.265,59,1.988,61,0.818,77,3.277,78,3.128,80,1.223,83,1.589,91,2.059,94,1.988,104,2.059,105,1.589,107,1.988,108,2.352,124,1.921,126,2.215,129,5.444,132,4.788,133,3.591,134,2.845,135,5.444,137,4.605,138,4.267,140,1.294,141,2.134,144,5.444,145,2.215,146,4.118,147,3.228,150,4.118,151,3.739,153,3.739,156,1.003,252,1.032,263,4.267,281,4.118,288,5.535,305,4.052,306,4.941,309,4.118,313,5.085,314,4.118,315,3.739,316,2.301,318,3.739,326,1.092,355,3.739,778,4.118,781,4.118,782,6.097,783,6.206,784,6.206,785,6.206,786,4.695,787,4.695,788,6.206,789,4.695,790,4.695,791,4.695,792,4.695,793,4.695,794,4.695,795,4.695,796,4.695]],["title/classes/LoginDTO.html",[0,0.269,52,2.357]],["body/classes/LoginDTO.html",[0,0.428,2,0.393,3,0.066,4,0.066,5,0.051,8,0.261,9,0.574,12,0.748,13,0.011,14,0.813,15,0.289,18,0.162,19,0.005,20,0.005,25,0.577,31,0.65,34,0.813,39,1.461,48,0.753,52,2.27,55,0.168,65,0.611,96,2.218,98,2.269,117,2.096,119,2.566,121,2.554,140,1.784,156,1.64,234,2.865,237,2.887,240,3.324,242,2.865,243,2.86,244,0.837,247,0.863,248,0.945,249,1.283,250,1.04,251,0.945,252,1.893,253,1.112,254,1.728,255,1.112,256,1.112,326,0.949,329,2.27,331,0.889,342,2.664,343,2.172,344,1.398,345,1.398,346,1.34,347,1.34,348,1.34,349,1.34,350,2.12,351,1.531,352,1.398,353,2.172,354,1.398,410,2.589,445,0.916,496,1.341,546,2.195,595,1.671,604,1.398,605,1.398,606,3.14,607,4.152,608,3.46,631,1.398,632,1.61,633,1.461,634,1.461,635,2.918,669,2.643,671,2.643,673,2.304,675,1.398,676,2.643,677,1.701,678,1.531,679,2.643,680,1.701,681,1.701,682,1.701,683,2.643,684,1.398,685,1.701,686,1.461,687,1.398,688,1.112,689,1.61,797,2.627,798,2.627,799,2.627]],["title/classes/Migrations1717483943918.html",[0,0.269,800,3.374]],["body/classes/Migrations1717483943918.html",[0,0.13,2,0.307,3,0.051,4,0.051,5,0.04,8,0.755,9,0.471,12,0.375,13,0.01,14,0.188,15,0.301,18,0.051,19,0.004,20,0.004,26,1.168,28,2.456,34,1.673,37,1.168,47,1.007,48,0.814,49,0.486,50,2.076,55,0.069,94,3.663,96,1.394,98,0.761,117,0.761,119,1.522,121,1.046,131,6.754,134,2.374,140,2.049,141,0.931,169,5.092,326,1.651,329,1.862,331,1.963,342,1.782,343,1.09,344,1.09,345,1.09,346,1.046,347,1.046,348,1.046,349,1.046,352,1.09,353,1.09,354,1.09,357,1.09,366,4.39,367,2.007,368,4.967,370,3.875,445,2.023,453,4.268,482,0.899,494,2.403,495,2.502,496,1.448,497,1.508,498,1.468,500,1.93,506,2.403,522,2.296,546,1.862,552,4.275,555,3.006,561,4.812,576,3.381,612,1.508,613,1.508,633,1.14,634,1.14,688,2.703,729,2.168,800,3.904,801,4.301,802,1.798,803,2.303,804,3.724,805,2.937,806,2.937,807,2.049,808,2.937,809,5.795,810,2.049,811,2.937,812,2.049,813,5.6,814,6.83,815,6.889,816,5.795,817,3.349,818,5.405,819,5.6,820,6.228,821,5.6,822,5.6,823,3.349,824,2.049,825,2.049,826,2.049,827,2.049,828,2.049,829,2.049,830,1.508,831,3.349,832,1.508,833,4.301,834,3.349,835,3.349,836,3.349,837,3.349,838,3.779,839,5.405,840,3.349,841,2.303,842,6.385,843,5.6,844,4.903,845,3.349,846,3.349,847,6.385,848,4.903,849,3.349,850,3.349,851,7.321,852,6.73,853,6.73,854,3.349,855,7.321,856,6.73,857,6.434,858,3.349,859,3.349,860,3.349,861,3.349,862,3.349,863,2.937,864,2.049,865,2.937,866,2.937,867,2.937,868,3.349,869,3.349,870,3.349,871,3.349,872,2.049,873,3.349,874,4.301,875,3.349,876,2.049,877,3.349,878,3.349,879,2.049,880,6.73,881,6.597]],["title/classes/Migrations1719099417082.html",[0,0.269,882,3.374]],["body/classes/Migrations1719099417082.html",[0,0.249,2,0.588,3,0.098,4,0.098,5,0.077,8,0.718,9,0.772,12,0.56,13,0.011,14,0.361,15,0.449,18,0.098,19,0.007,20,0.007,26,1.917,28,3.171,34,1.215,37,1.917,47,1.652,48,0.923,49,0.797,50,2.907,55,0.132,94,3.577,131,6.558,134,3.065,140,1.893,141,1.784,169,4.801,326,1.277,331,1.859,367,2.81,368,4.678,370,3.671,445,1.917,453,4.043,482,1.721,494,1.924,495,2.003,496,1.052,506,1.924,522,1.554,555,2.406,561,4.573,576,2.288,803,3.778,804,5.56,805,4.819,806,4.819,808,4.819,809,6.992,811,4.819,813,4.819,814,6.653,815,6.569,816,4.819,819,4.819,820,5.56,821,4.819,822,4.819,843,6.022,851,7.083,852,6.339,853,6.339,855,7.083,856,6.339,857,6.022,874,4.819,880,6.339,881,6.022,882,5.467,883,6.022,884,3.443,885,3.926,886,3.926,887,3.926,888,4.573,889,7.845,890,6.866,891,5.494,892,5.494,893,5.494,894,5.494,895,5.494,896,5.494,897,5.494,898,3.926]],["title/entities/Notification.html",[549,1.858,838,2.357]],["body/entities/Notification.html",[0,0.238,3,0.094,4,0.094,5,0.073,8,0.373,9,0.748,12,0.751,13,0.011,14,0.713,15,0.579,18,0.094,19,0.007,20,0.007,31,1.301,34,1.914,48,0.462,49,1.125,55,0.207,93,2.676,140,1.467,156,1.708,249,0.9,252,1.621,326,1.438,412,1.705,482,1.645,494,3.031,495,3.155,496,1.657,498,2.711,500,2.81,501,3.439,506,3.031,522,2.106,546,3.236,549,2.333,550,1.996,554,2.579,555,4.524,557,4.626,558,3.658,559,5.146,560,5.074,561,4.762,562,5.074,564,4.355,566,3.658,568,4.524,569,4.524,572,3.445,574,4.524,576,3.101,580,2.579,582,3.658,587,3.658,588,2.428,589,3.658,590,4.885,612,4.55,613,4.55,838,3.439,841,5.424,899,3.29,900,3.751,901,3.751,902,3.751,903,3.751,904,6.473,905,3.751,906,3.751,907,3.751,908,3.751,909,5.32,910,3.751,911,3.751,912,3.751,913,3.751,914,3.751]],["title/classes/NotificationAlreadyExistsException.html",[0,0.269,694,2.914]],["body/classes/NotificationAlreadyExistsException.html",[0,0.495,2,0.903,3,0.151,4,0.151,5,0.118,13,0.011,14,0.554,15,0.427,18,0.196,19,0.009,20,0.009,25,1.78,42,2.123,55,0.202,57,2.983,58,2.104,61,1.051,80,2.11,89,2.311,249,1.02,335,2.741,437,2.387,690,2.387,691,4.437,692,2.844,694,4.998,695,5.788,696,2.844,697,2.844,698,3.904,699,2.844,915,6.03]],["title/controllers/NotificationController.html",[21,1.999,916,3.118]],["body/controllers/NotificationController.html",[0,0.183,3,0.072,4,0.072,5,0.057,8,0.287,11,3.352,12,0.717,13,0.011,14,0.618,15,0.421,18,0.072,19,0.006,20,0.006,21,1.364,23,1.364,25,0.966,26,1.533,28,3.282,31,0.946,37,2.071,41,3.177,42,2.433,43,3.441,44,3.064,45,2.91,47,1.785,48,0.732,49,0.862,50,3.049,55,0.252,56,1.872,57,2.298,58,1.009,59,1.225,60,2.845,61,0.504,62,4.134,63,4.415,64,1.872,65,0.672,77,1.145,78,1.145,80,0.753,82,3.844,83,2.009,86,3.441,87,3.441,88,3.64,89,1.684,91,2.603,92,1.973,93,2.228,94,2.514,102,2.91,103,2.801,104,2.603,105,2.727,106,3.844,107,2.514,108,2.009,109,2.009,111,3.64,112,3.844,148,4.522,155,1.872,247,0.95,259,2.507,294,3.172,316,3.296,326,1.715,331,0.979,367,2.43,369,3.022,370,2.91,371,1.988,378,1.988,385,3.655,387,1.988,389,3.022,390,1.988,393,1.988,398,1.988,400,1.988,401,3.844,406,1.686,407,1.686,408,2.562,409,2.128,410,1.225,411,1.872,412,1.314,424,1.988,427,1.988,428,1.988,430,4.083,431,4.083,435,1.988,436,1.988,437,1.145,445,1.009,446,3.655,447,1.988,484,1.773,489,1.773,609,3.844,838,4.252,916,3.234,917,2.537,918,2.128,919,4.952,920,5.299,921,2.892,922,2.892,923,2.303,924,2.128,925,4.395,926,2.892,927,2.128,928,2.892,929,2.303,930,4.083,931,2.892,932,3.441,933,2.537,934,3.499,935,2.128,936,2.892,937,2.892,938,2.892,939,2.892,940,2.892,941,4.663,942,4.663,943,2.892,944,2.892,945,2.892,946,5.938,947,2.892,948,2.303,949,2.892,950,2.303,951,4.395,952,2.892]],["title/classes/NotificationGateway.html",[0,0.269,953,2.743]],["body/classes/NotificationGateway.html",[0,0.19,1,4.452,2,0.449,3,0.075,4,0.075,5,0.059,8,0.298,9,0.635,12,0.681,13,0.011,14,0.627,15,0.528,18,0.075,19,0.006,20,0.006,26,1.577,28,2.888,31,0.964,37,2.379,47,2.05,48,0.841,49,0.99,50,1.914,55,0.237,59,1.271,61,0.523,71,4.181,72,2.633,79,3.965,83,2.196,91,1.982,92,2.532,93,2.256,94,1.271,100,5.431,104,1.982,108,1.53,109,2.57,140,0.827,141,1.364,169,1.749,294,2.132,310,2.064,327,2.633,332,3.965,355,5.935,552,1.749,803,3.108,838,4.616,935,2.208,953,2.926,954,2.633,955,5.437,956,5.437,957,5.437,958,6.821,959,4.52,960,4.52,961,4.52,962,4.52,963,7.453,964,4.52,965,3.001,966,6.051,967,3.001,968,5.437,969,3.001,970,4.52,971,7.594,972,3.001,973,6.39,974,4.52,975,3.001,976,3.001,977,4.52,978,3.001,979,3.001,980,4.52,981,3.001,982,4.52,983,3.001,984,6.051,985,4.52,986,3.001,987,6.051,988,3.001,989,4.52,990,4.52,991,3.001,992,2.633,993,3.001,994,3.001,995,3.001,996,3.001,997,3.001,998,3.001,999,3.001,1000,3.001,1001,3.001,1002,5.437,1003,5.437,1004,3.001,1005,3.001,1006,4.52,1007,4.52,1008,3.001,1009,3.001,1010,3.001,1011,4.52,1012,7.078,1013,6.49,1014,6.49,1015,5.437,1016,3.001,1017,2.633,1018,3.001,1019,4.52,1020,4.52,1021,3.001,1022,3.001,1023,3.001,1024,3.001,1025,4.52,1026,3.001,1027,4.52,1028,3.001,1029,6.821,1030,7.078,1031,2.633,1032,3.001,1033,4.52,1034,6.051,1035,6.051,1036,4.52,1037,4.52,1038,5.437,1039,4.52,1040,4.52,1041,4.52,1042,3.001,1043,3.001,1044,3.001,1045,4.52,1046,3.001,1047,3.001,1048,4.52,1049,4.52,1050,4.52,1051,7.078,1052,3.001,1053,3.001,1054,3.001,1055,3.001,1056,3.001,1057,3.001,1058,3.001]],["title/modules/NotificationModule.html",[174,1.624,188,2.914]],["body/modules/NotificationModule.html",[0,0.338,3,0.133,4,0.133,5,0.104,13,0.011,18,0.133,19,0.008,20,0.008,23,3.175,55,0.284,61,0.928,93,1.697,145,2.512,174,2.829,176,2.61,177,2.61,178,2.833,179,2.833,180,2.61,181,3.767,182,3.928,186,5.009,188,5.87,192,3.582,193,2.833,194,2.833,196,3.924,197,4.671,219,3.448,220,2.512,223,4.358,412,2.42,460,3.661,838,3.744,916,5.432,932,5.589,933,4.671,935,3.918,953,5.436,1059,4.671,1060,4.671,1061,5.325,1062,4.671,1063,5.325,1064,5.325,1065,4.671]],["title/classes/NotificationNoExistsException.html",[0,0.269,698,2.743]],["body/classes/NotificationNoExistsException.html",[0,0.495,2,0.903,3,0.151,4,0.151,5,0.118,13,0.011,14,0.554,15,0.427,18,0.196,19,0.009,20,0.009,25,1.78,42,2.123,55,0.202,57,2.983,58,2.104,61,1.051,80,2.11,89,2.311,249,1.02,335,2.741,437,2.387,690,2.387,691,4.437,692,2.844,694,4.146,695,5.788,696,2.844,697,2.844,698,4.706,699,2.844,1066,6.03]],["title/injectables/NotificationService.html",[124,1.311,932,2.743]],["body/injectables/NotificationService.html",[0,0.2,3,0.079,4,0.079,5,0.062,8,0.314,9,0.66,11,2.059,12,0.717,13,0.011,14,0.515,15,0.524,18,0.079,19,0.007,20,0.006,25,1.032,26,1.638,28,3.345,31,0.748,34,1.735,37,2.165,45,3.251,47,1.866,48,0.765,49,0.901,50,3.132,55,0.265,59,1.337,61,0.55,77,2.752,78,2.752,80,1.46,83,2.1,91,2.721,92,2.672,94,2.809,104,2.721,105,2.1,107,2.809,108,2.245,124,1.453,126,1.49,133,2.547,134,1.922,156,1.687,206,3.452,209,2.045,210,2.045,220,1.49,248,1.136,249,0.794,251,1.136,257,1.49,258,2.86,294,3.488,296,4.018,316,2.302,326,1.674,331,1.069,367,1.922,370,2.302,406,1.841,445,1.102,464,3.229,466,3.229,471,3.229,474,3.854,478,2.172,481,4.267,482,1.385,483,2.324,484,1.936,486,3.455,488,1.756,489,1.936,493,3.229,494,2.302,496,1.777,498,2.059,499,3.229,502,2.172,504,3.229,506,2.748,512,3.229,513,2.172,514,3.229,515,2.172,519,2.172,521,3.854,522,1.25,527,3.455,529,3.854,530,2.172,532,2.172,609,3.04,612,4.124,613,4.124,698,3.04,838,4.277,930,3.229,932,3.04,934,4.942,935,2.324,953,4.501,1065,2.77,1067,2.77,1068,5.605,1069,4.696,1070,3.158,1071,3.739,1072,3.158,1073,3.158,1074,3.739,1075,3.158,1076,4.696,1077,4.696,1078,3.158,1079,3.455,1080,3.455,1081,3.158,1082,3.158,1083,4.696,1084,3.158,1085,4.124,1086,2.324,1087,3.455,1088,3.158,1089,3.158,1090,3.158,1091,3.158,1092,3.158,1093,3.158,1094,3.158,1095,3.158,1096,4.696,1097,4.696,1098,3.158,1099,3.158]],["title/entities/NotificationType.html",[549,1.858,841,2.914]],["body/entities/NotificationType.html",[0,0.326,3,0.129,4,0.129,5,0.1,8,0.511,9,0.925,12,0.736,13,0.011,14,0.744,15,0.561,18,0.129,19,0.008,20,0.008,31,1.26,34,2.247,48,0.943,55,0.221,140,1.814,249,1.113,252,1.779,326,1.688,482,2.253,496,1.945,522,2.605,549,2.885,550,2.734,559,4.963,564,4.45,568,4.693,569,4.693,572,4.26,574,4.693,576,3.836,588,3.326,592,4.842,838,4.683,841,4.992,904,6.715,1100,4.507,1101,5.138,1102,5.138,1103,5.138,1104,5.138,1105,4.091,1106,6.581,1107,5.138,1108,5.138]],["title/entities/Organization.html",[549,1.858,888,2.47]],["body/entities/Organization.html",[0,0.248,3,0.098,4,0.098,5,0.076,8,0.388,9,0.769,12,0.749,13,0.011,14,0.687,15,0.578,18,0.098,19,0.007,20,0.007,31,1.299,34,1.956,48,0.844,49,1.137,55,0.184,93,2.741,140,1.509,156,1.722,249,0.926,252,1.505,326,1.469,412,1.774,482,1.712,494,3.097,495,3.224,496,1.693,498,2.771,500,2.872,501,3.514,506,3.097,522,2.167,546,3.278,549,2.399,550,2.077,552,3.683,554,2.684,555,4.582,557,4.345,558,3.763,559,5.118,560,5.14,561,4.796,562,5.14,564,4.198,566,3.763,568,4.198,569,4.198,572,3.543,574,4.421,576,3.19,578,5.039,580,2.684,582,3.763,584,2.872,587,3.763,588,2.527,589,3.763,590,4.709,591,4.027,888,3.683,1109,3.424,1110,3.904,1111,3.904,1112,3.904,1113,3.904,1114,3.904,1115,3.904,1116,3.904,1117,3.904,1118,3.904,1119,3.904,1120,5.472,1121,3.904]],["title/classes/OrganizationAlreadyExistsException.html",[0,0.269,702,2.914]],["body/classes/OrganizationAlreadyExistsException.html",[0,0.495,2,0.903,3,0.151,4,0.151,5,0.118,13,0.011,14,0.554,15,0.427,18,0.196,19,0.009,20,0.009,25,1.78,42,2.123,55,0.202,57,2.983,58,2.104,61,1.051,80,2.11,89,2.311,249,1.02,335,2.741,437,2.387,690,2.387,692,2.844,696,2.844,697,2.844,699,2.844,700,4.437,702,4.998,703,5.788,704,3.904,1122,6.03]],["title/controllers/OrganizationController.html",[21,1.999,1123,3.118]],["body/controllers/OrganizationController.html",[0,0.189,3,0.075,4,0.075,5,0.058,8,0.296,11,3.377,12,0.71,13,0.011,14,0.625,15,0.427,18,0.075,19,0.006,20,0.006,21,1.407,23,1.407,25,0.988,26,1.569,28,3.305,31,0.961,37,2.104,41,3.21,42,2.442,43,3.506,44,3.097,45,2.956,47,1.813,48,0.743,49,0.875,50,3.078,55,0.254,56,1.931,57,2.329,58,1.04,59,1.263,60,2.912,61,0.52,62,4.19,63,4.457,64,1.931,65,0.693,77,1.181,78,1.181,80,0.777,82,3.905,83,2.041,86,3.506,87,3.506,88,3.697,89,1.724,91,2.644,92,2.01,93,2.063,94,2.554,102,2.956,103,2.845,104,2.644,105,2.742,106,3.905,107,2.554,108,2.041,109,2.041,111,3.697,112,3.905,148,4.171,155,1.931,259,2.554,294,2.845,316,3.335,326,1.73,331,1.009,367,2.468,369,3.093,370,2.956,371,2.05,378,2.05,385,3.724,387,2.05,389,3.093,390,2.05,393,2.05,398,2.05,400,2.05,401,3.506,406,1.738,407,1.738,408,2.622,409,2.194,410,1.263,411,1.931,412,1.355,424,2.05,427,2.05,428,2.05,430,4.147,431,4.147,435,2.05,436,2.05,437,1.181,445,1.04,446,3.093,447,2.05,484,1.828,489,1.828,619,3.905,888,4.549,918,2.194,919,4.999,920,5.35,923,2.374,924,2.194,927,2.194,929,2.374,948,2.374,950,2.374,1123,3.31,1124,2.616,1125,5.416,1126,2.982,1127,2.982,1128,2.982,1129,4.147,1130,2.982,1131,3.506,1132,2.616,1133,3.582,1134,2.374,1135,2.982,1136,2.982,1137,2.982,1138,2.982,1139,2.982,1140,6.031,1141,2.982,1142,2.982,1143,4.498,1144,2.982]],["title/modules/OrganizationModule.html",[174,1.624,189,2.914]],["body/modules/OrganizationModule.html",[0,0.358,3,0.141,4,0.141,5,0.11,13,0.011,18,0.141,19,0.009,20,0.009,23,3.291,55,0.282,61,0.983,93,1.797,145,2.66,174,2.904,176,2.764,177,2.764,178,3,179,3,180,2.764,181,3.866,182,4.032,189,5.777,192,3.713,193,3,194,3,196,3.287,219,3.65,220,2.66,223,4.517,412,2.563,460,3.877,888,4.067,1123,5.575,1131,5.631,1132,4.946,1134,4.49,1145,4.946,1146,4.946,1147,4.946,1148,5.638,1149,5.638]],["title/classes/OrganizationNoExistsException.html",[0,0.269,704,2.743]],["body/classes/OrganizationNoExistsException.html",[0,0.495,2,0.903,3,0.151,4,0.151,5,0.118,13,0.011,14,0.554,15,0.427,18,0.196,19,0.009,20,0.009,25,1.78,42,2.123,55,0.202,57,2.983,58,2.104,61,1.051,80,2.11,89,2.311,249,1.02,335,2.741,437,2.387,690,2.387,692,2.844,696,2.844,697,2.844,699,2.844,700,4.437,702,4.146,703,5.788,704,4.706,1150,6.03]],["title/injectables/OrganizationService.html",[124,1.311,1131,2.743]],["body/injectables/OrganizationService.html",[0,0.187,3,0.074,4,0.074,5,0.058,8,0.293,9,0.627,11,1.956,12,0.702,13,0.011,14,0.495,15,0.499,18,0.074,19,0.008,20,0.006,25,0.98,26,1.557,28,3.297,31,0.47,34,1.665,37,2.093,45,3.322,47,1.803,48,0.96,49,0.87,50,3.068,55,0.258,61,0.514,77,2.13,78,2.13,80,1.401,83,2.381,91,2.63,92,2.754,94,2.869,98,1.656,104,2.63,105,2.03,107,2.728,108,2.18,117,1.656,119,2.028,124,1.381,126,1.392,133,2.446,134,1.826,156,1.796,169,1.72,206,3.336,209,1.91,210,1.91,220,1.392,247,1.97,248,1.605,249,0.755,251,1.605,252,0.98,257,1.392,258,3.061,294,3.418,296,3.884,316,2.187,326,1.685,331,0.998,367,1.826,370,2.187,406,1.72,445,1.029,464,3.068,466,3.068,471,3.068,474,3.7,478,2.029,481,4.43,482,1.294,483,2.171,484,1.809,486,3.283,488,1.641,489,1.809,493,3.068,494,2.94,495,3.061,496,1.726,498,2.825,499,3.068,500,2.028,501,1.641,502,2.029,503,3.283,504,3.068,506,2.94,508,3.959,509,2.171,510,2.171,511,2.171,512,3.068,513,2.029,514,3.068,515,2.029,517,2.171,519,2.029,521,3.7,522,1.168,526,3.959,527,3.283,529,3.7,530,2.029,532,2.029,619,2.889,704,2.889,888,4.324,1071,3.553,1074,3.553,1085,3.959,1086,2.171,1087,3.283,1129,3.068,1131,2.889,1133,4.776,1134,2.349,1151,2.588,1152,5.381,1153,4.462,1154,2.95,1155,2.95,1156,2.95,1157,2.95,1158,4.462,1159,3.283,1160,3.283,1161,2.95,1162,2.95,1163,5.381,1164,2.95,1165,2.95,1166,2.95,1167,5.381,1168,2.95,1169,2.95,1170,4.462,1171,4.462,1172,4.462,1173,2.95,1174,2.95]],["title/classes/PaginationDTO.html",[0,0.269,246,2.47]],["body/classes/PaginationDTO.html",[0,0.494,2,0.616,3,0.103,4,0.103,5,0.08,8,0.409,9,0.798,12,0.711,13,0.011,14,0.716,15,0.496,18,0.19,19,0.008,20,0.007,31,1.116,41,1.869,42,1.897,44,1.803,48,0.906,49,1.151,55,0.19,65,0.956,96,1.863,102,3.184,103,2.676,105,2.198,109,1.391,117,2.106,140,2.247,141,2.579,156,1.785,230,2.397,231,2.52,232,2.662,234,2.778,237,2.791,238,2.662,239,4.206,240,2.966,241,3.34,242,2.495,243,2.644,244,1.311,245,2.662,246,3.307,247,1.35,248,2.52,249,1.317,250,1.628,251,2.52,252,1.711,253,2.751,254,3.112,255,2.751,256,2.402,257,2.676,258,2.098,259,1.939,595,2.867,1175,4.112,1176,4.112,1177,2.662,1178,4.112,1179,2.662,1180,4.112,1181,4.112,1182,4.112]],["title/entities/PaymentMethod.html",[549,1.858,688,1.794]],["body/entities/PaymentMethod.html",[0,0.257,3,0.101,4,0.101,5,0.079,8,0.402,9,0.789,12,0.745,13,0.011,14,0.639,15,0.576,18,0.101,19,0.007,20,0.007,31,1.294,48,0.857,49,1.147,55,0.188,93,2.751,140,1.547,156,1.688,249,0.949,252,1.528,326,1.498,412,1.839,482,1.774,494,3.157,495,3.286,496,1.726,498,2.824,500,2.927,501,3.582,506,3.157,522,2.221,546,3.315,549,2.46,550,2.153,552,3.755,554,2.782,555,4.634,557,4.429,558,3.858,559,5.075,560,5.198,561,4.826,562,5.198,564,3.948,566,3.858,568,3.439,569,3.439,572,3.632,574,4.264,576,3.27,578,4.128,580,2.782,582,3.858,584,2.977,587,3.858,588,2.619,589,3.858,590,4.783,591,4.128,688,2.727,1183,3.549,1184,4.046,1185,4.046,1186,4.046,1187,4.046,1188,4.046,1189,4.046,1190,4.046,1191,4.046,1192,4.046,1193,4.921,1194,4.046]],["title/classes/PaymentMethodAlreadyExistsException.html",[0,0.269,708,2.914]],["body/classes/PaymentMethodAlreadyExistsException.html",[0,0.495,2,0.903,3,0.151,4,0.151,5,0.118,13,0.011,14,0.554,15,0.427,18,0.196,19,0.009,20,0.009,25,1.78,42,2.123,55,0.202,57,2.983,58,2.104,61,1.051,80,2.11,89,2.311,249,1.02,335,2.741,437,2.387,690,2.387,692,2.844,696,2.844,697,2.844,699,2.844,706,4.437,708,4.998,709,5.788,710,3.904,1195,6.03]],["title/controllers/PaymentMethodController.html",[21,1.999,1196,3.118]],["body/controllers/PaymentMethodController.html",[0,0.189,3,0.075,4,0.075,5,0.058,8,0.296,11,3.377,12,0.71,13,0.011,14,0.625,15,0.427,18,0.075,19,0.006,20,0.006,21,1.407,23,1.407,25,0.988,26,1.569,28,3.305,31,0.961,37,2.104,41,3.21,42,2.442,43,3.506,44,3.097,45,2.956,47,1.813,48,0.743,49,0.875,50,3.078,55,0.254,56,1.931,57,2.329,58,1.04,59,1.263,60,2.912,61,0.52,62,4.19,63,4.457,64,1.931,65,0.693,77,1.181,78,1.181,80,0.777,82,3.905,83,2.041,86,3.506,87,3.506,88,3.697,89,1.724,91,2.644,92,2.01,93,2.063,94,2.554,102,2.956,103,2.845,104,2.644,105,2.742,106,3.905,107,2.554,108,2.041,109,2.041,111,3.697,112,3.905,148,4.171,155,1.931,259,2.554,294,2.845,316,3.335,326,1.73,331,1.009,367,2.468,369,3.093,370,2.956,371,2.05,378,2.05,385,3.724,387,2.05,389,3.093,390,2.05,393,2.05,398,2.05,400,2.05,401,3.506,406,1.738,407,1.738,408,2.622,409,2.194,410,1.263,411,1.931,412,1.355,424,2.05,427,2.05,428,2.05,430,4.147,431,4.147,435,2.05,436,2.05,437,1.181,445,1.04,446,3.093,447,2.05,484,1.828,489,1.828,626,3.905,688,3.305,918,2.194,919,4.999,920,5.35,923,2.374,924,2.194,927,2.194,929,2.374,948,2.374,950,2.374,1196,3.31,1197,2.616,1198,5.416,1199,2.982,1200,2.982,1201,2.982,1202,4.147,1203,2.982,1204,3.506,1205,2.616,1206,3.582,1207,2.374,1208,2.982,1209,2.982,1210,2.982,1211,2.982,1212,2.982,1213,6.031,1214,2.982,1215,2.982,1216,4.498,1217,2.982]],["title/modules/PaymentMethodModule.html",[174,1.624,190,2.914]],["body/modules/PaymentMethodModule.html",[0,0.358,3,0.141,4,0.141,5,0.11,13,0.011,18,0.141,19,0.009,20,0.009,23,3.291,55,0.282,61,0.983,93,1.797,145,2.66,174,2.904,176,2.764,177,2.764,178,3,179,3,180,2.764,181,3.866,182,4.032,190,5.777,192,3.713,193,3,194,3,196,3.287,219,3.65,220,2.66,223,4.517,412,2.563,460,3.877,688,2.954,1196,5.575,1204,5.631,1205,4.946,1207,4.49,1218,4.946,1219,4.946,1220,4.946,1221,5.638,1222,5.638]],["title/classes/PaymentMethodNoExistsException.html",[0,0.269,710,2.743]],["body/classes/PaymentMethodNoExistsException.html",[0,0.495,2,0.903,3,0.151,4,0.151,5,0.118,13,0.011,14,0.554,15,0.427,18,0.196,19,0.009,20,0.009,25,1.78,42,2.123,55,0.202,57,2.983,58,2.104,61,1.051,80,2.11,89,2.311,249,1.02,335,2.741,437,2.387,690,2.387,692,2.844,696,2.844,697,2.844,699,2.844,706,4.437,708,4.146,709,5.788,710,4.706,1223,6.03]],["title/injectables/PaymentMethodService.html",[124,1.311,1204,2.743]],["body/injectables/PaymentMethodService.html",[0,0.19,3,0.075,4,0.075,5,0.059,8,0.297,9,0.634,11,1.977,12,0.704,13,0.011,14,0.499,15,0.501,18,0.075,19,0.008,20,0.006,25,0.991,26,1.573,28,3.307,31,0.476,37,2.107,45,3.339,47,1.816,48,0.963,49,0.877,50,3.081,55,0.259,61,0.521,77,2.148,78,2.148,80,1.413,83,2.393,91,2.649,92,2.764,94,2.885,98,1.674,104,2.649,105,2.044,107,2.744,108,2.193,117,1.674,119,2.049,124,1.396,126,1.411,133,2.466,134,1.845,156,1.787,206,3.36,209,1.937,210,1.937,220,1.411,247,1.984,248,1.622,249,0.763,251,1.622,252,0.991,257,1.411,258,3.082,294,3.432,296,3.911,316,2.21,326,1.692,331,1.012,367,1.845,370,2.21,406,1.744,445,1.044,464,3.1,466,3.1,471,3.1,474,3.731,478,2.057,481,4.456,482,1.312,483,2.201,484,1.834,486,3.318,488,1.664,489,1.834,493,3.1,494,2.961,495,3.082,496,1.737,498,2.842,499,3.1,500,2.049,501,1.664,502,2.057,503,3.318,504,3.1,506,2.961,508,3.993,509,2.201,510,2.201,511,2.201,512,3.1,513,2.057,514,3.1,515,2.057,517,2.201,519,2.057,521,3.731,522,1.184,526,3.993,529,3.731,530,2.057,532,2.057,626,2.919,688,3.153,710,2.919,1071,3.59,1074,3.59,1085,3.993,1086,2.201,1087,3.318,1202,3.1,1204,2.919,1206,4.81,1207,2.382,1224,2.624,1225,4.76,1226,4.509,1227,2.992,1228,2.992,1229,2.992,1230,2.992,1231,3.955,1232,3.318,1233,3.318,1234,2.992,1235,2.992,1236,5.426,1237,2.992,1238,2.992,1239,2.992,1240,5.426,1241,2.992,1242,2.992,1243,4.509,1244,4.509,1245,2.992,1246,2.992]],["title/classes/ResposeDTO.html",[0,0.269,44,1.858]],["body/classes/ResposeDTO.html",[0,0.504,2,0.667,3,0.112,4,0.112,5,0.087,8,0.443,9,0.842,12,0.667,13,0.011,14,0.715,15,0.424,18,0.195,19,0.009,20,0.008,31,0.954,41,2.024,42,2.207,44,2.627,48,0.834,49,0.87,55,0.201,65,1.036,96,1.463,102,3.55,103,2.826,105,2.45,109,2.291,117,1.654,140,1.996,156,1.783,230,2.596,231,2.731,232,2.884,234,2.807,237,2.819,238,2.884,239,4.383,240,3.066,241,3.434,242,2.556,243,2.689,244,1.42,245,2.884,246,2.596,247,1.463,248,2.156,249,1.278,250,1.764,251,2.156,252,1.66,253,1.886,254,2.867,255,1.886,256,1.886,257,2.826,258,2.273,259,2.101,595,2.452,596,3.907,1247,4.454,1248,3.278,1249,4.454]],["title/classes/ResposeResultsPaginationDTO.html",[0,0.269,257,1.999]],["body/classes/ResposeResultsPaginationDTO.html",[0,0.501,2,0.649,3,0.109,4,0.109,5,0.085,8,0.431,9,0.827,12,0.697,13,0.011,14,0.688,15,0.507,18,0.193,19,0.009,20,0.007,31,1.141,41,1.971,42,1.95,44,1.901,48,0.823,55,0.197,65,1.008,96,1.424,102,3.274,103,2.775,105,2.26,109,1.467,117,1.61,140,1.975,156,1.775,230,2.528,231,2.658,232,2.807,234,2.797,237,2.81,238,2.807,239,4.324,240,3.033,241,3.403,242,2.535,243,2.675,244,1.382,245,2.807,246,2.528,247,1.424,248,2.577,249,1.359,250,1.717,251,2.577,252,1.645,253,1.836,254,2.828,255,1.836,256,1.836,257,3.15,258,3.408,259,2.045,595,2.931,1250,7.162,1251,4.336,1252,4.336,1253,4.336,1254,4.336]],["title/classes/ResposeSuccessDataDTO.html",[0,0.269,41,1.926]],["body/classes/ResposeSuccessDataDTO.html",[0,0.505,2,0.668,3,0.112,4,0.112,5,0.087,8,0.443,9,0.843,12,0.667,13,0.011,14,0.695,15,0.425,18,0.195,19,0.009,20,0.008,31,0.955,41,2.726,42,2.208,44,1.956,48,0.835,49,0.87,55,0.201,65,1.037,96,1.465,102,3.552,103,3.418,105,2.452,109,1.51,117,1.656,140,1.998,156,1.783,230,2.601,231,2.735,232,2.888,234,2.808,237,2.819,238,2.888,239,4.387,240,3.068,241,3.436,242,2.557,243,2.69,244,1.422,245,2.888,246,2.601,247,1.465,248,2.158,249,1.279,250,1.766,251,2.158,252,1.661,253,1.889,254,2.869,255,1.889,256,1.889,257,2.829,258,2.276,259,2.104,595,2.455,600,2.187,1248,3.283,1255,4.461,1256,4.461]],["title/classes/ResposeSuccessPaginationDTO.html",[0,0.269,259,1.999]],["body/classes/ResposeSuccessPaginationDTO.html",[0,0.504,2,0.667,3,0.112,4,0.112,5,0.087,8,0.443,9,0.842,12,0.667,13,0.011,14,0.695,15,0.424,18,0.195,19,0.009,20,0.008,31,0.954,41,2.024,42,2.207,44,1.953,48,0.834,49,0.87,55,0.201,65,1.036,96,1.463,102,3.55,103,3.416,105,2.45,109,1.507,117,1.654,140,1.996,156,1.783,230,2.596,231,2.731,232,2.884,234,2.807,237,2.819,238,2.884,239,4.383,240,3.066,241,3.434,242,2.556,243,2.689,244,1.42,245,2.884,246,2.596,247,1.463,248,2.156,249,1.278,250,1.764,251,2.156,252,1.66,253,1.886,254,2.867,255,1.886,256,1.886,257,3.194,258,2.273,259,2.826,595,2.452,600,2.183,1248,3.278,1257,4.454,1258,4.454]],["title/entities/Role.html",[357,2.255,549,1.858]],["body/entities/Role.html",[0,0.333,3,0.131,4,0.131,5,0.103,8,0.521,9,0.937,12,0.73,13,0.011,14,0.748,15,0.547,18,0.131,19,0.008,20,0.008,31,1.229,34,2.269,48,0.646,49,0.968,55,0.224,93,2.595,156,1.424,252,1.695,326,1.704,357,4.238,412,2.384,482,2.3,549,2.923,550,2.791,552,4.273,559,4.99,564,4.087,568,4.99,569,4.99,574,4.494,592,4.906,729,3.395,1105,4.176,1259,4.6,1260,6.667,1261,5.245,1262,5.245,1263,6.667,1264,5.245,1265,6.667,1266,5.245,1267,5.848,1268,5.245,1269,6.667]],["title/guards/RolesGuard.html",[273,2.914,1270,3.374]],["body/guards/RolesGuard.html",[0,0.333,3,0.132,4,0.132,5,0.103,8,0.522,12,0.589,13,0.011,15,0.473,18,0.132,19,0.008,20,0.008,26,2.329,37,1.833,42,1.534,47,2.007,48,0.823,49,0.969,55,0.259,57,2.402,58,1.833,61,0.916,80,1.368,83,2.483,92,2.866,93,2.128,105,1.778,107,2.225,108,1.778,109,1.778,124,2.066,156,1.567,267,3.866,273,4.59,330,4.609,357,2.796,401,3.402,410,2.225,411,3.402,729,3.402,730,4.609,739,3.866,752,7.143,753,6.771,755,5.855,756,6.771,758,4.609,771,4.609,773,4.609,779,4.609,803,3.613,1271,5.255,1272,4.609,1273,5.255,1274,5.255,1275,5.255,1276,5.315,1277,5.315,1278,6.675,1279,5.255,1280,5.255,1281,5.255,1282,6.675,1283,5.255,1284,5.255]],["title/classes/SearchCategoryDto.html",[0,0.269,485,3.118]],["body/classes/SearchCategoryDto.html",[0,0.397,2,0.711,3,0.119,4,0.119,5,0.093,8,0.472,9,0.879,12,0.75,13,0.011,14,0.804,15,0.562,18,0.119,19,0.008,20,0.008,31,1.262,34,2.164,48,0.862,49,1.233,55,0.21,65,1.105,234,2.789,237,2.654,241,2.843,242,2.654,243,2.603,244,1.515,249,1.257,252,1.741,326,1.626,331,2.366,445,2.439,485,4.602,496,1.874,594,3.267,622,3.939,656,4.044,1285,6.435,1286,4.168,1287,4.168,1288,4.168,1289,3.267,1290,4.168,1291,4.168,1292,4.168]],["title/classes/SearchCategoryPaginationDto.html",[0,0.269,487,3.118]],["body/classes/SearchCategoryPaginationDto.html",[0,0.343,2,0.576,3,0.096,4,0.096,5,0.075,8,0.382,9,0.761,12,0.756,13,0.011,14,0.795,15,0.57,18,0.096,19,0.007,20,0.007,31,1.281,34,1.94,48,0.962,49,1.242,55,0.182,65,0.894,140,2.217,141,2.461,156,1.453,234,2.766,237,2.67,241,3.092,242,2.64,243,2.562,244,1.225,247,1.262,248,2.255,249,1.151,250,1.522,251,2.255,252,1.766,253,2.653,254,3.036,255,2.653,256,2.292,326,1.457,487,3.984,488,4.521,496,1.679,498,2.748,500,2.848,594,2.643,595,2.784,622,3.659,656,3.795,1177,2.489,1179,2.489,1285,6.473,1286,3.372,1287,3.372,1288,3.372,1289,2.643,1290,3.372,1291,3.372,1292,3.372,1293,2.829,1294,3.844,1295,3.984,1296,3.844,1297,3.844,1298,2.829,1299,3.844]],["title/classes/SearchNotificationDto.html",[0,0.269,1079,3.118]],["body/classes/SearchNotificationDto.html",[0,0.409,2,0.745,3,0.125,4,0.125,5,0.097,8,0.494,9,0.906,12,0.745,13,0.011,14,0.799,15,0.555,18,0.125,19,0.008,20,0.008,31,1.248,48,0.881,49,1.225,55,0.216,65,1.156,234,2.772,237,2.635,241,2.928,242,2.635,243,2.572,244,1.585,249,1.279,252,1.721,326,1.662,331,2.419,445,2.494,496,1.915,611,3.419,622,3.858,656,3.997,1079,4.741,1289,3.419,1300,6.391,1301,4.972,1302,4.362,1303,4.972,1304,4.362,1305,4.972]],["title/classes/SearchNotificationPaginationDto.html",[0,0.269,1080,3.118]],["body/classes/SearchNotificationPaginationDto.html",[0,0.353,2,0.599,3,0.1,4,0.1,5,0.078,8,0.397,9,0.782,11,2.807,12,0.754,13,0.011,14,0.79,15,0.567,18,0.1,19,0.007,20,0.007,31,1.275,48,0.897,49,1.239,55,0.187,65,0.93,140,2.235,141,2.53,156,1.478,234,2.751,237,2.662,241,2.909,242,2.628,243,2.538,244,1.275,247,1.313,248,2.303,249,1.171,250,1.583,251,2.303,252,1.758,253,2.711,254,3.081,255,2.711,256,2.357,326,1.488,488,4.508,496,1.715,498,2.807,500,2.909,595,2.833,600,1.96,611,2.75,622,3.531,656,3.712,1080,4.095,1177,2.589,1179,2.589,1293,2.943,1295,4.095,1298,2.943,1300,6.454,1302,3.508,1304,3.508,1306,3.999,1307,3.999,1308,3.999,1309,3.999,1310,3.999,1311,3.999,1312,3.999]],["title/classes/SearchOrganizationDto.html",[0,0.269,1159,3.118]],["body/classes/SearchOrganizationDto.html",[0,0.409,2,0.745,3,0.125,4,0.125,5,0.097,8,0.494,9,0.906,12,0.745,13,0.011,14,0.799,15,0.555,18,0.125,19,0.008,20,0.008,31,1.248,48,0.881,49,1.225,55,0.216,65,1.156,234,2.772,237,2.635,241,2.928,242,2.635,243,2.572,244,1.585,249,1.279,252,1.721,326,1.662,331,2.419,445,2.494,496,1.915,621,3.419,622,3.858,656,3.997,1159,4.741,1289,3.419,1313,6.391,1314,4.972,1315,4.362,1316,4.972,1317,4.362,1318,4.972]],["title/classes/SearchOrganizationPaginationDto.html",[0,0.269,1160,3.118]],["body/classes/SearchOrganizationPaginationDto.html",[0,0.353,2,0.599,3,0.1,4,0.1,5,0.078,8,0.397,9,0.782,12,0.754,13,0.011,14,0.79,15,0.567,18,0.1,19,0.007,20,0.007,31,1.275,48,0.971,49,1.239,55,0.187,65,0.93,140,2.235,141,2.53,156,1.478,234,2.751,237,2.662,241,2.909,242,2.628,243,2.538,244,1.275,247,1.313,248,2.303,249,1.171,250,1.583,251,2.303,252,1.758,253,2.711,254,3.081,255,2.711,256,2.357,326,1.488,488,4.508,496,1.715,498,2.807,500,2.909,595,2.833,600,1.96,621,2.75,622,3.531,656,3.712,1160,4.095,1177,2.589,1179,2.589,1293,2.943,1295,4.095,1298,2.943,1313,6.454,1315,3.508,1317,3.508,1319,3.999,1320,3.999,1321,3.999,1322,3.999,1323,3.999,1324,3.999,1325,3.999]],["title/classes/SearchPaymentMethodDto.html",[0,0.269,1232,3.118]],["body/classes/SearchPaymentMethodDto.html",[0,0.409,2,0.745,3,0.125,4,0.125,5,0.097,8,0.494,9,0.906,12,0.745,13,0.011,14,0.799,15,0.555,18,0.125,19,0.008,20,0.008,31,1.248,48,0.881,49,1.225,55,0.216,65,1.156,234,2.772,237,2.635,241,2.928,242,2.635,243,2.572,244,1.585,249,1.279,252,1.721,326,1.662,331,2.419,445,2.494,496,1.915,622,3.858,628,3.419,656,3.997,1232,4.741,1289,3.419,1326,6.391,1327,4.972,1328,4.362,1329,4.972,1330,4.362,1331,4.972]],["title/classes/SearchPaymentMethodPaginationDto.html",[0,0.269,1233,3.118]],["body/classes/SearchPaymentMethodPaginationDto.html",[0,0.353,2,0.599,3,0.1,4,0.1,5,0.078,8,0.397,9,0.782,12,0.754,13,0.011,14,0.79,15,0.567,18,0.1,19,0.007,20,0.007,31,1.275,48,0.971,49,1.239,55,0.187,65,0.93,140,2.235,141,2.53,156,1.478,234,2.751,237,2.662,241,2.909,242,2.628,243,2.538,244,1.275,247,1.313,248,2.303,249,1.171,250,1.583,251,2.303,252,1.758,253,2.711,254,3.081,255,2.711,256,2.357,326,1.488,488,4.508,496,1.715,498,2.807,500,2.909,595,2.833,600,1.96,622,3.531,628,2.75,656,3.712,1177,2.589,1179,2.589,1233,4.095,1293,2.943,1295,4.095,1298,2.943,1326,6.454,1328,3.508,1330,3.508,1332,3.999,1333,3.999,1334,3.999,1335,3.999,1336,3.999,1337,3.999,1338,3.999]],["title/classes/SearchUserDTO.html",[0,0.269,686,2.357]],["body/classes/SearchUserDTO.html",[0,0.414,2,0.36,3,0.06,4,0.06,5,0.047,8,0.239,9,0.536,12,0.752,13,0.011,14,0.811,15,0.494,18,0.156,19,0.005,20,0.005,25,0.529,31,1.111,34,0.745,39,1.338,48,0.723,49,1.149,52,1.338,55,0.159,65,0.559,96,2.145,98,2.177,117,1.997,119,2.834,121,2.992,140,1.719,156,1.607,234,2.851,237,2.873,240,3.264,242,2.848,243,2.842,244,0.767,247,0.79,248,0.866,249,1.304,250,0.953,251,0.866,252,1.878,253,1.019,254,1.613,255,1.019,256,1.019,326,1.251,329,2.119,331,0.814,342,3.12,343,2.027,344,1.28,345,1.28,346,1.228,347,1.228,348,1.228,349,1.228,350,2.483,351,1.403,352,1.28,353,2.027,354,1.28,410,2.483,445,0.839,496,1.571,546,2.074,600,1.179,604,1.28,605,1.28,606,2.992,607,4.055,608,3.298,631,1.28,632,1.475,633,1.338,634,1.338,635,3.418,656,3.56,657,2.111,669,2.467,671,2.467,675,1.28,676,2.467,677,1.558,678,1.403,679,2.467,680,1.558,681,1.558,682,1.558,683,2.467,684,1.28,685,1.558,686,2.119,687,1.28,688,1.019,689,1.475,1339,6.534,1340,2.406,1341,2.406,1342,2.406,1343,2.406,1344,2.406,1345,2.406,1346,2.406,1347,2.406,1348,2.406]],["title/classes/SearchUserPaginationDTO.html",[0,0.269,687,2.255]],["body/classes/SearchUserPaginationDTO.html",[0,0.389,2,0.308,3,0.052,4,0.052,5,0.04,8,0.204,9,0.472,12,0.759,13,0.011,14,0.812,15,0.553,18,0.146,19,0.004,20,0.004,25,0.452,31,1.243,34,0.636,39,1.143,48,0.788,49,1.217,52,1.143,55,0.143,65,0.478,96,2.099,98,1.579,117,2.275,119,2.64,121,2.171,140,1.959,156,1.607,234,2.851,237,2.844,240,3.149,242,2.814,243,2.807,244,0.655,247,0.675,248,1.531,249,1.273,250,0.814,251,1.531,252,1.867,253,1.802,254,1.802,255,1.802,256,1.421,326,1.142,329,2.732,331,1.44,342,2.88,343,2.613,344,1.094,345,1.094,346,1.049,347,1.049,348,1.049,349,1.049,350,2.292,351,1.198,352,1.094,353,2.613,354,1.094,410,2.595,445,1.484,496,1.45,546,1.866,595,2.508,600,1.645,604,1.094,605,1.094,606,2.732,607,3.873,608,3.011,622,3.553,631,1.094,632,1.26,633,1.143,634,1.143,635,3.155,656,3.689,669,2.755,671,2.755,675,1.094,676,2.173,677,1.331,678,1.198,679,2.173,680,1.331,681,1.331,682,1.331,683,2.173,684,1.094,685,1.331,686,1.143,687,1.786,688,1.802,689,2.608,1177,1.331,1179,1.331,1349,3.357,1350,2.055,1351,2.055,1352,2.055,1353,2.055,1354,2.055,1355,2.055,1356,2.055,1357,2.055,1358,2.055,1359,2.055,1360,2.055,1361,2.055,1362,2.055,1363,2.055,1364,2.055,1365,2.055,1366,2.055,1367,2.055,1368,2.055,1369,2.055,1370,2.055,1371,2.055,1372,2.055]],["title/classes/SendNotificationsToUserDTO.html",[0,0.269,1373,3.374]],["body/classes/SendNotificationsToUserDTO.html",[0,0.407,2,0.961,3,0.161,4,0.161,5,0.126,8,0.638,9,1.061,11,3.514,12,0.666,13,0.011,14,0.76,15,0.535,18,0.161,19,0.009,20,0.009,1373,6.008,1374,5.632,1375,8.014,1376,6.42,1377,6.42]],["title/classes/SqlReader.html",[0,0.269,1378,3.374]],["body/classes/SqlReader.html",[0,0.35,2,0.828,3,0.138,4,0.138,5,0.108,8,0.549,12,0.608,13,0.011,14,0.789,15,0.532,18,0.138,19,0.009,20,0.009,26,2.404,37,2.404,47,2.071,48,0.849,49,1,55,0.185,80,1.955,83,2.332,92,2.052,1378,5.487,1379,4.847,1380,7.235,1381,6.891,1382,6.891,1383,5.526,1384,6.891,1385,5.526,1386,7.509,1387,6.891,1388,5.526,1389,5.526,1390,6.891,1391,5.526,1392,5.526,1393,5.526,1394,5.526,1395,5.526,1396,4.4,1397,5.526,1398,5.526,1399,5.526,1400,5.526,1401,5.526,1402,5.526]],["title/injectables/TypeOrmConfigService.html",[124,1.311,221,3.118]],["body/injectables/TypeOrmConfigService.html",[0,0.358,3,0.142,4,0.142,5,0.111,8,0.561,9,0.982,12,0.617,13,0.011,15,0.495,18,0.142,19,0.009,20,0.009,26,2.437,31,0.9,37,1.971,55,0.254,59,2.392,61,0.985,77,3.003,78,3.003,83,1.912,96,1.855,98,2.097,124,2.162,126,2.665,132,4.91,134,3.104,137,4.421,138,4.803,145,2.665,156,1.206,220,2.665,221,5.141,252,1.241,550,3.006,803,3.885,1403,4.956,1404,7.923,1405,5.65,1406,7.584,1407,5.65,1408,6.986,1409,4.956,1410,4.956,1411,5.65,1412,4.956,1413,5.65,1414,4.956,1415,5.65,1416,5.65,1417,5.65,1418,5.65,1419,4.956,1420,4.956]],["title/classes/UpdateCategoryDto.html",[0,0.269,383,2.914]],["body/classes/UpdateCategoryDto.html",[0,0.413,2,0.975,3,0.163,4,0.163,5,0.127,13,0.011,18,0.163,19,0.01,20,0.01,25,1.671,55,0.255,65,1.514,367,2.665,377,4.215,383,5.231,414,5.184,594,4.476,675,3.464,1421,5.711,1422,7.608]],["title/classes/UpdateNotificationDto.html",[0,0.269,930,2.914]],["body/classes/UpdateNotificationDto.html",[0,0.413,2,0.975,3,0.163,4,0.163,5,0.127,13,0.011,18,0.163,19,0.01,20,0.01,25,1.671,55,0.255,65,1.514,367,2.665,609,4.215,611,4.476,675,3.464,930,5.231,934,5.184,1423,5.711,1424,7.608]],["title/classes/UpdateOrganizationDto.html",[0,0.269,1129,2.914]],["body/classes/UpdateOrganizationDto.html",[0,0.412,2,0.973,3,0.163,4,0.163,5,0.127,13,0.011,18,0.163,19,0.01,20,0.01,25,1.669,55,0.255,65,1.51,367,2.658,619,4.205,621,4.466,675,3.456,1129,5.224,1133,5.172,1425,5.697,1426,7.597]],["title/classes/UpdatePaymentMethodDto.html",[0,0.269,1202,2.914]],["body/classes/UpdatePaymentMethodDto.html",[0,0.413,2,0.975,3,0.163,4,0.163,5,0.127,13,0.011,18,0.163,19,0.01,20,0.01,25,1.671,55,0.255,65,1.514,367,2.665,626,4.215,628,4.476,675,3.464,1202,5.231,1206,5.184,1427,5.711,1428,7.608]],["title/classes/UpdateUserDTO.html",[0,0.269,684,2.255]],["body/classes/UpdateUserDTO.html",[0,0.432,2,0.402,3,0.067,4,0.067,5,0.053,12,0.746,13,0.011,14,0.813,18,0.164,19,0.005,20,0.005,25,0.912,34,0.831,39,1.493,48,0.761,52,1.493,55,0.17,65,0.624,96,2.028,98,1.884,117,2.12,119,2.596,121,2.59,140,1.8,156,1.648,234,2.869,237,2.89,240,3.338,242,2.869,243,2.864,244,0.856,247,0.882,248,0.966,249,1.289,250,1.063,251,0.966,252,1.896,253,1.137,254,1.758,255,1.137,256,1.137,326,0.965,329,2.309,331,0.909,342,2.701,343,2.209,344,1.429,345,1.429,346,1.37,347,1.37,348,1.37,349,1.37,350,2.149,351,1.565,352,1.429,353,2.209,354,1.429,410,2.615,445,0.937,496,1.36,546,2.226,604,1.429,605,1.429,606,3.177,607,4.175,608,3.501,631,1.429,632,1.646,633,1.493,634,1.493,635,2.959,669,2.688,671,2.688,675,1.429,676,2.688,677,1.738,678,1.565,679,2.688,680,1.738,681,1.738,682,1.738,683,2.688,684,2.209,685,2.688,686,1.493,687,1.429,688,1.137,689,1.646]],["title/entities/User.html",[93,1.351,549,1.858]],["body/entities/User.html",[0,0.129,3,0.051,4,0.051,5,0.04,8,0.202,9,0.468,12,0.762,13,0.011,14,0.77,15,0.592,18,0.051,19,0.004,20,0.004,31,1.331,34,1.307,48,0.873,49,0.924,55,0.181,93,2.629,96,1.602,98,1.567,117,1.567,119,1.919,121,2.154,140,1.345,156,1.776,249,0.825,250,1.317,252,1.489,326,1.532,329,1.85,342,2.247,343,2.247,344,2.247,345,2.247,346,2.154,347,2.154,348,2.154,349,2.154,350,2.789,352,2.247,353,2.247,354,2.247,357,3.505,416,1.619,482,0.891,494,2.07,495,2.154,496,1.131,498,2.36,500,2.772,501,2.348,506,2.07,522,1.932,546,3.359,549,1.459,550,1.082,552,1.185,554,1.398,555,3.542,557,3.355,558,2.287,559,5.228,560,4.376,561,4.129,562,4.376,564,4.773,566,2.287,568,4.985,569,4.985,570,2.918,572,2.154,574,5.005,576,2.844,578,5.386,580,1.398,582,2.287,584,3.107,587,2.287,588,1.316,589,2.287,590,3.7,591,3.59,592,3.59,633,2.348,634,2.348,688,2.939,830,3.107,832,3.107,833,1.783,863,2.918,865,2.918,866,2.918,867,2.918,888,3.555,1105,3.362,1429,1.783,1430,4.222,1431,4.222,1432,4.222,1433,2.033,1434,3.327,1435,2.033,1436,2.033,1437,2.033,1438,2.033,1439,2.033,1440,2.033,1441,2.033,1442,4.879,1443,2.033,1444,2.033,1445,4.879,1446,5.778,1447,2.033,1448,2.033,1449,2.033,1450,3.327,1451,2.033,1452,2.033,1453,2.033,1454,2.033,1455,2.033,1456,2.033,1457,2.033,1458,2.033,1459,2.033,1460,2.033,1461,2.033,1462,2.033,1463,3.327,1464,2.033,1465,2.033,1466,2.033,1467,2.033,1468,2.033,1469,2.033,1470,2.033,1471,2.033,1472,2.033,1473,2.033,1474,3.327,1475,2.033,1476,2.033,1477,2.033,1478,2.918,1479,2.033,1480,3.327,1481,2.033,1482,2.033,1483,2.033,1484,3.327,1485,2.033,1486,5.382,1487,4.879,1488,2.033,1489,2.033,1490,2.033,1491,2.033,1492,2.033,1493,2.033,1494,2.033,1495,4.879,1496,2.033,1497,2.033,1498,2.033]],["title/classes/UserAlreadyExistsException.html",[0,0.269,714,2.598]],["body/classes/UserAlreadyExistsException.html",[0,0.507,2,0.867,3,0.145,4,0.145,5,0.113,13,0.011,14,0.532,15,0.41,18,0.2,19,0.009,20,0.009,25,1.801,42,2.071,55,0.194,57,3.002,58,2.02,61,1.009,80,2.135,89,2.718,96,1.902,98,2.15,109,1.96,249,0.98,311,3.55,335,2.632,437,2.293,690,2.293,692,2.732,696,2.732,697,2.732,699,2.732,712,3.982,714,4.348,715,5.219,716,3.55,717,4.261,718,4.261,719,4.261,720,4.261,721,4.261,1499,5.791]],["title/classes/UserNoExistsException.html",[0,0.269,716,2.598]],["body/classes/UserNoExistsException.html",[0,0.507,2,0.867,3,0.145,4,0.145,5,0.113,13,0.011,14,0.532,15,0.41,18,0.2,19,0.009,20,0.009,25,1.801,42,2.071,55,0.194,57,3.002,58,2.02,61,1.009,80,2.135,89,2.718,96,1.902,98,2.15,109,1.96,249,0.98,311,3.55,335,2.632,437,2.293,690,2.293,692,2.732,696,2.732,697,2.732,699,2.732,712,3.982,714,3.55,715,5.219,716,4.348,717,4.261,718,4.261,719,4.261,720,4.261,721,4.261,1500,5.791]],["title/classes/UsernamePasswordNoExistsException.html",[0,0.269,311,2.598]],["body/classes/UsernamePasswordNoExistsException.html",[0,0.507,2,0.867,3,0.145,4,0.145,5,0.113,13,0.011,14,0.532,15,0.41,18,0.2,19,0.009,20,0.009,25,1.801,42,2.071,55,0.194,57,3.002,58,2.02,61,1.009,80,2.135,89,2.718,96,1.902,98,2.15,109,1.96,249,0.98,311,4.348,335,2.632,437,2.293,690,2.293,692,2.732,696,2.732,697,2.732,699,2.732,712,3.982,714,3.55,715,5.219,716,3.55,717,4.261,718,4.261,719,4.261,720,4.261,721,4.261,1501,5.791]],["title/controllers/UsersController.html",[21,1.999,1502,3.118]],["body/controllers/UsersController.html",[0,0.101,3,0.04,4,0.04,5,0.031,8,0.158,11,3.209,12,0.724,13,0.011,14,0.602,15,0.439,18,0.04,19,0.003,20,0.003,21,0.75,23,0.75,25,0.595,26,0.945,28,3.344,31,0.988,37,2.164,41,3.158,42,2.456,43,3.528,44,3.047,45,2.671,47,1.864,48,0.964,49,0.9,50,3.13,55,0.208,56,1.03,57,2.299,58,0.555,59,0.674,60,2.292,61,0.277,62,4.137,63,4.437,64,1.03,65,0.37,69,1.267,70,1.267,77,0.63,78,0.63,80,0.414,82,4.015,83,2.099,86,3.716,87,3.716,88,3.802,89,1.798,91,2.719,92,2.023,93,2.466,94,2.626,102,3.04,103,2.925,104,2.719,105,2.767,106,4.015,107,2.626,108,2.099,109,2.099,111,3.802,112,4.015,134,1.109,148,3.917,149,1.17,155,1.03,181,1.383,247,0.522,250,2.021,259,2.571,288,1.267,294,3.222,305,1.58,306,1.267,310,1.094,315,2.819,316,3.458,324,2.377,326,1.719,331,0.917,346,2.605,347,2.605,348,2.605,349,2.605,367,1.92,368,3.037,369,1.863,370,2.299,371,1.094,376,4.977,378,1.094,382,1.395,385,2.875,387,1.094,389,2.875,390,1.863,393,1.094,394,2.377,398,1.094,400,1.094,401,2.707,403,3.668,405,1.267,407,0.927,408,1.58,410,0.674,424,1.094,427,1.094,428,1.094,430,3.511,431,3.225,433,3.106,434,3.106,435,1.863,436,1.863,437,1.073,445,0.555,446,2.875,447,1.094,448,1.395,451,1.395,522,2.751,552,1.58,631,2.9,635,0.927,678,0.927,684,2.225,687,3.3,768,1.395,830,3.757,832,3.757,918,1.17,919,4.265,920,4.564,924,1.17,927,1.17,941,1.395,942,1.395,1502,1.994,1503,1.395,1504,2.71,1505,2.71,1506,2.71,1507,3.541,1508,2.71,1509,1.591,1510,1.591,1511,1.591,1512,1.591,1513,2.71,1514,1.591,1515,1.395,1516,3.541,1517,1.591,1518,1.591,1519,4.066,1520,1.591,1521,1.591,1522,1.591,1523,1.591,1524,1.591,1525,2.71,1526,1.591,1527,1.591,1528,1.591,1529,2.71,1530,1.591,1531,1.591,1532,1.591,1533,1.591,1534,1.591,1535,1.395,1536,1.591,1537,1.591,1538,1.591,1539,1.591,1540,1.591,1541,4.182,1542,4.182,1543,1.591,1544,1.395,1545,1.591,1546,1.591,1547,1.591,1548,3.541,1549,6.202,1550,1.591,1551,1.591,1552,2.71,1553,1.591,1554,1.591,1555,1.591,1556,1.591,1557,1.591,1558,1.591,1559,1.591,1560,7.239,1561,2.71,1562,1.591,1563,1.591,1564,1.591,1565,1.591,1566,2.377,1567,1.591]],["title/modules/UsersModule.html",[174,1.624,191,2.743]],["body/modules/UsersModule.html",[0,0.349,3,0.138,4,0.138,5,0.108,13,0.011,18,0.138,19,0.009,20,0.009,23,3.242,55,0.286,61,0.959,93,1.755,145,2.596,174,2.873,176,2.698,177,2.698,178,2.929,179,2.929,180,2.698,181,3.824,182,3.988,191,5.412,192,3.657,193,2.929,194,2.929,196,3.209,219,3.564,220,2.596,223,4.45,305,5.054,310,3.785,350,2.91,357,3.657,460,3.785,688,2.91,1502,5.515,1544,4.828,1568,4.828,1569,4.828,1570,4.828,1571,5.504,1572,4.828,1573,4.828,1574,5.504,1575,4.828]],["title/injectables/UsersService.html",[124,1.311,305,2.47]],["body/injectables/UsersService.html",[0,0.093,3,0.037,4,0.037,5,0.029,8,0.145,9,0.355,11,1.107,12,0.668,13,0.011,14,0.531,15,0.451,18,0.037,19,0.005,20,0.003,25,0.555,26,0.881,28,2.999,31,0.63,34,1.51,37,1.702,45,3.588,47,1.467,48,0.862,49,0.708,50,2.695,55,0.223,61,0.255,69,1.166,70,1.166,77,2.683,78,2.52,80,0.867,83,2.154,91,1.957,92,2.516,93,2.196,94,3.179,96,1.814,98,1.657,104,1.957,105,1.51,107,2.818,108,2.294,117,1.812,119,2.376,121,2.019,124,0.781,126,0.691,133,1.512,134,1.033,156,1.831,161,1.166,169,3.799,206,2.201,209,0.948,210,0.948,211,1.284,220,0.691,247,1.814,248,0.908,249,0.427,251,0.908,252,0.731,257,0.691,258,2.019,294,3.139,296,3.741,305,1.471,308,2.01,310,1.007,312,1.284,316,1.237,318,1.166,320,2.214,326,1.758,331,0.854,337,2.214,341,1.166,342,2.375,343,2.105,344,1.771,345,1.771,346,2.277,347,2.277,348,2.277,349,2.277,350,3.069,351,2.602,352,1.771,353,2.105,354,1.771,357,2.94,366,3.595,367,1.362,368,2.154,370,1.631,376,4.377,410,0.62,445,0.511,462,2.919,463,2.919,464,1.736,466,1.736,469,2.214,471,1.736,474,3.974,475,2.214,477,2.214,478,1.007,481,3.069,482,0.642,493,2.288,494,1.94,495,2.019,496,1.196,498,1.957,499,2.288,500,1.512,501,1.851,502,1.007,503,1.077,504,1.736,506,1.94,508,2.448,509,1.077,510,1.077,511,1.077,512,1.736,513,1.007,514,1.736,515,1.007,517,1.077,519,1.007,521,2.288,522,1.767,526,1.857,527,1.857,529,2.288,530,1.007,532,1.736,539,1.284,542,3.471,544,1.284,546,0.642,585,2.919,631,1.343,633,1.851,634,1.851,635,0.853,678,0.853,684,1.343,686,1.404,687,1.343,688,2.695,689,2.992,714,1.547,716,2.426,830,3.284,832,3.284,919,1.007,1017,2.214,1085,2.448,1086,1.077,1087,1.857,1193,3.471,1225,2.919,1231,2.214,1267,1.284,1276,1.166,1396,3.151,1478,2.214,1515,1.284,1519,3.151,1535,1.284,1566,1.284,1572,1.284,1573,1.284,1575,1.284,1576,1.284,1577,3.327,1578,2.524,1579,2.524,1580,2.524,1581,1.464,1582,1.464,1583,1.464,1584,1.464,1585,1.464,1586,1.464,1587,1.464,1588,1.464,1589,2.524,1590,1.464,1591,1.166,1592,1.464,1593,1.464,1594,2.524,1595,1.464,1596,1.464,1597,1.464,1598,2.524,1599,1.464,1600,2.524,1601,2.524,1602,3.957,1603,2.524,1604,4.463,1605,3.327,1606,4.463,1607,3.327,1608,1.464,1609,2.524,1610,2.524,1611,3.957,1612,3.957,1613,3.957,1614,1.464,1615,3.327,1616,3.327,1617,3.957,1618,3.327,1619,3.327,1620,3.957,1621,1.464,1622,1.464,1623,1.464,1624,1.464,1625,1.464,1626,1.464,1627,1.464,1628,1.464,1629,1.464,1630,1.464,1631,1.464,1632,1.464,1633,1.464,1634,1.464,1635,1.464,1636,1.464,1637,1.464,1638,2.524,1639,2.524,1640,3.327,1641,2.524,1642,2.524,1643,3.957,1644,2.524,1645,4.88,1646,1.464,1647,2.524,1648,2.524,1649,2.524,1650,2.524,1651,2.524,1652,2.524,1653,2.524,1654,2.524,1655,2.524,1656,2.524,1657,2.524,1658,2.524,1659,3.327,1660,2.524,1661,2.524,1662,2.524,1663,2.524,1664,2.524,1665,3.327,1666,2.524,1667,3.327,1668,2.524,1669,1.464,1670,1.464,1671,1.464,1672,1.464,1673,1.464,1674,1.464,1675,1.464,1676,2.524,1677,1.464,1678,1.464,1679,1.464,1680,2.524,1681,2.524,1682,2.524,1683,2.524,1684,2.524,1685,2.524,1686,2.524,1687,2.524,1688,2.524,1689,2.524,1690,2.524,1691,3.957,1692,2.524,1693,2.524,1694,2.524,1695,1.464,1696,2.524,1697,2.524,1698,2.524,1699,1.464,1700,1.464,1701,1.464,1702,2.524,1703,1.464,1704,2.524,1705,1.464,1706,1.464,1707,2.524,1708,1.464,1709,1.464,1710,1.464,1711,1.464,1712,1.464]],["title/modules/UtilsModule.html",[174,1.624,1713,3.118]],["body/modules/UtilsModule.html",[0,0.384,3,0.152,4,0.152,5,0.118,13,0.011,18,0.152,19,0.009,20,0.009,55,0.244,61,1.056,174,2.996,176,2.969,177,2.969,178,3.223,179,3.223,180,2.969,181,3.989,182,4.16,192,3.878,193,3.223,194,3.223,1713,6.275,1714,5.312,1715,5.312,1716,5.312,1717,6.034,1718,6.056,1719,6.056]],["title/injectables/UtilsService.html",[124,1.311,1717,2.914]],["body/injectables/UtilsService.html",[0,0.27,3,0.107,4,0.107,5,0.083,8,0.423,9,0.817,12,0.627,13,0.011,14,0.777,15,0.544,18,0.107,19,0.007,20,0.007,26,2.027,31,0.678,37,2.595,47,1.988,48,0.815,49,0.96,55,0.222,59,1.802,61,0.742,77,2.619,78,2.619,83,2.517,91,1.866,92,2.762,104,1.866,105,1.966,107,1.802,108,1.966,111,2.609,124,1.798,126,2.008,132,4.283,137,3.856,138,3.995,140,1.174,141,1.935,145,2.008,156,1.412,247,2.334,522,2.945,546,3.262,711,3.734,1276,4.626,1396,4.626,1717,3.995,1720,3.734,1721,7.107,1722,5.81,1723,7.107,1724,5.81,1725,5.81,1726,4.256,1727,5.81,1728,4.256,1729,5.81,1730,4.256,1731,5.81,1732,7.107,1733,4.256,1734,5.81,1735,4.256,1736,4.256,1737,4.256,1738,5.096,1739,6.615,1740,4.256,1741,5.81,1742,5.81,1743,5.81,1744,4.256,1745,4.256,1746,5.81,1747,4.256,1748,5.81,1749,4.256,1750,4.256,1751,4.256,1752,4.256,1753,4.256,1754,4.256,1755,4.256,1756,4.256,1757,4.256,1758,4.256,1759,4.256,1760,4.256,1761,4.256,1762,6.615,1763,4.256,1764,5.81,1765,4.256,1766,4.256]],["title/coverage.html",[1767,5.081]],["body/coverage.html",[0,0.556,1,2.078,5,0.055,6,2.477,7,2.477,12,0.249,13,0.011,19,0.005,20,0.005,21,3.143,22,2.078,24,2.477,39,1.571,41,1.284,44,1.238,52,1.571,66,2.078,67,2.249,71,1.731,73,1.829,93,1.376,108,0.956,124,2.386,125,1.942,127,2.477,128,2.477,133,1.284,134,1.156,137,1.646,180,1.384,205,2.477,206,1.571,221,2.078,230,1.646,231,4.084,246,1.646,247,2.932,257,1.332,259,1.332,263,1.942,273,1.942,286,2.477,305,1.646,311,1.731,313,1.942,350,1.196,357,1.503,364,2.078,365,2.477,367,1.767,377,1.829,383,1.942,407,1.646,408,1.646,417,1.829,461,2.477,479,2.249,485,2.078,487,2.078,488,3.262,549,3.039,551,2.477,593,2.477,594,4.033,609,1.829,610,2.477,611,4.033,619,1.829,620,2.477,621,4.033,626,1.829,627,2.477,628,4.033,631,1.503,632,4.084,684,1.503,686,1.571,687,1.503,688,1.196,690,2.322,691,3.855,694,1.942,698,1.829,700,3.855,702,1.942,704,1.829,706,3.855,708,1.942,710,1.829,712,4.033,714,1.731,716,1.731,722,3.437,729,1.829,732,2.078,742,2.477,744,2.477,746,2.078,748,2.477,749,2.477,750,2.477,767,2.249,781,2.477,800,2.249,801,2.477,802,2.477,814,2.249,838,1.571,841,1.942,882,2.249,883,2.477,884,2.477,888,1.646,899,2.477,916,2.078,917,2.477,930,1.942,932,1.829,953,1.829,954,2.477,1067,2.477,1079,2.078,1080,2.078,1100,2.477,1109,2.477,1123,2.078,1124,2.477,1129,1.942,1131,1.829,1151,2.477,1159,2.078,1160,2.078,1183,2.477,1196,2.078,1197,2.477,1202,1.942,1204,1.829,1224,2.477,1232,2.078,1233,2.078,1259,2.477,1270,2.249,1272,2.477,1277,2.249,1285,3.437,1300,3.437,1313,3.437,1326,3.437,1373,2.249,1374,2.477,1378,2.249,1379,2.477,1403,2.477,1421,2.477,1423,2.477,1425,2.477,1427,2.477,1429,3.786,1502,2.078,1503,2.477,1576,2.477,1591,2.249,1717,1.942,1720,2.477,1767,2.477,1768,2.824,1769,2.824,1770,2.824,1771,3.786,1772,7.711,1773,2.477,1774,8.397,1775,7.711,1776,6.663,1777,7.888,1778,7.602,1779,5.145,1780,2.477,1781,2.477,1782,5.239,1783,6.319,1784,6.663,1785,4.316,1786,3.437,1787,2.824,1788,2.824,1789,4.316,1790,3.786,1791,3.786,1792,2.824,1793,2.824,1794,2.824,1795,2.824,1796,2.824]],["title/dependencies.html",[177,2.499,1797,3.1]],["body/dependencies.html",[0,0.437,13,0.011,19,0.009,20,0.009,61,0.963,65,1.285,145,2.607,147,3.8,149,4.066,151,6.259,152,4.847,177,2.709,220,2.607,244,1.762,267,4.066,269,4.4,308,4.4,405,4.4,482,2.423,782,4.847,992,4.847,1380,4.847,1738,4.847,1798,7.509,1799,5.526,1800,5.526,1801,5.526,1802,5.526,1803,5.526,1804,5.526,1805,7.509,1806,5.526,1807,6.891,1808,5.526,1809,5.526,1810,5.526,1811,5.526,1812,5.526,1813,5.526,1814,5.526,1815,5.526,1816,5.526,1817,5.526,1818,5.526,1819,5.526,1820,5.526,1821,5.526,1822,5.526,1823,5.526,1824,5.526,1825,5.526,1826,5.526,1827,5.526,1828,5.526,1829,5.526,1830,5.526,1831,5.526,1832,5.526,1833,5.526,1834,5.526,1835,5.526,1836,5.526,1837,5.526,1838,5.526,1839,5.526,1840,5.526]],["title/miscellaneous/enumerations.html",[1841,2.288,1842,4.472]],["body/miscellaneous/enumerations.html",[8,0.652,13,0.011,19,0.01,20,0.01,141,3.784,153,5.221,341,5.221,410,3.235,973,5.751,1841,4.245,1842,5.751,1843,6.556,1844,6.556,1845,6.556,1846,6.556,1847,6.556,1848,6.556,1849,6.556]],["title/miscellaneous/functions.html",[1841,2.288,1850,4.472]],["body/miscellaneous/functions.html",[8,0.675,13,0.01,19,0.01,20,0.01,180,4.021,1786,5.412,1841,4.401,1850,5.962,1851,5.962]],["title/classes/googleOAuthDTO.html",[0,0.269,39,2.357]],["body/classes/googleOAuthDTO.html",[0,0.425,2,0.385,3,0.064,4,0.064,5,0.05,8,0.256,9,0.565,12,0.75,13,0.011,14,0.813,15,0.396,18,0.161,19,0.005,20,0.005,25,0.565,31,0.889,34,0.796,39,2.234,48,0.826,52,1.431,55,0.166,65,0.598,96,1.988,98,1.834,117,2.382,119,2.916,121,3.089,140,1.769,156,1.633,234,2.861,237,2.884,240,3.31,242,2.861,243,2.856,244,0.82,247,0.845,248,0.926,249,1.276,250,1.019,251,0.926,252,1.889,253,1.09,254,1.701,255,1.09,256,1.09,326,0.934,329,2.234,331,0.871,342,2.629,343,2.137,344,1.369,345,1.369,346,1.313,347,1.313,348,1.313,349,1.313,350,2.092,351,1.5,352,1.369,353,2.137,354,1.369,410,2.564,445,0.898,496,1.324,546,2.166,595,2.285,604,1.369,605,1.369,606,3.105,607,4.129,608,3.422,631,1.369,632,1.577,633,1.431,634,1.431,635,2.88,669,2.601,671,2.601,675,1.369,676,2.601,677,1.666,678,1.5,679,2.601,680,1.666,681,1.666,682,1.666,683,2.601,684,1.369,685,1.666,686,1.431,687,1.369,688,1.09,689,1.577,1248,4.108,1852,2.573,1853,2.573,1854,2.573,1855,2.573]],["title/index.html",[8,0.351,1856,3.534,1857,3.534]],["body/index.html",[13,0.01,19,0.01,20,0.01,1858,6.915]],["title/modules.html",[176,2.839]],["body/modules.html",[13,0.009,19,0.009,20,0.009,175,4.276,176,3.048,186,3.812,187,4.276,188,4.276,189,4.276,190,4.276,191,4.026,215,4.576,1713,4.576,1859,8.694,1860,8.694,1861,8.694,1862,8.694]],["title/overview.html",[1863,5.081]],["body/overview.html",[2,0.678,13,0.011,19,0.008,20,0.008,23,2.135,71,4.895,73,4.419,125,4.693,126,2.135,174,1.735,175,5.935,176,2.219,177,2.219,178,2.409,179,2.409,180,2.219,181,2.31,182,2.409,183,3.971,184,3.971,185,3.971,186,5.169,187,5.376,188,5.65,189,5.376,190,5.376,191,5.062,192,3.223,193,2.409,194,2.409,215,5.753,216,3.971,260,3.971,261,3.971,262,3.971,263,4.693,305,4.654,417,5.169,454,3.971,455,3.971,456,3.971,522,2.398,550,2.409,746,3.331,932,5.169,953,4.719,1059,3.971,1060,3.971,1062,3.971,1131,5.169,1145,3.971,1146,3.971,1147,3.971,1204,5.169,1218,3.971,1219,3.971,1220,3.971,1270,3.605,1568,3.971,1569,3.971,1570,3.971,1713,5.591,1714,3.971,1715,3.971,1716,3.971,1717,5.49,1863,3.971,1864,4.527,1865,4.527,1866,4.527,1867,4.527,1868,4.527]],["title/properties.html",[9,0.717,1797,3.1]],["body/properties.html",[9,0.949,10,5.919,13,0.011,19,0.01,20,0.01,34,2.088,35,5.373,1869,6.748,1870,6.748,1871,6.748]],["title/miscellaneous/variables.html",[1841,2.288,1872,4.472]],["body/miscellaneous/variables.html",[5,0.133,8,0.446,12,0.6,13,0.011,14,0.625,19,0.008,20,0.008,83,2.039,92,2.697,96,1.474,98,1.667,108,2.3,133,2.738,134,2.466,137,3.963,140,2.322,141,3.827,156,1.452,169,2.617,376,4.995,407,3.512,410,2.551,479,4.797,522,1.778,524,3.939,550,2.389,722,3.575,727,3.939,729,5.05,736,3.939,737,3.939,738,3.939,762,3.939,767,4.797,769,3.939,1031,5.284,1277,4.797,1409,3.939,1410,3.939,1412,3.939,1414,3.939,1419,3.939,1420,3.939,1519,4.797,1591,4.797,1771,3.939,1773,5.284,1779,3.939,1780,5.284,1781,5.284,1786,3.575,1790,3.939,1791,3.939,1841,2.907,1851,3.939,1872,3.939,1873,6.024,1874,4.49,1875,7.265,1876,6.024,1877,6.024,1878,4.49,1879,4.49,1880,4.49,1881,4.49,1882,4.49,1883,4.49,1884,4.49,1885,6.024,1886,4.49,1887,4.49,1888,4.49,1889,4.49,1890,4.49,1891,4.49,1892,4.49,1893,6.024,1894,4.49,1895,4.49,1896,4.49,1897,4.49,1898,4.49,1899,4.49,1900,4.49,1901,4.49,1902,4.49,1903,4.49,1904,6.024,1905,4.49,1906,4.49,1907,4.49,1908,4.49,1909,4.49,1910,4.49,1911,4.49,1912,4.49,1913,4.49,1914,4.49,1915,4.49,1916,4.49]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"classes/AddMessageDto.html":{},"controllers/ApiController.html":{},"injectables/ApiKeyStrategy.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"modules/AppModule.html":{},"classes/ArrayGuidDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/DefaultController.html":{},"classes/DefaultService.html":{},"classes/DefaultWithoutSecurityController.html":{},"interfaces/JWTPayloadInterface.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"entities/Notification.html":{},"classes/NotificationAlreadyExistsException.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"modules/NotificationModule.html":{},"classes/NotificationNoExistsException.html":{},"injectables/NotificationService.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"classes/OrganizationAlreadyExistsException.html":{},"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"classes/OrganizationNoExistsException.html":{},"injectables/OrganizationService.html":{},"classes/PaginationDTO.html":{},"entities/PaymentMethod.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"controllers/PaymentMethodController.html":{},"modules/PaymentMethodModule.html":{},"classes/PaymentMethodNoExistsException.html":{},"injectables/PaymentMethodService.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/SendNotificationsToUserDTO.html":{},"classes/SqlReader.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdatePaymentMethodDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/UtilsModule.html":{},"injectables/UtilsService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"classes/googleOAuthDTO.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":247,"title":{},"body":{"classes/ArrayGuidDTO.html":{},"injectables/CategoriesService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"controllers/NotificationController.html":{},"injectables/OrganizationService.html":{},"classes/PaginationDTO.html":{},"injectables/PaymentMethodService.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{},"coverage.html":{},"classes/googleOAuthDTO.html":{}}}],["0.0.1",{"_index":1869,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1832,"title":{},"body":{"dependencies.html":{}}}],["0.12.7",{"_index":1829,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":1815,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1838,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1814,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1824,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1774,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1784,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1785,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1795,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1777,"title":{},"body":{"coverage.html":{}}}],["0/21",{"_index":1793,"title":{},"body":{"coverage.html":{}}}],["0/26",{"_index":1792,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1775,"title":{},"body":{"coverage.html":{}}}],["0/38",{"_index":1794,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1776,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1778,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1783,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1782,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1789,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1788,"title":{},"body":{"coverage.html":{}}}],["0})@isnumber()@isoptional",{"_index":1293,"title":{},"body":{"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{}}}],["0})@isoptional",{"_index":1361,"title":{},"body":{"classes/SearchUserPaginationDTO.html":{}}}],["0})@isstring",{"_index":1175,"title":{},"body":{"classes/PaginationDTO.html":{}}}],["1",{"_index":522,"title":{"classes/CustomException-1.html":{}},"body":{"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"entities/Notification.html":{},"injectables/NotificationService.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"injectables/OrganizationService.html":{},"entities/PaymentMethod.html":{},"injectables/PaymentMethodService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1).tostring().padstart(2",{"_index":1750,"title":{},"body":{"injectables/UtilsService.html":{}}}],["1.0.0",{"_index":1827,"title":{},"body":{"dependencies.html":{}}}],["1.1.1",{"_index":214,"title":{},"body":{"injectables/ApiService.html":{}}}],["1.2.2",{"_index":1825,"title":{},"body":{"dependencies.html":{}}}],["1.4.11",{"_index":1811,"title":{},"body":{"dependencies.html":{}}}],["1.4.2",{"_index":1837,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":1820,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":250,"title":{},"body":{"classes/ArrayGuidDTO.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/PaginationDTO.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"classes/googleOAuthDTO.html":{}}}],["10.0.0",{"_index":1798,"title":{},"body":{"dependencies.html":{}}}],["10.0.1",{"_index":1809,"title":{},"body":{"dependencies.html":{}}}],["10.1.0",{"_index":1800,"title":{},"body":{"dependencies.html":{}}}],["10.3.8",{"_index":1805,"title":{},"body":{"dependencies.html":{}}}],["10})@isnumber",{"_index":1298,"title":{},"body":{"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{}}}],["10})@isoptional",{"_index":1365,"title":{},"body":{"classes/SearchUserPaginationDTO.html":{}}}],["10})@isstring",{"_index":1181,"title":{},"body":{"classes/PaginationDTO.html":{}}}],["12",{"_index":1867,"title":{},"body":{"overview.html":{}}}],["150",{"_index":1463,"title":{},"body":{"entities/User.html":{}}}],["1500",{"_index":904,"title":{},"body":{"entities/Notification.html":{},"entities/NotificationType.html":{}}}],["2",{"_index":705,"title":{"classes/CustomException-2.html":{}},"body":{}}],["2.0.5",{"_index":1803,"title":{},"body":{"dependencies.html":{}}}],["2.29.4",{"_index":1818,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":943,"title":{},"body":{"controllers/NotificationController.html":{}}}],["200",{"_index":1260,"title":{},"body":{"entities/Role.html":{}}}],["20000000",{"_index":442,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["250",{"_index":570,"title":{},"body":{"entities/Category.html":{},"entities/User.html":{}}}],["3",{"_index":711,"title":{"classes/CustomException-3.html":{}},"body":{"injectables/UtilsService.html":{}}}],["3.0.0",{"_index":1799,"title":{},"body":{"dependencies.html":{}}}],["3.9.7",{"_index":1823,"title":{},"body":{"dependencies.html":{}}}],["3250",{"_index":1442,"title":{},"body":{"entities/User.html":{}}}],["350",{"_index":1434,"title":{},"body":{"entities/User.html":{}}}],["38",{"_index":1263,"title":{},"body":{"entities/Role.html":{}}}],["4.0.1",{"_index":1807,"title":{},"body":{"dependencies.html":{}}}],["45",{"_index":1265,"title":{},"body":{"entities/Role.html":{}}}],["5.1.0",{"_index":1812,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":578,"title":{},"body":{"entities/Category.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"entities/User.html":{}}}],["51",{"_index":1868,"title":{},"body":{"overview.html":{}}}],["550",{"_index":1450,"title":{},"body":{"entities/User.html":{}}}],["6",{"_index":1865,"title":{},"body":{"overview.html":{}}}],["7",{"_index":1866,"title":{},"body":{"overview.html":{}}}],["7.0.0",{"_index":1817,"title":{},"body":{"dependencies.html":{}}}],["7.1.8",{"_index":1808,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1834,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1555,"title":{},"body":{"controllers/UsersController.html":{}}}],["9",{"_index":1864,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":1840,"title":{},"body":{"dependencies.html":{}}}],["_hashpassword",{"_index":1578,"title":{},"body":{"injectables/UsersService.html":{}}}],["_hashpassword(password",{"_index":1580,"title":{},"body":{"injectables/UsersService.html":{}}}],["action",{"_index":561,"title":{},"body":{"entities/Category.html":{},"injectables/JwtAuthGuard.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"entities/Notification.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"entities/User.html":{}}}],["action'})@joincolumn({foreignkeyconstraintname",{"_index":1445,"title":{},"body":{"entities/User.html":{}}}],["add",{"_index":852,"title":{},"body":{"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{}}}],["addmessagedto",{"_index":1,"title":{"classes/AddMessageDto.html":{}},"body":{"classes/AddMessageDto.html":{},"classes/NotificationGateway.html":{},"coverage.html":{}}}],["address",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["agent",{"_index":165,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"injectables/JwtAuthGuard.html":{}}}],["al",{"_index":1019,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["all(@query",{"_index":424,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["all(params",{"_index":466,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["all(query",{"_index":371,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["allowed",{"_index":778,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["allproviders",{"_index":1504,"title":{},"body":{"controllers/UsersController.html":{}}}],["allproviders(@query",{"_index":1551,"title":{},"body":{"controllers/UsersController.html":{}}}],["allproviders(query",{"_index":1511,"title":{},"body":{"controllers/UsersController.html":{}}}],["already",{"_index":696,"title":{},"body":{"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/NotificationAlreadyExistsException.html":{},"classes/NotificationNoExistsException.html":{},"classes/OrganizationAlreadyExistsException.html":{},"classes/OrganizationNoExistsException.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"classes/PaymentMethodNoExistsException.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{}}}],["and/or",{"_index":718,"title":{},"body":{"classes/CustomException-3.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{}}}],["api",{"_index":33,"title":{},"body":{"controllers/ApiController.html":{},"injectables/ApiKeyStrategy.html":{}}}],["api.dto",{"_index":731,"title":{},"body":{"classes/DefaultController.html":{}}}],["api.module",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["api.service",{"_index":74,"title":{},"body":{"controllers/ApiController.html":{}}}],["apibearerauth",{"_index":728,"title":{},"body":{"classes/DefaultController.html":{}}}],["apicontroller",{"_index":22,"title":{"controllers/ApiController.html":{}},"body":{"controllers/ApiController.html":{},"modules/ApiModule.html":{},"coverage.html":{}}}],["apicontroller.name",{"_index":110,"title":{},"body":{"controllers/ApiController.html":{}}}],["apikey",{"_index":157,"title":{},"body":{"injectables/ApiKeyStrategy.html":{}}}],["apikeystrategy",{"_index":125,"title":{"injectables/ApiKeyStrategy.html":{}},"body":{"injectables/ApiKeyStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["apimodule",{"_index":175,"title":{"modules/ApiModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apioperation",{"_index":62,"title":{},"body":{"controllers/ApiController.html":{},"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":237,"title":{},"body":{"classes/ArrayGuidDTO.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/PaginationDTO.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/googleOAuthDTO.html":{}}}],["apiproperty()@isstring",{"_index":614,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["apiproperty({isarray",{"_index":233,"title":{},"body":{"classes/ArrayGuidDTO.html":{}}}],["apiproperty({required",{"_index":595,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/PaginationDTO.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/googleOAuthDTO.html":{}}}],["apiproperty({type",{"_index":656,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{}}}],["apiresponse",{"_index":63,"title":{},"body":{"controllers/ApiController.html":{},"controllers/CategoriesController.html":{},"classes/DefaultController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["apiservice",{"_index":73,"title":{"injectables/ApiService.html":{}},"body":{"controllers/ApiController.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"coverage.html":{},"overview.html":{}}}],["apitags",{"_index":64,"title":{},"body":{"controllers/ApiController.html":{},"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["apitags('api",{"_index":75,"title":{},"body":{"controllers/ApiController.html":{}}}],["apitags('categories",{"_index":420,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["apitags('notification",{"_index":937,"title":{},"body":{"controllers/NotificationController.html":{}}}],["apitags('organization",{"_index":1136,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["apitags('paymentmethod",{"_index":1209,"title":{},"body":{"controllers/PaymentMethodController.html":{}}}],["apitags('users",{"_index":1546,"title":{},"body":{"controllers/UsersController.html":{}}}],["app/api.controller",{"_index":198,"title":{},"body":{"modules/ApiModule.html":{}}}],["app/api.dto",{"_index":406,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{}}}],["app/api.service",{"_index":199,"title":{},"body":{"modules/ApiModule.html":{}}}],["app/defaults/defatul.service",{"_index":483,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{}}}],["app/defaults/default.controller",{"_index":409,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{}}}],["app/utils/filepersistor",{"_index":1592,"title":{},"body":{"injectables/UsersService.html":{}}}],["app_guard",{"_index":266,"title":{},"body":{"modules/AuthModule.html":{}}}],["appdatasource",{"_index":1773,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["applydecorators",{"_index":727,"title":{},"body":{"classes/DefaultController.html":{},"miscellaneous/variables.html":{}}}],["appmodule",{"_index":215,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["archivo",{"_index":1898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array.from(this.connectedusers.keys()).find(key",{"_index":1054,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["array.isarray(fileorfiles",{"_index":1911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arrayguiddto",{"_index":230,"title":{"classes/ArrayGuidDTO.html":{}},"body":{"classes/ArrayGuidDTO.html":{},"classes/PaginationDTO.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"coverage.html":{}}}],["arrayminsize",{"_index":238,"title":{},"body":{"classes/ArrayGuidDTO.html":{},"classes/PaginationDTO.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{}}}],["arrayminsize(1",{"_index":245,"title":{},"body":{"classes/ArrayGuidDTO.html":{},"classes/PaginationDTO.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{}}}],["asc",{"_index":254,"title":{},"body":{"classes/ArrayGuidDTO.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/PaginationDTO.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/googleOAuthDTO.html":{}}}],["asc'})@isoptional()@isstring",{"_index":1179,"title":{},"body":{"classes/PaginationDTO.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserPaginationDTO.html":{}}}],["async",{"_index":28,"title":{},"body":{"controllers/ApiController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/JwtStrategy.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"injectables/NotificationService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":407,"title":{},"body":{"controllers/CategoriesController.html":{},"classes/DefaultController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth(roleenum.super",{"_index":430,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["auth.guard",{"_index":734,"title":{},"body":{"classes/DefaultController.html":{}}}],["auth.guard.ts",{"_index":750,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:16",{"_index":765,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:17",{"_index":763,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:19",{"_index":757,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:25",{"_index":760,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":272,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":225,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guard/jwt",{"_index":733,"title":{},"body":{"classes/DefaultController.html":{}}}],["auth/guard/roles.guard",{"_index":735,"title":{},"body":{"classes/DefaultController.html":{}}}],["authguard",{"_index":766,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":751,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":186,"title":{"modules/AuthModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/NotificationModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":10,"title":{},"body":{"classes/AddMessageDto.html":{},"properties.html":{}}}],["authservice",{"_index":71,"title":{"injectables/AuthService.html":{}},"body":{"controllers/ApiController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/NotificationGateway.html":{},"coverage.html":{},"overview.html":{}}}],["availability",{"_index":633,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["await",{"_index":94,"title":{},"body":{"controllers/ApiController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/JwtStrategy.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"injectables/NotificationService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backgroundcheck",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["backgroundcheckdate",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["backgroundcheckexpirationdate",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["basepath",{"_index":1721,"title":{},"body":{"injectables/UtilsService.html":{}}}],["bcrypt",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare(params.password",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt(8",{"_index":1595,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(password",{"_index":1596,"title":{},"body":{"injectables/UsersService.html":{}}}],["bienvenido",{"_index":1016,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["birthdate",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["body",{"_index":11,"title":{},"body":{"classes/AddMessageDto.html":{},"controllers/ApiController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SendNotificationsToUserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["body.email",{"_index":120,"title":{},"body":{"controllers/ApiController.html":{}}}],["body.googleid",{"_index":122,"title":{},"body":{"controllers/ApiController.html":{}}}],["body.lastname",{"_index":118,"title":{},"body":{"controllers/ApiController.html":{}}}],["body.name",{"_index":116,"title":{},"body":{"controllers/ApiController.html":{}}}],["body.password",{"_index":99,"title":{},"body":{"controllers/ApiController.html":{}}}],["body.username",{"_index":97,"title":{},"body":{"controllers/ApiController.html":{}}}],["boolean",{"_index":1276,"title":{},"body":{"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{}}}],["bootstrap",{"_index":180,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/NotificationModule.html":{},"modules/OrganizationModule.html":{},"modules/PaymentMethodModule.html":{},"modules/UsersModule.html":{},"modules/UtilsModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1862,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1859,"title":{},"body":{"modules.html":{}}}],["canactivate",{"_index":753,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":755,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["cascade",{"_index":874,"title":{},"body":{"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{}}}],["catch",{"_index":104,"title":{},"body":{"controllers/ApiController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"injectables/NotificationService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{}}}],["categories",{"_index":366,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/Migrations1717483943918.html":{},"injectables/UsersService.html":{}}}],["categories'})@apiresponse({type",{"_index":373,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["categories.controller",{"_index":458,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["categories.service",{"_index":418,"title":{},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{}}}],["categories/dto/create",{"_index":413,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["categories/dto/update",{"_index":415,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["categories/entities/category.entity",{"_index":416,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/User.html":{}}}],["categories\\`(\\`guid",{"_index":876,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["categoriescontroller",{"_index":364,"title":{"controllers/CategoriesController.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"coverage.html":{}}}],["categoriescontroller.name",{"_index":426,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["categoriesguid",{"_index":844,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["categoriesids",{"_index":1609,"title":{},"body":{"injectables/UsersService.html":{}}}],["categoriesids.length",{"_index":1630,"title":{},"body":{"injectables/UsersService.html":{}}}],["categoriesmodule",{"_index":187,"title":{"modules/CategoriesModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/CategoriesModule.html":{},"modules.html":{},"overview.html":{}}}],["categoriesservice",{"_index":417,"title":{"injectables/CategoriesService.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"coverage.html":{},"overview.html":{}}}],["category",{"_index":350,"title":{"entities/Category.html":{}},"body":{"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/googleOAuthDTO.html":{}}}],["category'})@apiresponse({type",{"_index":380,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["category.deletedat",{"_index":545,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["category.deletedby",{"_index":547,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["category.description",{"_index":535,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["category.dto",{"_index":414,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts",{"_index":594,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:13",{"_index":1291,"title":{},"body":{"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{}}}],["category.dto.ts:16",{"_index":603,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:18",{"_index":1287,"title":{},"body":{"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{}}}],["category.dto.ts:21",{"_index":597,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:23",{"_index":1290,"title":{},"body":{"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{}}}],["category.dto.ts:27",{"_index":599,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:28",{"_index":1286,"title":{},"body":{"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{}}}],["category.dto.ts:31",{"_index":601,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:33",{"_index":1292,"title":{},"body":{"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{}}}],["category.dto.ts:38",{"_index":1294,"title":{},"body":{"classes/SearchCategoryPaginationDto.html":{}}}],["category.dto.ts:42",{"_index":1299,"title":{},"body":{"classes/SearchCategoryPaginationDto.html":{}}}],["category.dto.ts:47",{"_index":1296,"title":{},"body":{"classes/SearchCategoryPaginationDto.html":{}}}],["category.dto.ts:52",{"_index":1297,"title":{},"body":{"classes/SearchCategoryPaginationDto.html":{}}}],["category.dto.ts:8",{"_index":1288,"title":{},"body":{"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{}}}],["category.guid",{"_index":1632,"title":{},"body":{"injectables/UsersService.html":{}}}],["category.image",{"_index":536,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["category.isactive",{"_index":537,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["category.name",{"_index":534,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["category.updatedby",{"_index":538,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["category.users",{"_index":1496,"title":{},"body":{"entities/User.html":{}}}],["category.users)@jointable",{"_index":1440,"title":{},"body":{"entities/User.html":{}}}],["categoryid",{"_index":689,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["categoryrepository",{"_index":462,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/UsersService.html":{}}}],["categoryservice",{"_index":422,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["certification.filename",{"_index":1662,"title":{},"body":{"injectables/UsersService.html":{}}}],["certifications",{"_index":832,"title":{},"body":{"classes/Migrations1717483943918.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["charset",{"_index":1888,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":0,"title":{"classes/AddMessageDto.html":{},"classes/ArrayGuidDTO.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/DefaultController.html":{},"classes/DefaultService.html":{},"classes/DefaultWithoutSecurityController.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"classes/NotificationAlreadyExistsException.html":{},"classes/NotificationGateway.html":{},"classes/NotificationNoExistsException.html":{},"classes/OrganizationAlreadyExistsException.html":{},"classes/OrganizationNoExistsException.html":{},"classes/PaginationDTO.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"classes/PaymentMethodNoExistsException.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/SendNotificationsToUserDTO.html":{},"classes/SqlReader.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdatePaymentMethodDto.html":{},"classes/UpdateUserDTO.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"classes/googleOAuthDTO.html":{}},"body":{"classes/AddMessageDto.html":{},"controllers/ApiController.html":{},"injectables/ApiKeyStrategy.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"modules/AppModule.html":{},"classes/ArrayGuidDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/DefaultController.html":{},"classes/DefaultService.html":{},"classes/DefaultWithoutSecurityController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"entities/Notification.html":{},"classes/NotificationAlreadyExistsException.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"modules/NotificationModule.html":{},"classes/NotificationNoExistsException.html":{},"injectables/NotificationService.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"classes/OrganizationAlreadyExistsException.html":{},"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"classes/OrganizationNoExistsException.html":{},"injectables/OrganizationService.html":{},"classes/PaginationDTO.html":{},"entities/PaymentMethod.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"controllers/PaymentMethodController.html":{},"modules/PaymentMethodModule.html":{},"classes/PaymentMethodNoExistsException.html":{},"injectables/PaymentMethodService.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/SendNotificationsToUserDTO.html":{},"classes/SqlReader.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdatePaymentMethodDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/UtilsModule.html":{},"injectables/UtilsService.html":{},"coverage.html":{},"dependencies.html":{},"classes/googleOAuthDTO.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddMessageDto.html":{},"classes/ArrayGuidDTO.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/DefaultController.html":{},"classes/DefaultService.html":{},"classes/DefaultWithoutSecurityController.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"classes/NotificationAlreadyExistsException.html":{},"classes/NotificationGateway.html":{},"classes/NotificationNoExistsException.html":{},"classes/OrganizationAlreadyExistsException.html":{},"classes/OrganizationNoExistsException.html":{},"classes/PaginationDTO.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"classes/PaymentMethodNoExistsException.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/SendNotificationsToUserDTO.html":{},"classes/SqlReader.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdatePaymentMethodDto.html":{},"classes/UpdateUserDTO.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"classes/googleOAuthDTO.html":{},"overview.html":{}}}],["clearurlpath",{"_index":1722,"title":{},"body":{"injectables/UtilsService.html":{}}}],["clearurlpath(url",{"_index":1727,"title":{},"body":{"injectables/UtilsService.html":{}}}],["client",{"_index":973,"title":{},"body":{"classes/NotificationGateway.html":{},"miscellaneous/enumerations.html":{}}}],["client.broadcast.emit('notification",{"_index":1032,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["client.disconnect",{"_index":1003,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["client.emit('notification",{"_index":1015,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["client.handshake.headers.auth",{"_index":999,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["client.id",{"_index":1014,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["cliente",{"_index":1035,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["cluster_apimodule",{"_index":183,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_apimodule_imports",{"_index":185,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_apimodule_providers",{"_index":184,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":216,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["cluster_authmodule",{"_index":260,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":261,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":262,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule",{"_index":454,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule_exports",{"_index":455,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule_providers",{"_index":456,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_notificationmodule",{"_index":1059,"title":{},"body":{"modules/NotificationModule.html":{},"overview.html":{}}}],["cluster_notificationmodule_exports",{"_index":1060,"title":{},"body":{"modules/NotificationModule.html":{},"overview.html":{}}}],["cluster_notificationmodule_imports",{"_index":1061,"title":{},"body":{"modules/NotificationModule.html":{}}}],["cluster_notificationmodule_providers",{"_index":1062,"title":{},"body":{"modules/NotificationModule.html":{},"overview.html":{}}}],["cluster_organizationmodule",{"_index":1145,"title":{},"body":{"modules/OrganizationModule.html":{},"overview.html":{}}}],["cluster_organizationmodule_exports",{"_index":1146,"title":{},"body":{"modules/OrganizationModule.html":{},"overview.html":{}}}],["cluster_organizationmodule_providers",{"_index":1147,"title":{},"body":{"modules/OrganizationModule.html":{},"overview.html":{}}}],["cluster_paymentmethodmodule",{"_index":1218,"title":{},"body":{"modules/PaymentMethodModule.html":{},"overview.html":{}}}],["cluster_paymentmethodmodule_exports",{"_index":1219,"title":{},"body":{"modules/PaymentMethodModule.html":{},"overview.html":{}}}],["cluster_paymentmethodmodule_providers",{"_index":1220,"title":{},"body":{"modules/PaymentMethodModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1568,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1570,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1569,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_utilsmodule",{"_index":1714,"title":{},"body":{"modules/UtilsModule.html":{},"overview.html":{}}}],["cluster_utilsmodule_exports",{"_index":1715,"title":{},"body":{"modules/UtilsModule.html":{},"overview.html":{}}}],["cluster_utilsmodule_providers",{"_index":1716,"title":{},"body":{"modules/UtilsModule.html":{},"overview.html":{}}}],["column",{"_index":574,"title":{},"body":{"entities/Category.html":{},"entities/Notification.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["column({type",{"_index":564,"title":{},"body":{"entities/Category.html":{},"entities/Notification.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["con",{"_index":1021,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["conectado",{"_index":1018,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["config",{"_index":132,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"injectables/ApiService.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UtilsService.html":{}}}],["config.get('jwt_expire_in",{"_index":284,"title":{},"body":{"modules/AuthModule.html":{}}}],["config.get('jwt_secret",{"_index":281,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["config/.../typeorm.datasource.ts",{"_index":1873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config/typeorm.datasource.ts",{"_index":1771,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["config/typeorm.service",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["config/typeorm.service.ts",{"_index":1403,"title":{},"body":{"injectables/TypeOrmConfigService.html":{},"coverage.html":{}}}],["config/typeorm.service.ts:10",{"_index":1405,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["config/typeorm.service.ts:8",{"_index":1407,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["configmodule",{"_index":223,"title":{},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"modules/NotificationModule.html":{},"modules/OrganizationModule.html":{},"modules/PaymentMethodModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forroot",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":137,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"injectables/ApiService.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UtilsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configservice.get('database_host",{"_index":1879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('database_name",{"_index":1883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('database_password",{"_index":1882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('database_port",{"_index":1880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice.get('database_username",{"_index":1881,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connected",{"_index":1011,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["connectedsocket",{"_index":991,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["connectedusers",{"_index":957,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["console",{"_index":490,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["console.log",{"_index":1027,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["console.log('client",{"_index":1013,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["console.log('connected",{"_index":1052,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["console.log('error",{"_index":1007,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["console.log('invalid",{"_index":1009,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["console.log('no",{"_index":1000,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["console.log('payload",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('payment",{"_index":1679,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log('send",{"_index":1051,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["console.log('user",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{},"classes/NotificationGateway.html":{}}}],["console.log('validating",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(payload",{"_index":1028,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["console.log(this.server",{"_index":1047,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["console.log(token",{"_index":123,"title":{},"body":{"controllers/ApiController.html":{}}}],["const",{"_index":92,"title":{},"body":{"controllers/ApiController.html":{},"injectables/ApiKeyStrategy.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/DefaultController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"injectables/NotificationService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"guards/RolesGuard.html":{},"classes/SqlReader.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{},"miscellaneous/variables.html":{}}}],["constraint",{"_index":853,"title":{},"body":{"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{}}}],["constructor",{"_index":80,"title":{},"body":{"controllers/ApiController.html":{},"injectables/ApiKeyStrategy.html":{},"injectables/ApiService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/DefaultController.html":{},"classes/DefaultService.html":{},"classes/DefaultWithoutSecurityController.html":{},"injectables/JwtStrategy.html":{},"classes/NotificationAlreadyExistsException.html":{},"controllers/NotificationController.html":{},"classes/NotificationNoExistsException.html":{},"injectables/NotificationService.html":{},"classes/OrganizationAlreadyExistsException.html":{},"controllers/OrganizationController.html":{},"classes/OrganizationNoExistsException.html":{},"injectables/OrganizationService.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"controllers/PaymentMethodController.html":{},"classes/PaymentMethodNoExistsException.html":{},"injectables/PaymentMethodService.html":{},"guards/RolesGuard.html":{},"classes/SqlReader.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(config",{"_index":783,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(message",{"_index":692,"title":{},"body":{"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/NotificationAlreadyExistsException.html":{},"classes/NotificationNoExistsException.html":{},"classes/OrganizationAlreadyExistsException.html":{},"classes/OrganizationNoExistsException.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"classes/PaymentMethodNoExistsException.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{}}}],["constructor(object",{"_index":723,"title":{},"body":{"classes/DefaultController.html":{},"classes/DefaultService.html":{},"classes/DefaultWithoutSecurityController.html":{}}}],["constructor(private",{"_index":739,"title":{},"body":{"classes/DefaultController.html":{},"classes/DefaultService.html":{},"classes/DefaultWithoutSecurityController.html":{},"guards/RolesGuard.html":{}}}],["constructor(reflector",{"_index":1273,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context",{"_index":758,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":1280,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":771,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":773,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["controller",{"_index":21,"title":{"controllers/ApiController.html":{},"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/ApiController.html":{},"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('categories",{"_index":419,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["controller('notification",{"_index":936,"title":{},"body":{"controllers/NotificationController.html":{}}}],["controller('organization",{"_index":1135,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["controller('paymentmethod",{"_index":1208,"title":{},"body":{"controllers/PaymentMethodController.html":{}}}],["controller('users",{"_index":1545,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":23,"title":{},"body":{"controllers/ApiController.html":{},"modules/ApiModule.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"controllers/PaymentMethodController.html":{},"modules/PaymentMethodModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["copyfilesync(file.path",{"_index":1907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cors",{"_index":997,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["coverage",{"_index":1767,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":367,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdatePaymentMethodDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["create(@body",{"_index":948,"title":{},"body":{"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{}}}],["create(body",{"_index":923,"title":{},"body":{"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{}}}],["create(file",{"_index":375,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["create(files",{"_index":1515,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(params",{"_index":1071,"title":{},"body":{"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{}}}],["createcategorydto",{"_index":377,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["created",{"_index":1295,"title":{},"body":{"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{}}}],["createdat",{"_index":494,"title":{},"body":{"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"entities/Notification.html":{},"injectables/NotificationService.html":{},"entities/Organization.html":{},"injectables/OrganizationService.html":{},"entities/PaymentMethod.html":{},"injectables/PaymentMethodService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["createdatecolumn",{"_index":587,"title":{},"body":{"entities/Category.html":{},"entities/Notification.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"entities/User.html":{}}}],["createdatecolumn({type",{"_index":554,"title":{},"body":{"entities/Category.html":{},"entities/Notification.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"entities/User.html":{}}}],["createdby",{"_index":498,"title":{},"body":{"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/Migrations1717483943918.html":{},"entities/Notification.html":{},"injectables/NotificationService.html":{},"entities/Organization.html":{},"injectables/OrganizationService.html":{},"entities/PaymentMethod.html":{},"injectables/PaymentMethodService.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["createdbyguid",{"_index":445,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["createnotificationdto",{"_index":609,"title":{"classes/CreateNotificationDto.html":{}},"body":{"classes/CreateNotificationDto.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["createorganizationdto",{"_index":619,"title":{"classes/CreateOrganizationDto.html":{}},"body":{"classes/CreateOrganizationDto.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"classes/UpdateOrganizationDto.html":{},"coverage.html":{}}}],["createpaymentmethoddto",{"_index":626,"title":{"classes/CreatePaymentMethodDto.html":{}},"body":{"classes/CreatePaymentMethodDto.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"classes/UpdatePaymentMethodDto.html":{},"coverage.html":{}}}],["createtypeormoptions",{"_index":1404,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["createuserdto",{"_index":631,"title":{"classes/CreateUserDTO.html":{}},"body":{"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/googleOAuthDTO.html":{}}}],["creating",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["current_timestamp(6",{"_index":820,"title":{},"body":{"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{}}}],["custom",{"_index":719,"title":{},"body":{"classes/CustomException-3.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{}}}],["customexception",{"_index":690,"title":{"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{}},"body":{"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/NotificationAlreadyExistsException.html":{},"classes/NotificationNoExistsException.html":{},"classes/OrganizationAlreadyExistsException.html":{},"classes/OrganizationNoExistsException.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"classes/PaymentMethodNoExistsException.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"coverage.html":{}}}],["d",{"_index":1739,"title":{},"body":{"injectables/UtilsService.html":{}}}],["d.length",{"_index":1742,"title":{},"body":{"injectables/UtilsService.html":{}}}],["data",{"_index":103,"title":{},"body":{"controllers/ApiController.html":{},"injectables/ApiKeyStrategy.html":{},"classes/ArrayGuidDTO.html":{},"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"classes/PaginationDTO.html":{},"controllers/PaymentMethodController.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"controllers/UsersController.html":{}}}],["database",{"_index":1414,"title":{},"body":{"injectables/TypeOrmConfigService.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":1878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":546,"title":{},"body":{"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"entities/Notification.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{},"classes/googleOAuthDTO.html":{}}}],["date().tostring",{"_index":1740,"title":{},"body":{"injectables/UtilsService.html":{}}}],["date.getdate().tostring().padstart(2",{"_index":1747,"title":{},"body":{"injectables/UtilsService.html":{}}}],["date.getfullyear",{"_index":1751,"title":{},"body":{"injectables/UtilsService.html":{}}}],["date.getmonth",{"_index":1749,"title":{},"body":{"injectables/UtilsService.html":{}}}],["date.getutchours()}:${date.getminutes()}:${date.getseconds",{"_index":1752,"title":{},"body":{"injectables/UtilsService.html":{}}}],["date.isvalid",{"_index":1758,"title":{},"body":{"injectables/UtilsService.html":{}}}],["date.now()}_${file.filename}.${fileext",{"_index":1905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datestring",{"_index":1736,"title":{},"body":{"injectables/UtilsService.html":{}}}],["day",{"_index":1746,"title":{},"body":{"injectables/UtilsService.html":{}}}],["db.ts",{"_index":802,"title":{},"body":{"classes/Migrations1717483943918.html":{},"coverage.html":{}}}],["db.ts:35",{"_index":810,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["db.ts:4",{"_index":807,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["db.ts:6",{"_index":812,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["dd",{"_index":1757,"title":{},"body":{"injectables/UtilsService.html":{}}}],["de",{"_index":1048,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["declarations",{"_index":179,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/NotificationModule.html":{},"modules/OrganizationModule.html":{},"modules/PaymentMethodModule.html":{},"modules/UsersModule.html":{},"modules/UtilsModule.html":{},"overview.html":{}}}],["decorators",{"_index":31,"title":{},"body":{"controllers/ApiController.html":{},"injectables/ApiKeyStrategy.html":{},"injectables/ApiService.html":{},"classes/ArrayGuidDTO.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"injectables/NotificationService.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"classes/PaginationDTO.html":{},"entities/PaymentMethod.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"entities/Role.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"injectables/TypeOrmConfigService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{},"classes/googleOAuthDTO.html":{}}}],["default",{"_index":140,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"classes/ArrayGuidDTO.html":{},"entities/Category.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"entities/Notification.html":{},"classes/NotificationGateway.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"classes/PaginationDTO.html":{},"entities/PaymentMethod.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"injectables/UtilsService.html":{},"classes/googleOAuthDTO.html":{},"miscellaneous/variables.html":{}}}],["defaultcontroller",{"_index":408,"title":{"classes/DefaultController.html":{}},"body":{"controllers/CategoriesController.html":{},"classes/DefaultController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["defaultservice",{"_index":206,"title":{"classes/DefaultService.html":{}},"body":{"injectables/ApiService.html":{},"injectables/CategoriesService.html":{},"classes/DefaultService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["defaultservice:4",{"_index":210,"title":{},"body":{"injectables/ApiService.html":{},"injectables/CategoriesService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["defaultwithoutsecuritycontroller",{"_index":66,"title":{"classes/DefaultWithoutSecurityController.html":{}},"body":{"controllers/ApiController.html":{},"classes/DefaultWithoutSecurityController.html":{},"coverage.html":{}}}],["defined",{"_index":15,"title":{},"body":{"classes/AddMessageDto.html":{},"controllers/ApiController.html":{},"injectables/ApiKeyStrategy.html":{},"injectables/ApiService.html":{},"classes/ArrayGuidDTO.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/DefaultController.html":{},"classes/DefaultService.html":{},"classes/DefaultWithoutSecurityController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"entities/Notification.html":{},"classes/NotificationAlreadyExistsException.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"classes/NotificationNoExistsException.html":{},"injectables/NotificationService.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"classes/OrganizationAlreadyExistsException.html":{},"controllers/OrganizationController.html":{},"classes/OrganizationNoExistsException.html":{},"injectables/OrganizationService.html":{},"classes/PaginationDTO.html":{},"entities/PaymentMethod.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"controllers/PaymentMethodController.html":{},"classes/PaymentMethodNoExistsException.html":{},"injectables/PaymentMethodService.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/SendNotificationsToUserDTO.html":{},"classes/SqlReader.html":{},"injectables/TypeOrmConfigService.html":{},"entities/User.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{},"classes/googleOAuthDTO.html":{}}}],["del",{"_index":1031,"title":{},"body":{"classes/NotificationGateway.html":{},"miscellaneous/variables.html":{}}}],["delete",{"_index":368,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete(':guid",{"_index":451,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/UsersController.html":{}}}],["delete(':guid')@auth(roleenum.super",{"_index":384,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["delete(':guid')@auth(roleenum.super)@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1520,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(@param('guid",{"_index":1565,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(guid",{"_index":382,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/UsersController.html":{}}}],["delete(params",{"_index":469,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/UsersService.html":{}}}],["deletedat",{"_index":506,"title":{},"body":{"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"entities/Notification.html":{},"injectables/NotificationService.html":{},"entities/Organization.html":{},"injectables/OrganizationService.html":{},"entities/PaymentMethod.html":{},"injectables/PaymentMethodService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["deletedby",{"_index":501,"title":{},"body":{"injectables/CategoriesService.html":{},"entities/Category.html":{},"entities/Notification.html":{},"entities/Organization.html":{},"injectables/OrganizationService.html":{},"entities/PaymentMethod.html":{},"injectables/PaymentMethodService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["deletedbyguid",{"_index":453,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{}}}],["deletefile",{"_index":1780,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dependencies",{"_index":177,"title":{"dependencies.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/NotificationModule.html":{},"modules/OrganizationModule.html":{},"modules/PaymentMethodModule.html":{},"modules/UsersModule.html":{},"modules/UtilsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":256,"title":{},"body":{"classes/ArrayGuidDTO.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/PaginationDTO.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/googleOAuthDTO.html":{}}}],["description",{"_index":34,"title":{},"body":{"controllers/ApiController.html":{},"injectables/ApiService.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"entities/Notification.html":{},"injectables/NotificationService.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"injectables/OrganizationService.html":{},"entities/Role.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{},"properties.html":{}}}],["desde",{"_index":1045,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["dest",{"_index":433,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/UsersController.html":{}}}],["destinatary",{"_index":987,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["disconected",{"_index":1023,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["disconnecting",{"_index":1002,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["dist/**/*.entity.{ts,js",{"_index":1418,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["document",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["documentation",{"_index":1768,"title":{},"body":{"coverage.html":{}}}],["documentsidea",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["documentsideb",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["done",{"_index":158,"title":{},"body":{"injectables/ApiKeyStrategy.html":{}}}],["done(new",{"_index":168,"title":{},"body":{"injectables/ApiKeyStrategy.html":{}}}],["done(null",{"_index":173,"title":{},"body":{"injectables/ApiKeyStrategy.html":{}}}],["down",{"_index":805,"title":{},"body":{"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{}}}],["down(queryrunner",{"_index":808,"title":{},"body":{"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{}}}],["drop",{"_index":880,"title":{},"body":{"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{}}}],["dto/add",{"_index":994,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["dto/create",{"_index":484,"title":{},"body":{"injectables/CategoriesService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{}}}],["dto/search",{"_index":486,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{}}}],["dto/update",{"_index":489,"title":{},"body":{"injectables/CategoriesService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{}}}],["e",{"_index":1006,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["each",{"_index":671,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/googleOAuthDTO.html":{}}}],["el",{"_index":1038,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["email",{"_index":119,"title":{},"body":{"controllers/ApiController.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["emiti",{"_index":1037,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["emptyresponse",{"_index":508,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["en",{"_index":1040,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["engine=innodb",{"_index":822,"title":{},"body":{"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{}}}],["entities",{"_index":550,"title":{},"body":{"entities/Category.html":{},"entities/Notification.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"entities/Role.html":{},"injectables/TypeOrmConfigService.html":{},"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/category.entity",{"_index":459,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["entities/notification.entity",{"_index":935,"title":{},"body":{"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{}}}],["entities/organization.entity",{"_index":1134,"title":{},"body":{"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"injectables/OrganizationService.html":{}}}],["entities/paymentmethod.entity",{"_index":1207,"title":{},"body":{"controllers/PaymentMethodController.html":{},"modules/PaymentMethodModule.html":{},"injectables/PaymentMethodService.html":{}}}],["entity",{"_index":549,"title":{"entities/Category.html":{},"entities/Notification.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"entities/Role.html":{},"entities/User.html":{}},"body":{"entities/Category.html":{},"entities/Notification.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"entities/Role.html":{},"entities/User.html":{},"coverage.html":{}}}],["enum",{"_index":669,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/googleOAuthDTO.html":{}}}],["enumerations",{"_index":1842,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["envbasepath",{"_index":1762,"title":{},"body":{"injectables/UtilsService.html":{}}}],["envbasepath.charat(envbasepath.length",{"_index":1765,"title":{},"body":{"injectables/UtilsService.html":{}}}],["envbasepath.length",{"_index":1764,"title":{},"body":{"injectables/UtilsService.html":{}}}],["envbasepath.substring(0",{"_index":1766,"title":{},"body":{"injectables/UtilsService.html":{}}}],["enviar",{"_index":1033,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["err",{"_index":761,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["err.message",{"_index":777,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error",{"_index":105,"title":{},"body":{"controllers/ApiController.html":{},"injectables/ApiKeyStrategy.html":{},"classes/ArrayGuidDTO.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"classes/PaginationDTO.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{}}}],["error('category",{"_index":1619,"title":{},"body":{"injectables/UsersService.html":{}}}],["error('categorynoexists",{"_index":533,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["error('payment",{"_index":1678,"title":{},"body":{"injectables/UsersService.html":{}}}],["error('usernoexists",{"_index":544,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/UsersService.html":{}}}],["error(`${categoriesservice.name}[all]:${error.message",{"_index":523,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["error(`${categoriesservice.name}[create]:${error.message",{"_index":531,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["error(`${categoriesservice.name}[delete]:${error.message",{"_index":548,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["error(`${categoriesservice.name}[getby]:${error.message",{"_index":507,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["error(`${categoriesservice.name}[update]:${error.message",{"_index":541,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["error(`${notificationservice.name}[all]:${error.message",{"_index":1090,"title":{},"body":{"injectables/NotificationService.html":{}}}],["error(`${notificationservice.name}[create]:${error.message",{"_index":1095,"title":{},"body":{"injectables/NotificationService.html":{}}}],["error(`${notificationservice.name}[getby]:${error.message",{"_index":1084,"title":{},"body":{"injectables/NotificationService.html":{}}}],["error(`${notificationservice.name}[update]:${error.message",{"_index":1099,"title":{},"body":{"injectables/NotificationService.html":{}}}],["error(`${organizationservice.name}[all]:${error.message",{"_index":1166,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["error(`${organizationservice.name}[create]:${error.message",{"_index":1169,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["error(`${organizationservice.name}[getby]:${error.message",{"_index":1164,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["error(`${organizationservice.name}[update]:${error.message",{"_index":1174,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["error(`${paymentmethodservice.name}[all]:${error.message",{"_index":1239,"title":{},"body":{"injectables/PaymentMethodService.html":{}}}],["error(`${paymentmethodservice.name}[create]:${error.message",{"_index":1242,"title":{},"body":{"injectables/PaymentMethodService.html":{}}}],["error(`${paymentmethodservice.name}[getby]:${error.message",{"_index":1237,"title":{},"body":{"injectables/PaymentMethodService.html":{}}}],["error(`${paymentmethodservice.name}[update]:${error.message",{"_index":1246,"title":{},"body":{"injectables/PaymentMethodService.html":{}}}],["error(`${usersservice.name}[all]:${error.message",{"_index":1637,"title":{},"body":{"injectables/UsersService.html":{}}}],["error(`${usersservice.name}[create]:${error.message",{"_index":1669,"title":{},"body":{"injectables/UsersService.html":{}}}],["error(`${usersservice.name}[delete]:${error.message",{"_index":1712,"title":{},"body":{"injectables/UsersService.html":{}}}],["error(`${usersservice.name}[getby]:${error.message",{"_index":1608,"title":{},"body":{"injectables/UsersService.html":{}}}],["error(`${usersservice.name}[update]:${error.message",{"_index":1706,"title":{},"body":{"injectables/UsersService.html":{}}}],["error.message",{"_index":111,"title":{},"body":{"controllers/ApiController.html":{},"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{},"injectables/UtilsService.html":{}}}],["error.status",{"_index":112,"title":{},"body":{"controllers/ApiController.html":{},"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["especifico",{"_index":1041,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["exceptions",{"_index":720,"title":{},"body":{"classes/CustomException-3.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{}}}],["executioncontext",{"_index":756,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["exist",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{},"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/NotificationAlreadyExistsException.html":{},"classes/NotificationNoExistsException.html":{},"classes/OrganizationAlreadyExistsException.html":{},"classes/OrganizationNoExistsException.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"classes/PaymentMethodNoExistsException.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{}}}],["exists",{"_index":697,"title":{},"body":{"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/NotificationAlreadyExistsException.html":{},"classes/NotificationNoExistsException.html":{},"classes/OrganizationAlreadyExistsException.html":{},"classes/OrganizationNoExistsException.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"classes/PaymentMethodNoExistsException.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{}}}],["expiresin",{"_index":283,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":18,"title":{},"body":{"classes/AddMessageDto.html":{},"controllers/ApiController.html":{},"injectables/ApiKeyStrategy.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"modules/AppModule.html":{},"classes/ArrayGuidDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/DefaultController.html":{},"classes/DefaultService.html":{},"classes/DefaultWithoutSecurityController.html":{},"interfaces/JWTPayloadInterface.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"entities/Notification.html":{},"classes/NotificationAlreadyExistsException.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"modules/NotificationModule.html":{},"classes/NotificationNoExistsException.html":{},"injectables/NotificationService.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"classes/OrganizationAlreadyExistsException.html":{},"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"classes/OrganizationNoExistsException.html":{},"injectables/OrganizationService.html":{},"classes/PaginationDTO.html":{},"entities/PaymentMethod.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"controllers/PaymentMethodController.html":{},"modules/PaymentMethodModule.html":{},"classes/PaymentMethodNoExistsException.html":{},"injectables/PaymentMethodService.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/SendNotificationsToUserDTO.html":{},"classes/SqlReader.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdatePaymentMethodDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/UtilsModule.html":{},"injectables/UtilsService.html":{},"classes/googleOAuthDTO.html":{}}}],["exports",{"_index":182,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/NotificationModule.html":{},"modules/OrganizationModule.html":{},"modules/PaymentMethodModule.html":{},"modules/UsersModule.html":{},"modules/UtilsModule.html":{},"overview.html":{}}}],["express",{"_index":149,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"controllers/CategoriesController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":376,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["extends",{"_index":25,"title":{},"body":{"controllers/ApiController.html":{},"injectables/ApiKeyStrategy.html":{},"injectables/ApiService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateUserDTO.html":{},"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"classes/NotificationAlreadyExistsException.html":{},"controllers/NotificationController.html":{},"classes/NotificationNoExistsException.html":{},"injectables/NotificationService.html":{},"classes/OrganizationAlreadyExistsException.html":{},"controllers/OrganizationController.html":{},"classes/OrganizationNoExistsException.html":{},"injectables/OrganizationService.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"controllers/PaymentMethodController.html":{},"classes/PaymentMethodNoExistsException.html":{},"injectables/PaymentMethodService.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdatePaymentMethodDto.html":{},"classes/UpdateUserDTO.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["extension",{"_index":1897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":790,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":792,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extraer",{"_index":1895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":252,"title":{},"body":{"classes/ArrayGuidDTO.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"entities/Notification.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"injectables/OrganizationService.html":{},"classes/PaginationDTO.html":{},"entities/PaymentMethod.html":{},"injectables/PaymentMethodService.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"entities/Role.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["false})@isoptional",{"_index":600,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{}}}],["false})@isoptional()@isnumber",{"_index":1289,"title":{},"body":{"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchPaymentMethodDto.html":{}}}],["false})@isoptional()@isstring",{"_index":622,"title":{},"body":{"classes/CreateOrganizationDto.html":{},"classes/CreateUserDTO.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserPaginationDTO.html":{}}}],["false})@isstring()@isoptional",{"_index":596,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/ResposeDTO.html":{}}}],["false})@isstring()@isoptional()@maxlength(250",{"_index":598,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateUserDTO.html":{}}}],["false})@maxlength(150)@isstring()@isoptional",{"_index":661,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["false})@maxlength(50)@isnotempty()@isoptional()@isstring",{"_index":652,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["false})@maxlength(50)@isnotempty()@isoptional()@isstring()@isemail",{"_index":650,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["false})@maxlength(50)@isoptional()@isstring",{"_index":636,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["false})@maxlength(50)@isstring()@isoptional",{"_index":640,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["false})@minlength(3)@maxlength(50)@isnotempty()@isoptional()@isstring",{"_index":659,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["false})@minlength(3)@maxlength(70)@isnotempty()@isstring",{"_index":664,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["false})@unique(['email",{"_index":1456,"title":{},"body":{"entities/User.html":{}}}],["false})@unique(['username",{"_index":1482,"title":{},"body":{"entities/User.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddMessageDto.html":{},"controllers/ApiController.html":{},"injectables/ApiKeyStrategy.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"modules/AppModule.html":{},"classes/ArrayGuidDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/DefaultController.html":{},"classes/DefaultService.html":{},"classes/DefaultWithoutSecurityController.html":{},"interfaces/JWTPayloadInterface.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"entities/Notification.html":{},"classes/NotificationAlreadyExistsException.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"modules/NotificationModule.html":{},"classes/NotificationNoExistsException.html":{},"injectables/NotificationService.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"classes/OrganizationAlreadyExistsException.html":{},"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"classes/OrganizationNoExistsException.html":{},"injectables/OrganizationService.html":{},"classes/PaginationDTO.html":{},"entities/PaymentMethod.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"controllers/PaymentMethodController.html":{},"modules/PaymentMethodModule.html":{},"classes/PaymentMethodNoExistsException.html":{},"injectables/PaymentMethodService.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/SendNotificationsToUserDTO.html":{},"classes/SqlReader.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdatePaymentMethodDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/UtilsModule.html":{},"injectables/UtilsService.html":{},"coverage.html":{},"classes/googleOAuthDTO.html":{},"miscellaneous/variables.html":{}}}],["file.filename",{"_index":1906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file.originalname.split",{"_index":1902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file?.filename",{"_index":528,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["file?.mimetype?.split('/')[1",{"_index":1894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fileext",{"_index":1893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filefieldsinterceptor",{"_index":1542,"title":{},"body":{"controllers/UsersController.html":{}}}],["filegen",{"_index":1904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fileinterceptor",{"_index":404,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["fileinterceptor('image",{"_index":432,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["fileisrequired",{"_index":443,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["filename",{"_index":1891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fileorfiles",{"_index":1913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fileorfiles.foreach((file",{"_index":1912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filepath",{"_index":1389,"title":{},"body":{"classes/SqlReader.html":{}}}],["files",{"_index":1519,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["files/${filegen",{"_index":1908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["files/${filename",{"_index":1892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["files?.backgroundcheck?.[0]?.filename",{"_index":1658,"title":{},"body":{"injectables/UsersService.html":{}}}],["files?.documentsidea",{"_index":1670,"title":{},"body":{"injectables/UsersService.html":{}}}],["files?.documentsidea?.[0]?.filename",{"_index":1656,"title":{},"body":{"injectables/UsersService.html":{}}}],["files?.documentsideb",{"_index":1671,"title":{},"body":{"injectables/UsersService.html":{}}}],["files?.documentsideb?.[0]?.filename",{"_index":1657,"title":{},"body":{"injectables/UsersService.html":{}}}],["files?.profileimage?.[0]?.filename",{"_index":1655,"title":{},"body":{"injectables/UsersService.html":{}}}],["filetype",{"_index":439,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["filetypevalidator",{"_index":396,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["filter((query",{"_index":1399,"title":{},"body":{"classes/SqlReader.html":{}}}],["findone",{"_index":369,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["findone(@param('guid",{"_index":428,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["findone(guid",{"_index":387,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["findoneprovider",{"_index":1505,"title":{},"body":{"controllers/UsersController.html":{}}}],["findoneprovider(@param('guid",{"_index":1557,"title":{},"body":{"controllers/UsersController.html":{}}}],["findoneprovider(guid",{"_index":1523,"title":{},"body":{"controllers/UsersController.html":{}}}],["findorganization",{"_index":1167,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["findpaymentmethod",{"_index":1240,"title":{},"body":{"injectables/PaymentMethodService.html":{}}}],["fk_125b2ca9e00b617ffede78e155a",{"_index":871,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["fk_493e13c49d6cab80534c41f9998",{"_index":862,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["fk_5bece5781eec0da0fd62ddd748f",{"_index":870,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["fk_6a9fb5a4565856faa6d5ff4b7ce",{"_index":873,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["fk_7b278a9b9b557617ba0f6a47cf2",{"_index":875,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["fk_81677030e50ff65528fc99fb529",{"_index":877,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["fk_9445d5029daaaa497314020dc07",{"_index":854,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["fk_987b13be02d806c5b5e51a52973",{"_index":860,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["fk_a91581a3fd7391a8cf3365eeb25",{"_index":878,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["fk_b3cb751f39e7ea44cf825052056",{"_index":893,"title":{},"body":{"classes/Migrations1719099417082.html":{}}}],["fk_bdacc8f44ea5a8c764b436206ae",{"_index":894,"title":{},"body":{"classes/Migrations1719099417082.html":{}}}],["fk_bf150ad20e2247a284531879c5c",{"_index":858,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["fk_cb171b2ca98556ca7bdf2f2c289",{"_index":897,"title":{},"body":{"classes/Migrations1719099417082.html":{}}}],["fk_cb4e5a10deb23947949fc174622",{"_index":859,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["fk_d4387eb5cd602518da48dd58696",{"_index":895,"title":{},"body":{"classes/Migrations1719099417082.html":{}}}],["fk_db53dae4ddcc4a8f1f6cec7ccf5",{"_index":896,"title":{},"body":{"classes/Migrations1719099417082.html":{}}}],["fk_ec3c3eb88be4e33e9b8fbd92a60",{"_index":868,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["fk_f31ce3e1cbb249ea65703b4d042",{"_index":869,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["fk_f5c6f6a2dba918e75a6665d0155",{"_index":861,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["foreign",{"_index":855,"title":{},"body":{"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{}}}],["foreignkeyconstraintname",{"_index":1495,"title":{},"body":{"entities/User.html":{}}}],["forpage",{"_index":1085,"title":{},"body":{"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["forwardref",{"_index":265,"title":{},"body":{"modules/AuthModule.html":{}}}],["found",{"_index":1620,"title":{},"body":{"injectables/UsersService.html":{}}}],["fs",{"_index":1390,"title":{},"body":{"classes/SqlReader.html":{}}}],["fs.readfilesync(filepath).tostring",{"_index":1401,"title":{},"body":{"classes/SqlReader.html":{}}}],["function",{"_index":1787,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1850,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1392,"title":{},"body":{"classes/SqlReader.html":{}}}],["generateaccesstoken",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["generateaccesstoken(params",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["get(':guid",{"_index":427,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["get(':guid')@auth(roleenum.super",{"_index":927,"title":{},"body":{"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["get(':guid')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":388,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["get('homeproviders",{"_index":1553,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('homeproviders')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1528,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('providers",{"_index":1550,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('providers')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1512,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('providers/:guid",{"_index":1556,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('providers/:guid')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1524,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('whoami",{"_index":1558,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('whoami')@auth(roleenum.super",{"_index":1538,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@apioperation({summary",{"_index":32,"title":{},"body":{"controllers/ApiController.html":{}}}],["get()@auth(roleenum.super",{"_index":918,"title":{},"body":{"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["get()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":372,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["getby",{"_index":464,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["getby(params",{"_index":471,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["getinfo",{"_index":27,"title":{},"body":{"controllers/ApiController.html":{},"injectables/ApiService.html":{}}}],["getpaths",{"_index":1781,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gettimezone",{"_index":1723,"title":{},"body":{"injectables/UtilsService.html":{}}}],["getting",{"_index":1856,"title":{"index.html":{}},"body":{}}],["getyyyymmdddateformat",{"_index":1724,"title":{},"body":{"injectables/UtilsService.html":{}}}],["getyyyymmdddateformat(date",{"_index":1731,"title":{},"body":{"injectables/UtilsService.html":{}}}],["google",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["googleid",{"_index":121,"title":{},"body":{"controllers/ApiController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["googleoauth",{"_index":29,"title":{},"body":{"controllers/ApiController.html":{}}}],["googleoauth(@body",{"_index":114,"title":{},"body":{"controllers/ApiController.html":{}}}],["googleoauth(body",{"_index":38,"title":{},"body":{"controllers/ApiController.html":{}}}],["googleoauthdto",{"_index":39,"title":{"classes/googleOAuthDTO.html":{}},"body":{"controllers/ApiController.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"coverage.html":{},"classes/googleOAuthDTO.html":{}}}],["guard",{"_index":1270,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guard/roles.guard",{"_index":274,"title":{},"body":{"modules/AuthModule.html":{}}}],["guards",{"_index":1271,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guid",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateUserDTO.html":{},"interfaces/JWTPayloadInterface.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"entities/PaymentMethod.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"entities/Role.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["guid'})@apiresponse({type",{"_index":390,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["guids",{"_index":232,"title":{},"body":{"classes/ArrayGuidDTO.html":{},"classes/PaginationDTO.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{}}}],["handleconnection",{"_index":959,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["handleconnection(client",{"_index":970,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["handledisconnect",{"_index":960,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["handledisconnect(client",{"_index":974,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["handlemessage",{"_index":961,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["handlemessage(@connectedsocket",{"_index":1024,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["handlemessage(client",{"_index":976,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["handlerequest",{"_index":754,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":759,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlesendnotificationtouser",{"_index":962,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["handlesendnotificationtouser(@messagebody",{"_index":1044,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["handlesendnotificationtouser(payload",{"_index":979,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["hashedpassword",{"_index":1641,"title":{},"body":{"injectables/UsersService.html":{}}}],["hasrole",{"_index":1282,"title":{},"body":{"guards/RolesGuard.html":{}}}],["header",{"_index":154,"title":{},"body":{"injectables/ApiKeyStrategy.html":{}}}],["headerapikey",{"_index":152,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"dependencies.html":{}}}],["helmet",{"_index":1816,"title":{},"body":{"dependencies.html":{}}}],["homepage",{"_index":1529,"title":{},"body":{"controllers/UsersController.html":{}}}],["homeproviders",{"_index":1506,"title":{},"body":{"controllers/UsersController.html":{}}}],["homeproviders(@query",{"_index":1554,"title":{},"body":{"controllers/UsersController.html":{}}}],["homeproviders(query",{"_index":1527,"title":{},"body":{"controllers/UsersController.html":{}}}],["host",{"_index":1410,"title":{},"body":{"injectables/TypeOrmConfigService.html":{},"miscellaneous/variables.html":{}}}],["httpcode",{"_index":56,"title":{},"body":{"controllers/ApiController.html":{},"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["httpcode(httpstatus.created",{"_index":435,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["httpcode(httpstatus.ok",{"_index":86,"title":{},"body":{"controllers/ApiController.html":{},"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["httpexception",{"_index":57,"title":{},"body":{"controllers/ApiController.html":{},"controllers/CategoriesController.html":{},"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"injectables/JwtAuthGuard.html":{},"classes/NotificationAlreadyExistsException.html":{},"controllers/NotificationController.html":{},"classes/NotificationNoExistsException.html":{},"classes/OrganizationAlreadyExistsException.html":{},"controllers/OrganizationController.html":{},"classes/OrganizationNoExistsException.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"controllers/PaymentMethodController.html":{},"classes/PaymentMethodNoExistsException.html":{},"guards/RolesGuard.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"controllers/UsersController.html":{}}}],["httpstatus",{"_index":58,"title":{},"body":{"controllers/ApiController.html":{},"controllers/CategoriesController.html":{},"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/DefaultController.html":{},"injectables/JwtAuthGuard.html":{},"classes/NotificationAlreadyExistsException.html":{},"controllers/NotificationController.html":{},"classes/NotificationNoExistsException.html":{},"classes/OrganizationAlreadyExistsException.html":{},"controllers/OrganizationController.html":{},"classes/OrganizationNoExistsException.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"controllers/PaymentMethodController.html":{},"classes/PaymentMethodNoExistsException.html":{},"guards/RolesGuard.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"controllers/UsersController.html":{}}}],["httpstatus.conflict",{"_index":437,"title":{},"body":{"controllers/CategoriesController.html":{},"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/NotificationAlreadyExistsException.html":{},"controllers/NotificationController.html":{},"classes/NotificationNoExistsException.html":{},"classes/OrganizationAlreadyExistsException.html":{},"controllers/OrganizationController.html":{},"classes/OrganizationNoExistsException.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"controllers/PaymentMethodController.html":{},"classes/PaymentMethodNoExistsException.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"controllers/UsersController.html":{}}}],["httpstatus.created",{"_index":436,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.internal_server_error",{"_index":88,"title":{},"body":{"controllers/ApiController.html":{},"controllers/CategoriesController.html":{},"classes/DefaultController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.not_found",{"_index":89,"title":{},"body":{"controllers/ApiController.html":{},"controllers/CategoriesController.html":{},"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/NotificationAlreadyExistsException.html":{},"controllers/NotificationController.html":{},"classes/NotificationNoExistsException.html":{},"classes/OrganizationAlreadyExistsException.html":{},"controllers/OrganizationController.html":{},"classes/OrganizationNoExistsException.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"controllers/PaymentMethodController.html":{},"classes/PaymentMethodNoExistsException.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"controllers/UsersController.html":{}}}],["httpstatus.ok",{"_index":87,"title":{},"body":{"controllers/ApiController.html":{},"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.unauthorized",{"_index":779,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["i'})@apiresponse({type",{"_index":1539,"title":{},"body":{"controllers/UsersController.html":{}}}],["id",{"_index":1012,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["identifier",{"_index":1769,"title":{},"body":{"coverage.html":{}}}],["idx_3c3ab3f49a87e6ddb607f3c494",{"_index":835,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["idx_6a9fb5a4565856faa6d5ff4b7c",{"_index":845,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["idx_7b278a9b9b557617ba0f6a47cf",{"_index":846,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["idx_81677030e50ff65528fc99fb52",{"_index":849,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["idx_a91581a3fd7391a8cf3365eeb2",{"_index":850,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["idx_cb171b2ca98556ca7bdf2f2c28",{"_index":892,"title":{},"body":{"classes/Migrations1719099417082.html":{}}}],["idx_cf5b6b34e888c0034e30210c86",{"_index":834,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["idx_db53dae4ddcc4a8f1f6cec7ccf",{"_index":891,"title":{},"body":{"classes/Migrations1719099417082.html":{}}}],["idx_ffc81a3b97dcbf8e320d5106c0",{"_index":836,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["ignoreexpiration",{"_index":793,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":497,"title":{},"body":{"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/Migrations1717483943918.html":{}}}],["implements",{"_index":803,"title":{},"body":{"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"classes/NotificationGateway.html":{},"guards/RolesGuard.html":{},"injectables/TypeOrmConfigService.html":{}}}],["import",{"_index":55,"title":{},"body":{"controllers/ApiController.html":{},"injectables/ApiKeyStrategy.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"modules/AppModule.html":{},"classes/ArrayGuidDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/DefaultController.html":{},"classes/DefaultService.html":{},"classes/DefaultWithoutSecurityController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"entities/Notification.html":{},"classes/NotificationAlreadyExistsException.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"modules/NotificationModule.html":{},"classes/NotificationNoExistsException.html":{},"injectables/NotificationService.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"classes/OrganizationAlreadyExistsException.html":{},"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"classes/OrganizationNoExistsException.html":{},"injectables/OrganizationService.html":{},"classes/PaginationDTO.html":{},"entities/PaymentMethod.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"controllers/PaymentMethodController.html":{},"modules/PaymentMethodModule.html":{},"classes/PaymentMethodNoExistsException.html":{},"injectables/PaymentMethodService.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/SqlReader.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdatePaymentMethodDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/UtilsModule.html":{},"injectables/UtilsService.html":{},"classes/googleOAuthDTO.html":{}}}],["imports",{"_index":196,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/NotificationModule.html":{},"modules/OrganizationModule.html":{},"modules/PaymentMethodModule.html":{},"modules/UsersModule.html":{}}}],["in(categoriesids.map((category",{"_index":1631,"title":{},"body":{"injectables/UsersService.html":{}}}],["includetime",{"_index":1732,"title":{},"body":{"injectables/UtilsService.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/AddMessageDto.html":{},"controllers/ApiController.html":{},"injectables/ApiKeyStrategy.html":{},"injectables/ApiService.html":{},"classes/ArrayGuidDTO.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/DefaultController.html":{},"classes/DefaultService.html":{},"classes/DefaultWithoutSecurityController.html":{},"interfaces/JWTPayloadInterface.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"injectables/NotificationService.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"classes/PaginationDTO.html":{},"entities/PaymentMethod.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/SendNotificationsToUserDTO.html":{},"classes/SqlReader.html":{},"injectables/TypeOrmConfigService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"classes/googleOAuthDTO.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddMessageDto.html":{},"controllers/ApiController.html":{},"injectables/ApiKeyStrategy.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"modules/AppModule.html":{},"classes/ArrayGuidDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/DefaultController.html":{},"classes/DefaultService.html":{},"classes/DefaultWithoutSecurityController.html":{},"interfaces/JWTPayloadInterface.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"entities/Notification.html":{},"classes/NotificationAlreadyExistsException.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"modules/NotificationModule.html":{},"classes/NotificationNoExistsException.html":{},"injectables/NotificationService.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"classes/OrganizationAlreadyExistsException.html":{},"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"classes/OrganizationNoExistsException.html":{},"injectables/OrganizationService.html":{},"classes/PaginationDTO.html":{},"entities/PaymentMethod.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"controllers/PaymentMethodController.html":{},"modules/PaymentMethodModule.html":{},"classes/PaymentMethodNoExistsException.html":{},"injectables/PaymentMethodService.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/SendNotificationsToUserDTO.html":{},"classes/SqlReader.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdatePaymentMethodDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/UtilsModule.html":{},"injectables/UtilsService.html":{},"classes/googleOAuthDTO.html":{}}}],["inherited",{"_index":209,"title":{},"body":{"injectables/ApiService.html":{},"injectables/CategoriesService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":59,"title":{},"body":{"controllers/ApiController.html":{},"injectables/ApiKeyStrategy.html":{},"injectables/ApiService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"injectables/NotificationService.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"injectables/TypeOrmConfigService.html":{},"controllers/UsersController.html":{},"injectables/UtilsService.html":{}}}],["inject(apiservice",{"_index":76,"title":{},"body":{"controllers/ApiController.html":{}}}],["inject(authservice",{"_index":79,"title":{},"body":{"controllers/ApiController.html":{},"classes/NotificationGateway.html":{}}}],["inject(categoriesservice",{"_index":421,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["inject(configservice",{"_index":138,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"injectables/ApiService.html":{},"injectables/JwtStrategy.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UtilsService.html":{}}}],["inject(jwtservice",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["inject(notificationgateway",{"_index":1076,"title":{},"body":{"injectables/NotificationService.html":{}}}],["inject(notificationservice",{"_index":938,"title":{},"body":{"controllers/NotificationController.html":{}}}],["inject(organizationservice",{"_index":1137,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["inject(paymentmethodservice",{"_index":1210,"title":{},"body":{"controllers/PaymentMethodController.html":{}}}],["inject(reflector",{"_index":764,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["inject(usersservice",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{}}}],["injectable",{"_index":124,"title":{"injectables/ApiKeyStrategy.html":{},"injectables/ApiService.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{}},"body":{"injectables/ApiKeyStrategy.html":{},"injectables/ApiService.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"guards/RolesGuard.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{},"coverage.html":{}}}],["injectables",{"_index":126,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"injectables/ApiService.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{},"overview.html":{}}}],["injectrepository",{"_index":478,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(category",{"_index":475,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(notification",{"_index":1077,"title":{},"body":{"injectables/NotificationService.html":{}}}],["injectrepository(organization",{"_index":1158,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["injectrepository(paymentmethod",{"_index":1231,"title":{},"body":{"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(role",{"_index":1589,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(user",{"_index":477,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/UsersService.html":{}}}],["interface",{"_index":746,"title":{"interfaces/JWTPayloadInterface.html":{}},"body":{"interfaces/JWTPayloadInterface.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":747,"title":{},"body":{"interfaces/JWTPayloadInterface.html":{}}}],["ip",{"_index":160,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"injectables/JwtAuthGuard.html":{}}}],["is_public_key",{"_index":767,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isactive",{"_index":496,"title":{},"body":{"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"entities/Notification.html":{},"injectables/NotificationService.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"injectables/OrganizationService.html":{},"entities/PaymentMethod.html":{},"injectables/PaymentMethodService.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["isarray",{"_index":239,"title":{},"body":{"classes/ArrayGuidDTO.html":{},"classes/PaginationDTO.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{}}}],["isavailable",{"_index":634,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["isemail",{"_index":676,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/googleOAuthDTO.html":{}}}],["isenum",{"_index":677,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/googleOAuthDTO.html":{}}}],["isenum(roleenum",{"_index":683,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/googleOAuthDTO.html":{}}}],["isglobal",{"_index":227,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":240,"title":{},"body":{"classes/ArrayGuidDTO.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/PaginationDTO.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/googleOAuthDTO.html":{}}}],["isnull",{"_index":481,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["isnumber",{"_index":241,"title":{},"body":{"classes/ArrayGuidDTO.html":{},"classes/PaginationDTO.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{}}}],["isoptional",{"_index":242,"title":{},"body":{"classes/ArrayGuidDTO.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/PaginationDTO.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/googleOAuthDTO.html":{}}}],["isoptional()@isstring",{"_index":1349,"title":{},"body":{"classes/SearchUserPaginationDTO.html":{}}}],["isprofessional",{"_index":635,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["ispublic",{"_index":769,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":243,"title":{},"body":{"classes/ArrayGuidDTO.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/PaginationDTO.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/googleOAuthDTO.html":{}}}],["isvaliddate",{"_index":1725,"title":{},"body":{"injectables/UtilsService.html":{}}}],["isvaliddate(datestring",{"_index":1734,"title":{},"body":{"injectables/UtilsService.html":{}}}],["jobtype.trim",{"_index":1616,"title":{},"body":{"injectables/UsersService.html":{}}}],["joincolumn",{"_index":1486,"title":{},"body":{"entities/User.html":{}}}],["jointable",{"_index":1487,"title":{},"body":{"entities/User.html":{}}}],["json.parse(newuser.availability",{"_index":1701,"title":{},"body":{"injectables/UsersService.html":{}}}],["json.parse(newuser.certifications",{"_index":1703,"title":{},"body":{"injectables/UsersService.html":{}}}],["json.parse(newuser.previusworks",{"_index":1705,"title":{},"body":{"injectables/UsersService.html":{}}}],["json.parse(user.availability",{"_index":1603,"title":{},"body":{"injectables/UsersService.html":{}}}],["json.parse(user.certifications",{"_index":1605,"title":{},"body":{"injectables/UsersService.html":{}}}],["json.parse(user.previusworks",{"_index":1607,"title":{},"body":{"injectables/UsersService.html":{}}}],["json.stringify(files?.certifications?.map((certification",{"_index":1661,"title":{},"body":{"injectables/UsersService.html":{}}}],["json.stringify(files?.previusworks?.map((previuswork",{"_index":1663,"title":{},"body":{"injectables/UsersService.html":{}}}],["json.stringify(params.body.availability",{"_index":1666,"title":{},"body":{"injectables/UsersService.html":{}}}],["jwt",{"_index":782,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":732,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"classes/DefaultController.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":791,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":268,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":278,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayloadinterface",{"_index":313,"title":{"interfaces/JWTPayloadInterface.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JWTPayloadInterface.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":263,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtstrategy.name}[validate]:action",{"_index":796,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["kairos",{"_index":1858,"title":{},"body":{"index.html":{}}}],["key",{"_index":131,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{}}}],["key.strategy",{"_index":276,"title":{},"body":{"modules/AuthModule.html":{}}}],["key.strategy.ts",{"_index":128,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"coverage.html":{}}}],["key.strategy.ts:15",{"_index":139,"title":{},"body":{"injectables/ApiKeyStrategy.html":{}}}],["key.strategy.ts:16",{"_index":136,"title":{},"body":{"injectables/ApiKeyStrategy.html":{}}}],["key.strategy.ts:28",{"_index":143,"title":{},"body":{"injectables/ApiKeyStrategy.html":{}}}],["la",{"_index":1896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lastname",{"_index":117,"title":{},"body":{"controllers/ApiController.html":{},"classes/ArrayGuidDTO.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"injectables/OrganizationService.html":{},"classes/PaginationDTO.html":{},"injectables/PaymentMethodService.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["legend",{"_index":178,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/NotificationModule.html":{},"modules/OrganizationModule.html":{},"modules/PaymentMethodModule.html":{},"modules/UsersModule.html":{},"modules/UtilsModule.html":{},"overview.html":{}}}],["length",{"_index":569,"title":{},"body":{"entities/Category.html":{},"entities/Notification.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["license",{"_index":1870,"title":{},"body":{"properties.html":{}}}],["like(`%${params.query.category",{"_index":1634,"title":{},"body":{"injectables/UsersService.html":{}}}],["like(`%${params.query.description",{"_index":518,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["like(`%${params.query.document",{"_index":1625,"title":{},"body":{"injectables/UsersService.html":{}}}],["like(`%${params.query.email",{"_index":1624,"title":{},"body":{"injectables/UsersService.html":{}}}],["like(`%${params.query.lastname",{"_index":1623,"title":{},"body":{"injectables/UsersService.html":{}}}],["like(`%${params.query.name",{"_index":517,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["like(`%${params.query.username",{"_index":1626,"title":{},"body":{"injectables/UsersService.html":{}}}],["link",{"_index":612,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/Migrations1717483943918.html":{},"entities/Notification.html":{},"injectables/NotificationService.html":{}}}],["literal",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateUserDTO.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"injectables/NotificationService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["local",{"_index":1826,"title":{},"body":{"dependencies.html":{}}}],["logger",{"_index":133,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"injectables/ApiService.html":{},"injectables/CategoriesService.html":{},"classes/DefaultController.html":{},"classes/DefaultService.html":{},"classes/DefaultWithoutSecurityController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger('api",{"_index":762,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["logger(apikeystrategy.name",{"_index":142,"title":{},"body":{"injectables/ApiKeyStrategy.html":{}}}],["logger(jwtstrategy.name",{"_index":788,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["logger(this.object.name",{"_index":741,"title":{},"body":{"classes/DefaultController.html":{},"classes/DefaultService.html":{},"classes/DefaultWithoutSecurityController.html":{}}}],["login",{"_index":30,"title":{},"body":{"controllers/ApiController.html":{},"injectables/JwtAuthGuard.html":{}}}],["login(@body",{"_index":90,"title":{},"body":{"controllers/ApiController.html":{}}}],["login(body",{"_index":51,"title":{},"body":{"controllers/ApiController.html":{}}}],["logindto",{"_index":52,"title":{"classes/LoginDTO.html":{}},"body":{"controllers/ApiController.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"coverage.html":{},"classes/googleOAuthDTO.html":{}}}],["lts.1",{"_index":1821,"title":{},"body":{"dependencies.html":{}}}],["manytomany",{"_index":591,"title":{},"body":{"entities/Category.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"entities/User.html":{}}}],["manytomany(undefined",{"_index":584,"title":{},"body":{"entities/Category.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"entities/User.html":{}}}],["manytoone",{"_index":590,"title":{},"body":{"entities/Category.html":{},"entities/Notification.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"entities/User.html":{}}}],["manytoone(undefined",{"_index":557,"title":{},"body":{"entities/Category.html":{},"entities/Notification.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"entities/User.html":{}}}],["map",{"_index":966,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["map((jobtype",{"_index":1615,"title":{},"body":{"injectables/UsersService.html":{}}}],["map((paymentmethod",{"_index":1674,"title":{},"body":{"injectables/UsersService.html":{}}}],["map((query",{"_index":1397,"title":{},"body":{"classes/SqlReader.html":{}}}],["map(async",{"_index":1617,"title":{},"body":{"injectables/UsersService.html":{}}}],["mapadress",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["matching",{"_index":20,"title":{},"body":{"classes/AddMessageDto.html":{},"controllers/ApiController.html":{},"injectables/ApiKeyStrategy.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"modules/AppModule.html":{},"classes/ArrayGuidDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/DefaultController.html":{},"classes/DefaultService.html":{},"classes/DefaultWithoutSecurityController.html":{},"interfaces/JWTPayloadInterface.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"entities/Notification.html":{},"classes/NotificationAlreadyExistsException.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"modules/NotificationModule.html":{},"classes/NotificationNoExistsException.html":{},"injectables/NotificationService.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"classes/OrganizationAlreadyExistsException.html":{},"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"classes/OrganizationNoExistsException.html":{},"injectables/OrganizationService.html":{},"classes/PaginationDTO.html":{},"entities/PaymentMethod.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"controllers/PaymentMethodController.html":{},"modules/PaymentMethodModule.html":{},"classes/PaymentMethodNoExistsException.html":{},"injectables/PaymentMethodService.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/SendNotificationsToUserDTO.html":{},"classes/SqlReader.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdatePaymentMethodDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/UtilsModule.html":{},"injectables/UtilsService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"classes/googleOAuthDTO.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["maxcount",{"_index":1560,"title":{},"body":{"controllers/UsersController.html":{}}}],["maxfilesizevalidator",{"_index":397,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["maxlength",{"_index":604,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/googleOAuthDTO.html":{}}}],["maxlength(10",{"_index":680,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/googleOAuthDTO.html":{}}}],["maxlength(150",{"_index":682,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/googleOAuthDTO.html":{}}}],["maxlength(250",{"_index":608,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/googleOAuthDTO.html":{}}}],["maxlength(50",{"_index":607,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/googleOAuthDTO.html":{}}}],["maxlength(70",{"_index":679,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/googleOAuthDTO.html":{}}}],["maxsize",{"_index":441,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["mensaje",{"_index":1030,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["message",{"_index":109,"title":{},"body":{"controllers/ApiController.html":{},"injectables/ApiKeyStrategy.html":{},"classes/ArrayGuidDTO.html":{},"controllers/CategoriesController.html":{},"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"injectables/JwtAuthGuard.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"controllers/OrganizationController.html":{},"classes/PaginationDTO.html":{},"controllers/PaymentMethodController.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"guards/RolesGuard.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"controllers/UsersController.html":{}}}],["message.dto",{"_index":995,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["message.dto.ts",{"_index":7,"title":{},"body":{"classes/AddMessageDto.html":{},"coverage.html":{}}}],["message.dto.ts:2",{"_index":16,"title":{},"body":{"classes/AddMessageDto.html":{}}}],["message.dto.ts:3",{"_index":17,"title":{},"body":{"classes/AddMessageDto.html":{}}}],["messagebody",{"_index":990,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["message}${err",{"_index":776,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["metadata",{"_index":1831,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":161,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/UsersService.html":{}}}],["methods",{"_index":26,"title":{},"body":{"controllers/ApiController.html":{},"injectables/ApiService.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"injectables/NotificationService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"guards/RolesGuard.html":{},"classes/SqlReader.html":{},"injectables/TypeOrmConfigService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{}}}],["migrationinterface",{"_index":804,"title":{},"body":{"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{}}}],["migrations",{"_index":1885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrations/*.{ts,js",{"_index":1886,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrations/1717483943918",{"_index":801,"title":{},"body":{"classes/Migrations1717483943918.html":{},"coverage.html":{}}}],["migrations/1719099417082",{"_index":883,"title":{},"body":{"classes/Migrations1719099417082.html":{},"coverage.html":{}}}],["migrations1717483943918",{"_index":800,"title":{"classes/Migrations1717483943918.html":{}},"body":{"classes/Migrations1717483943918.html":{},"coverage.html":{}}}],["migrations1719099417082",{"_index":882,"title":{"classes/Migrations1719099417082.html":{}},"body":{"classes/Migrations1719099417082.html":{},"coverage.html":{}}}],["migrationstablename",{"_index":1887,"title":{},"body":{"miscellaneous/variables.html":{}}}],["minlength",{"_index":605,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/googleOAuthDTO.html":{}}}],["minlength(3",{"_index":606,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/googleOAuthDTO.html":{}}}],["minlength(7",{"_index":681,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/googleOAuthDTO.html":{}}}],["miscellaneous",{"_index":1841,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mm",{"_index":1756,"title":{},"body":{"injectables/UtilsService.html":{}}}],["moderator",{"_index":1848,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["module",{"_index":174,"title":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/NotificationModule.html":{},"modules/OrganizationModule.html":{},"modules/PaymentMethodModule.html":{},"modules/UsersModule.html":{},"modules/UtilsModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/NotificationModule.html":{},"modules/OrganizationModule.html":{},"modules/PaymentMethodModule.html":{},"modules/UsersModule.html":{},"modules/UtilsModule.html":{},"overview.html":{}}}],["modules",{"_index":176,"title":{"modules.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/NotificationModule.html":{},"modules/OrganizationModule.html":{},"modules/PaymentMethodModule.html":{},"modules/UsersModule.html":{},"modules/UtilsModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":1738,"title":{},"body":{"injectables/UtilsService.html":{},"dependencies.html":{}}}],["moment(datestring",{"_index":1754,"title":{},"body":{"injectables/UtilsService.html":{}}}],["month",{"_index":1748,"title":{},"body":{"injectables/UtilsService.html":{}}}],["multer",{"_index":1819,"title":{},"body":{"dependencies.html":{}}}],["multiplestatements",{"_index":1419,"title":{},"body":{"injectables/TypeOrmConfigService.html":{},"miscellaneous/variables.html":{}}}],["mysql",{"_index":1409,"title":{},"body":{"injectables/TypeOrmConfigService.html":{},"miscellaneous/variables.html":{}}}],["mysql2",{"_index":1822,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":48,"title":{},"body":{"controllers/ApiController.html":{},"classes/ArrayGuidDTO.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/DefaultController.html":{},"classes/DefaultService.html":{},"classes/DefaultWithoutSecurityController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"injectables/NotificationService.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"classes/PaginationDTO.html":{},"entities/PaymentMethod.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/SqlReader.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{},"classes/googleOAuthDTO.html":{}}}],["name'})@isoptional()@isstring",{"_index":1177,"title":{},"body":{"classes/PaginationDTO.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserPaginationDTO.html":{}}}],["namespace",{"_index":996,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["nestjs/common",{"_index":61,"title":{},"body":{"controllers/ApiController.html":{},"injectables/ApiKeyStrategy.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/DefaultController.html":{},"classes/DefaultService.html":{},"classes/DefaultWithoutSecurityController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/NotificationAlreadyExistsException.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"modules/NotificationModule.html":{},"classes/NotificationNoExistsException.html":{},"injectables/NotificationService.html":{},"classes/OrganizationAlreadyExistsException.html":{},"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"classes/OrganizationNoExistsException.html":{},"injectables/OrganizationService.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"controllers/PaymentMethodController.html":{},"modules/PaymentMethodModule.html":{},"classes/PaymentMethodNoExistsException.html":{},"injectables/PaymentMethodService.html":{},"guards/RolesGuard.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/UtilsModule.html":{},"injectables/UtilsService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":145,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"injectables/ApiService.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"injectables/JwtStrategy.html":{},"modules/NotificationModule.html":{},"modules/OrganizationModule.html":{},"modules/PaymentMethodModule.html":{},"injectables/TypeOrmConfigService.html":{},"modules/UsersModule.html":{},"injectables/UtilsService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":267,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":269,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1801,"title":{},"body":{"dependencies.html":{}}}],["nestjs/microservices",{"_index":1804,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":147,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":405,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":1806,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":65,"title":{},"body":{"controllers/ApiController.html":{},"classes/ArrayGuidDTO.html":{},"controllers/CategoriesController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/DefaultController.html":{},"classes/LoginDTO.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"classes/PaginationDTO.html":{},"controllers/PaymentMethodController.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdatePaymentMethodDto.html":{},"classes/UpdateUserDTO.html":{},"controllers/UsersController.html":{},"dependencies.html":{},"classes/googleOAuthDTO.html":{}}}],["nestjs/typeorm",{"_index":220,"title":{},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"modules/OrganizationModule.html":{},"injectables/OrganizationService.html":{},"modules/PaymentMethodModule.html":{},"injectables/PaymentMethodService.html":{},"injectables/TypeOrmConfigService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":992,"title":{},"body":{"classes/NotificationGateway.html":{},"dependencies.html":{}}}],["new",{"_index":108,"title":{},"body":{"controllers/ApiController.html":{},"injectables/ApiKeyStrategy.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/DefaultController.html":{},"classes/DefaultService.html":{},"classes/DefaultWithoutSecurityController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"injectables/NotificationService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newuser",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["newuser.availability",{"_index":1700,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser.certifications",{"_index":1702,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser.previusworks",{"_index":1704,"title":{},"body":{"injectables/UsersService.html":{}}}],["nombre",{"_index":1899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notificarion",{"_index":1046,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["notification",{"_index":838,"title":{"entities/Notification.html":{}},"body":{"classes/Migrations1717483943918.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"entities/NotificationType.html":{},"coverage.html":{}}}],["notification'})@apiresponse({type",{"_index":925,"title":{},"body":{"controllers/NotificationController.html":{}}}],["notification.controller",{"_index":1064,"title":{},"body":{"modules/NotificationModule.html":{}}}],["notification.description",{"_index":1096,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notification.dto",{"_index":934,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateNotificationDto.html":{}}}],["notification.dto.ts",{"_index":611,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["notification.dto.ts:11",{"_index":615,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["notification.dto.ts:13",{"_index":1304,"title":{},"body":{"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{}}}],["notification.dto.ts:15",{"_index":617,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["notification.dto.ts:17",{"_index":1307,"title":{},"body":{"classes/SearchNotificationPaginationDto.html":{}}}],["notification.dto.ts:18",{"_index":1303,"title":{},"body":{"classes/SearchNotificationDto.html":{}}}],["notification.dto.ts:19",{"_index":616,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["notification.dto.ts:22",{"_index":1306,"title":{},"body":{"classes/SearchNotificationPaginationDto.html":{}}}],["notification.dto.ts:23",{"_index":1301,"title":{},"body":{"classes/SearchNotificationDto.html":{}}}],["notification.dto.ts:27",{"_index":1312,"title":{},"body":{"classes/SearchNotificationPaginationDto.html":{}}}],["notification.dto.ts:28",{"_index":1305,"title":{},"body":{"classes/SearchNotificationDto.html":{}}}],["notification.dto.ts:32",{"_index":1308,"title":{},"body":{"classes/SearchNotificationPaginationDto.html":{}}}],["notification.dto.ts:36",{"_index":1311,"title":{},"body":{"classes/SearchNotificationPaginationDto.html":{}}}],["notification.dto.ts:41",{"_index":1309,"title":{},"body":{"classes/SearchNotificationPaginationDto.html":{}}}],["notification.dto.ts:46",{"_index":1310,"title":{},"body":{"classes/SearchNotificationPaginationDto.html":{}}}],["notification.dto.ts:7",{"_index":618,"title":{},"body":{"classes/CreateNotificationDto.html":{}}}],["notification.dto.ts:8",{"_index":1302,"title":{},"body":{"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{}}}],["notification.entity",{"_index":1108,"title":{},"body":{"entities/NotificationType.html":{}}}],["notification.exeptions",{"_index":1081,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notification.gateway",{"_index":1065,"title":{},"body":{"modules/NotificationModule.html":{},"injectables/NotificationService.html":{}}}],["notification.isactive",{"_index":1097,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notification.notificationtype",{"_index":1106,"title":{},"body":{"entities/NotificationType.html":{}}}],["notification.service",{"_index":933,"title":{},"body":{"controllers/NotificationController.html":{},"modules/NotificationModule.html":{}}}],["notificationalreadyexistsexception",{"_index":694,"title":{"classes/NotificationAlreadyExistsException.html":{}},"body":{"classes/CustomException.html":{},"classes/NotificationAlreadyExistsException.html":{},"classes/NotificationNoExistsException.html":{},"coverage.html":{}}}],["notificationcontroller",{"_index":916,"title":{"controllers/NotificationController.html":{}},"body":{"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"coverage.html":{}}}],["notificationcontroller.name",{"_index":946,"title":{},"body":{"controllers/NotificationController.html":{}}}],["notificationgateway",{"_index":953,"title":{"classes/NotificationGateway.html":{}},"body":{"classes/NotificationGateway.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"coverage.html":{},"overview.html":{}}}],["notificationmodule",{"_index":188,"title":{"modules/NotificationModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/NotificationModule.html":{},"modules.html":{},"overview.html":{}}}],["notificationnoexistsexception",{"_index":698,"title":{"classes/NotificationNoExistsException.html":{}},"body":{"classes/CustomException.html":{},"classes/NotificationAlreadyExistsException.html":{},"classes/NotificationNoExistsException.html":{},"injectables/NotificationService.html":{},"coverage.html":{}}}],["notificationrepository",{"_index":1068,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notifications",{"_index":940,"title":{},"body":{"controllers/NotificationController.html":{}}}],["notifications'})@apiresponse({type",{"_index":921,"title":{},"body":{"controllers/NotificationController.html":{}}}],["notificationservice",{"_index":932,"title":{"injectables/NotificationService.html":{}},"body":{"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"injectables/NotificationService.html":{},"coverage.html":{},"overview.html":{}}}],["notificationtype",{"_index":841,"title":{"entities/NotificationType.html":{}},"body":{"classes/Migrations1717483943918.html":{},"entities/Notification.html":{},"entities/NotificationType.html":{},"coverage.html":{}}}],["notificationtype.entity",{"_index":914,"title":{},"body":{"entities/Notification.html":{}}}],["notificationtype.notification",{"_index":909,"title":{},"body":{"entities/Notification.html":{}}}],["notificationtype\\`(\\`guid",{"_index":872,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["notificationtypeguid",{"_index":840,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["null",{"_index":169,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"injectables/AuthService.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"classes/NotificationGateway.html":{},"injectables/OrganizationService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["nullable",{"_index":559,"title":{},"body":{"entities/Category.html":{},"entities/Notification.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["number",{"_index":249,"title":{},"body":{"classes/ArrayGuidDTO.html":{},"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/LoginDTO.html":{},"entities/Notification.html":{},"classes/NotificationAlreadyExistsException.html":{},"classes/NotificationNoExistsException.html":{},"injectables/NotificationService.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"classes/OrganizationAlreadyExistsException.html":{},"classes/OrganizationNoExistsException.html":{},"injectables/OrganizationService.html":{},"classes/PaginationDTO.html":{},"entities/PaymentMethod.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"classes/PaymentMethodNoExistsException.html":{},"injectables/PaymentMethodService.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["number'})@isoptional",{"_index":657,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/SearchUserDTO.html":{}}}],["object",{"_index":725,"title":{},"body":{"classes/DefaultController.html":{},"classes/DefaultService.html":{},"classes/DefaultWithoutSecurityController.html":{}}}],["object.keys(params.query).length",{"_index":510,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["object.values(files).foreach((fileorfiles",{"_index":1910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["offset",{"_index":248,"title":{},"body":{"classes/ArrayGuidDTO.html":{},"injectables/CategoriesService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"classes/PaginationDTO.html":{},"injectables/PaymentMethodService.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["ok",{"_index":1043,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["ondelete",{"_index":560,"title":{},"body":{"entities/Category.html":{},"entities/Notification.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"entities/User.html":{}}}],["one",{"_index":389,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["onetomany",{"_index":592,"title":{},"body":{"entities/Category.html":{},"entities/NotificationType.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":1105,"title":{},"body":{"entities/NotificationType.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["ongatewayconnection",{"_index":955,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["ongatewaydisconnect",{"_index":956,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["onupdate",{"_index":562,"title":{},"body":{"entities/Category.html":{},"entities/Notification.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"entities/User.html":{}}}],["optional",{"_index":49,"title":{},"body":{"controllers/ApiController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/DefaultController.html":{},"classes/DefaultService.html":{},"classes/DefaultWithoutSecurityController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"injectables/NotificationService.html":{},"entities/Organization.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"classes/PaginationDTO.html":{},"entities/PaymentMethod.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"classes/ResposeDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/SqlReader.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{}}}],["order",{"_index":512,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["order[params.query.orderby",{"_index":515,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["orderby",{"_index":253,"title":{},"body":{"classes/ArrayGuidDTO.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/PaginationDTO.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/googleOAuthDTO.html":{}}}],["ordertype",{"_index":255,"title":{},"body":{"classes/ArrayGuidDTO.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/PaginationDTO.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/googleOAuthDTO.html":{}}}],["organization",{"_index":888,"title":{"entities/Organization.html":{}},"body":{"classes/Migrations1719099417082.html":{},"entities/Organization.html":{},"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"injectables/OrganizationService.html":{},"entities/User.html":{},"coverage.html":{}}}],["organization'})@apiresponse({type",{"_index":1125,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["organization.controller",{"_index":1149,"title":{},"body":{"modules/OrganizationModule.html":{}}}],["organization.description",{"_index":1171,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["organization.dto",{"_index":1133,"title":{},"body":{"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"classes/UpdateOrganizationDto.html":{}}}],["organization.dto.ts",{"_index":621,"title":{},"body":{"classes/CreateOrganizationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/UpdateOrganizationDto.html":{},"coverage.html":{}}}],["organization.dto.ts:10",{"_index":625,"title":{},"body":{"classes/CreateOrganizationDto.html":{}}}],["organization.dto.ts:13",{"_index":1317,"title":{},"body":{"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{}}}],["organization.dto.ts:15",{"_index":623,"title":{},"body":{"classes/CreateOrganizationDto.html":{}}}],["organization.dto.ts:17",{"_index":1320,"title":{},"body":{"classes/SearchOrganizationPaginationDto.html":{}}}],["organization.dto.ts:18",{"_index":1316,"title":{},"body":{"classes/SearchOrganizationDto.html":{}}}],["organization.dto.ts:19",{"_index":624,"title":{},"body":{"classes/CreateOrganizationDto.html":{}}}],["organization.dto.ts:22",{"_index":1319,"title":{},"body":{"classes/SearchOrganizationPaginationDto.html":{}}}],["organization.dto.ts:23",{"_index":1314,"title":{},"body":{"classes/SearchOrganizationDto.html":{}}}],["organization.dto.ts:27",{"_index":1325,"title":{},"body":{"classes/SearchOrganizationPaginationDto.html":{}}}],["organization.dto.ts:28",{"_index":1318,"title":{},"body":{"classes/SearchOrganizationDto.html":{}}}],["organization.dto.ts:32",{"_index":1321,"title":{},"body":{"classes/SearchOrganizationPaginationDto.html":{}}}],["organization.dto.ts:36",{"_index":1324,"title":{},"body":{"classes/SearchOrganizationPaginationDto.html":{}}}],["organization.dto.ts:41",{"_index":1322,"title":{},"body":{"classes/SearchOrganizationPaginationDto.html":{}}}],["organization.dto.ts:46",{"_index":1323,"title":{},"body":{"classes/SearchOrganizationPaginationDto.html":{}}}],["organization.dto.ts:8",{"_index":1315,"title":{},"body":{"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{}}}],["organization.exeptions",{"_index":1161,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["organization.isactive",{"_index":1172,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["organization.name",{"_index":1170,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["organization.service",{"_index":1132,"title":{},"body":{"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{}}}],["organization.ts",{"_index":884,"title":{},"body":{"classes/Migrations1719099417082.html":{},"coverage.html":{}}}],["organization.ts:17",{"_index":886,"title":{},"body":{"classes/Migrations1719099417082.html":{}}}],["organization.ts:5",{"_index":885,"title":{},"body":{"classes/Migrations1719099417082.html":{}}}],["organization.ts:7",{"_index":887,"title":{},"body":{"classes/Migrations1719099417082.html":{}}}],["organization.users",{"_index":1498,"title":{},"body":{"entities/User.html":{}}}],["organization.users)@jointable",{"_index":1466,"title":{},"body":{"entities/User.html":{}}}],["organization/entities/organization.entity",{"_index":1490,"title":{},"body":{"entities/User.html":{}}}],["organization/organization.module",{"_index":204,"title":{},"body":{"modules/ApiModule.html":{}}}],["organization\\`(\\`guid",{"_index":898,"title":{},"body":{"classes/Migrations1719099417082.html":{}}}],["organizationalreadyexistsexception",{"_index":702,"title":{"classes/OrganizationAlreadyExistsException.html":{}},"body":{"classes/CustomException-1.html":{},"classes/OrganizationAlreadyExistsException.html":{},"classes/OrganizationNoExistsException.html":{},"coverage.html":{}}}],["organizationcontroller",{"_index":1123,"title":{"controllers/OrganizationController.html":{}},"body":{"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"coverage.html":{}}}],["organizationcontroller.name",{"_index":1140,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["organizationguid",{"_index":890,"title":{},"body":{"classes/Migrations1719099417082.html":{}}}],["organizationmodule",{"_index":189,"title":{"modules/OrganizationModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/OrganizationModule.html":{},"modules.html":{},"overview.html":{}}}],["organizationnoexistsexception",{"_index":704,"title":{"classes/OrganizationNoExistsException.html":{}},"body":{"classes/CustomException-1.html":{},"classes/OrganizationAlreadyExistsException.html":{},"classes/OrganizationNoExistsException.html":{},"injectables/OrganizationService.html":{},"coverage.html":{}}}],["organizationrepository",{"_index":1152,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["organizationservice",{"_index":1131,"title":{"injectables/OrganizationService.html":{}},"body":{"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"injectables/OrganizationService.html":{},"coverage.html":{},"overview.html":{}}}],["origin",{"_index":998,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["original",{"_index":1900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["originalname",{"_index":1901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["originalname.at",{"_index":1903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["originalurl",{"_index":162,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"injectables/JwtAuthGuard.html":{}}}],["originalurl.replace(/\\//g",{"_index":170,"title":{},"body":{"injectables/ApiKeyStrategy.html":{}}}],["out",{"_index":194,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/NotificationModule.html":{},"modules/OrganizationModule.html":{},"modules/PaymentMethodModule.html":{},"modules/UsersModule.html":{},"modules/UtilsModule.html":{},"overview.html":{}}}],["overview",{"_index":1863,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1797,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pagesize",{"_index":251,"title":{},"body":{"classes/ArrayGuidDTO.html":{},"injectables/CategoriesService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"classes/PaginationDTO.html":{},"injectables/PaymentMethodService.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["pagination",{"_index":488,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"coverage.html":{}}}],["paginationdto",{"_index":246,"title":{"classes/PaginationDTO.html":{}},"body":{"classes/ArrayGuidDTO.html":{},"classes/PaginationDTO.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"coverage.html":{}}}],["para",{"_index":1039,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["param",{"_index":398,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["param('guid",{"_index":448,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":47,"title":{},"body":{"controllers/ApiController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/DefaultController.html":{},"classes/DefaultService.html":{},"classes/DefaultWithoutSecurityController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"injectables/NotificationService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"guards/RolesGuard.html":{},"classes/SqlReader.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{}}}],["params",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["params.body.address",{"_index":1652,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.body.backgroundcheckdate",{"_index":1659,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.body.backgroundcheckexpirationdate",{"_index":1660,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.body.birthdate",{"_index":1651,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.body.category",{"_index":1643,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.body.category.length",{"_index":1644,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.body.description",{"_index":527,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/UsersService.html":{}}}],["params.body.document",{"_index":1649,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.body.email",{"_index":1648,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.body.googleid",{"_index":1650,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.body.isactive",{"_index":529,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["params.body.isavailable",{"_index":1665,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.body.isprofessional",{"_index":1672,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.body.lastname",{"_index":1647,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.body.link",{"_index":1093,"title":{},"body":{"injectables/NotificationService.html":{}}}],["params.body.mapadress",{"_index":1653,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.body.name",{"_index":526,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["params.body.password",{"_index":1695,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.body.paymentmethods",{"_index":1667,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.body.paymentmethods.length",{"_index":1673,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.body.phone",{"_index":1654,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.body.roleguid",{"_index":1645,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.body.title",{"_index":1092,"title":{},"body":{"injectables/NotificationService.html":{}}}],["params.body.username",{"_index":1640,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.createdbyguid",{"_index":530,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["params.deletedbyguid",{"_index":543,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["params.email",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["params.googleid",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{}}}],["params.guid",{"_index":532,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["params.lastname",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["params.name",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["params.query.category",{"_index":1633,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.query.categoryid",{"_index":1610,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.query.categoryid.length",{"_index":1614,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.query.createdby",{"_index":1089,"title":{},"body":{"injectables/NotificationService.html":{}}}],["params.query.description",{"_index":505,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["params.query.document",{"_index":1601,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.query.email",{"_index":1600,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.query.googleid",{"_index":1599,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.query.guid",{"_index":502,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["params.query.isactive",{"_index":504,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["params.query.lastname",{"_index":1622,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.query.mapadress",{"_index":1627,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.query.name",{"_index":503,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["params.query.offset",{"_index":509,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["params.query.orderby",{"_index":513,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["params.query.ordertype",{"_index":514,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["params.query.pagesize",{"_index":520,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["params.query.pagesize?.tostring",{"_index":511,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["params.query.paymentmethod",{"_index":1635,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.query.phone",{"_index":1628,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.query.roleguid",{"_index":1629,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.query.username",{"_index":1598,"title":{},"body":{"injectables/UsersService.html":{}}}],["params.updatedbyguid",{"_index":539,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/UsersService.html":{}}}],["params.user",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["params.user.guid",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["params.user.role.guid",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["params.user.username",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["params.username",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["params.withpassword",{"_index":1597,"title":{},"body":{"injectables/UsersService.html":{}}}],["parsefilepipe",{"_index":399,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["parseint(params.query.offset",{"_index":1087,"title":{},"body":{"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["parseint(params.query.pagesize",{"_index":1086,"title":{},"body":{"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["parsesqlstring",{"_index":1381,"title":{},"body":{"classes/SqlReader.html":{}}}],["parsesqlstring(sqlstring",{"_index":1384,"title":{},"body":{"classes/SqlReader.html":{}}}],["partialtype",{"_index":675,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdatePaymentMethodDto.html":{},"classes/UpdateUserDTO.html":{},"classes/googleOAuthDTO.html":{}}}],["partialtype(createcategorydto",{"_index":1422,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["partialtype(createnotificationdto",{"_index":1424,"title":{},"body":{"classes/UpdateNotificationDto.html":{}}}],["partialtype(createorganizationdto",{"_index":1426,"title":{},"body":{"classes/UpdateOrganizationDto.html":{}}}],["partialtype(createpaymentmethoddto",{"_index":1428,"title":{},"body":{"classes/UpdatePaymentMethodDto.html":{}}}],["partialtype(createuserdto",{"_index":685,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/googleOAuthDTO.html":{}}}],["passport",{"_index":151,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":270,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":146,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":129,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["password",{"_index":98,"title":{},"body":{"controllers/ApiController.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/CreateUserDTO.html":{},"classes/CustomException-3.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":400,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["patch(':guid",{"_index":447,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["patch(':guid')@auth(roleenum.super",{"_index":393,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["path",{"_index":1828,"title":{},"body":{"dependencies.html":{}}}],["payload",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/NotificationGateway.html":{}}}],["payload.guid",{"_index":795,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["paymentmethod",{"_index":688,"title":{"entities/PaymentMethod.html":{}},"body":{"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"entities/PaymentMethod.html":{},"controllers/PaymentMethodController.html":{},"modules/PaymentMethodModule.html":{},"injectables/PaymentMethodService.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/googleOAuthDTO.html":{}}}],["paymentmethod'})@apiresponse({type",{"_index":1198,"title":{},"body":{"controllers/PaymentMethodController.html":{}}}],["paymentmethod.controller",{"_index":1222,"title":{},"body":{"modules/PaymentMethodModule.html":{}}}],["paymentmethod.dto",{"_index":1206,"title":{},"body":{"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"classes/UpdatePaymentMethodDto.html":{}}}],["paymentmethod.dto.ts",{"_index":628,"title":{},"body":{"classes/CreatePaymentMethodDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/UpdatePaymentMethodDto.html":{},"coverage.html":{}}}],["paymentmethod.dto.ts:10",{"_index":630,"title":{},"body":{"classes/CreatePaymentMethodDto.html":{}}}],["paymentmethod.dto.ts:13",{"_index":1330,"title":{},"body":{"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{}}}],["paymentmethod.dto.ts:14",{"_index":629,"title":{},"body":{"classes/CreatePaymentMethodDto.html":{}}}],["paymentmethod.dto.ts:17",{"_index":1333,"title":{},"body":{"classes/SearchPaymentMethodPaginationDto.html":{}}}],["paymentmethod.dto.ts:18",{"_index":1329,"title":{},"body":{"classes/SearchPaymentMethodDto.html":{}}}],["paymentmethod.dto.ts:22",{"_index":1332,"title":{},"body":{"classes/SearchPaymentMethodPaginationDto.html":{}}}],["paymentmethod.dto.ts:23",{"_index":1327,"title":{},"body":{"classes/SearchPaymentMethodDto.html":{}}}],["paymentmethod.dto.ts:27",{"_index":1338,"title":{},"body":{"classes/SearchPaymentMethodPaginationDto.html":{}}}],["paymentmethod.dto.ts:28",{"_index":1331,"title":{},"body":{"classes/SearchPaymentMethodDto.html":{}}}],["paymentmethod.dto.ts:32",{"_index":1334,"title":{},"body":{"classes/SearchPaymentMethodPaginationDto.html":{}}}],["paymentmethod.dto.ts:36",{"_index":1337,"title":{},"body":{"classes/SearchPaymentMethodPaginationDto.html":{}}}],["paymentmethod.dto.ts:41",{"_index":1335,"title":{},"body":{"classes/SearchPaymentMethodPaginationDto.html":{}}}],["paymentmethod.dto.ts:46",{"_index":1336,"title":{},"body":{"classes/SearchPaymentMethodPaginationDto.html":{}}}],["paymentmethod.dto.ts:8",{"_index":1328,"title":{},"body":{"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{}}}],["paymentmethod.exeptions",{"_index":1234,"title":{},"body":{"injectables/PaymentMethodService.html":{}}}],["paymentmethod.isactive",{"_index":1244,"title":{},"body":{"injectables/PaymentMethodService.html":{}}}],["paymentmethod.name",{"_index":1243,"title":{},"body":{"injectables/PaymentMethodService.html":{}}}],["paymentmethod.service",{"_index":1205,"title":{},"body":{"controllers/PaymentMethodController.html":{},"modules/PaymentMethodModule.html":{}}}],["paymentmethod.trim",{"_index":1675,"title":{},"body":{"injectables/UsersService.html":{}}}],["paymentmethod.users",{"_index":1497,"title":{},"body":{"entities/User.html":{}}}],["paymentmethod.users)@jointable",{"_index":1469,"title":{},"body":{"entities/User.html":{}}}],["paymentmethod/entities/paymentmethod.entity",{"_index":1488,"title":{},"body":{"entities/User.html":{}}}],["paymentmethod\\`(\\`guid",{"_index":879,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["paymentmethodalreadyexistsexception",{"_index":708,"title":{"classes/PaymentMethodAlreadyExistsException.html":{}},"body":{"classes/CustomException-2.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"classes/PaymentMethodNoExistsException.html":{},"coverage.html":{}}}],["paymentmethodcontroller",{"_index":1196,"title":{"controllers/PaymentMethodController.html":{}},"body":{"controllers/PaymentMethodController.html":{},"modules/PaymentMethodModule.html":{},"coverage.html":{}}}],["paymentmethodcontroller.name",{"_index":1213,"title":{},"body":{"controllers/PaymentMethodController.html":{}}}],["paymentmethodguid",{"_index":848,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["paymentmethodid",{"_index":1676,"title":{},"body":{"injectables/UsersService.html":{}}}],["paymentmethodmodule",{"_index":190,"title":{"modules/PaymentMethodModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/PaymentMethodModule.html":{},"modules.html":{},"overview.html":{}}}],["paymentmethodnoexistsexception",{"_index":710,"title":{"classes/PaymentMethodNoExistsException.html":{}},"body":{"classes/CustomException-2.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"classes/PaymentMethodNoExistsException.html":{},"injectables/PaymentMethodService.html":{},"coverage.html":{}}}],["paymentmethodrepository",{"_index":1225,"title":{},"body":{"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["paymentmethods",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["paymentmethodservice",{"_index":1204,"title":{"injectables/PaymentMethodService.html":{}},"body":{"controllers/PaymentMethodController.html":{},"modules/PaymentMethodModule.html":{},"injectables/PaymentMethodService.html":{},"coverage.html":{},"overview.html":{}}}],["permission",{"_index":1284,"title":{},"body":{"guards/RolesGuard.html":{}}}],["phone",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["png|jpeg|jpg",{"_index":440,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["port",{"_index":1412,"title":{},"body":{"injectables/TypeOrmConfigService.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":60,"title":{},"body":{"controllers/ApiController.html":{},"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["post('googleoauth",{"_index":113,"title":{},"body":{"controllers/ApiController.html":{}}}],["post('googleoauth')@httpcode(httpstatus.ok)@apiresponse({type",{"_index":40,"title":{},"body":{"controllers/ApiController.html":{}}}],["post('login",{"_index":85,"title":{},"body":{"controllers/ApiController.html":{}}}],["post('login')@httpcode(httpstatus.ok)@apiresponse({type",{"_index":53,"title":{},"body":{"controllers/ApiController.html":{}}}],["post('signup",{"_index":1562,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('signup')@public()@httpcode(httpstatus.created)@apioperation({summary",{"_index":1532,"title":{},"body":{"controllers/UsersController.html":{}}}],["post()@auth(roleenum.super",{"_index":378,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["prefix",{"_index":155,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["previuswork.filename",{"_index":1664,"title":{},"body":{"injectables/UsersService.html":{}}}],["previusworks",{"_index":830,"title":{},"body":{"classes/Migrations1717483943918.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["primary",{"_index":821,"title":{},"body":{"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{}}}],["primarycolumn",{"_index":1269,"title":{},"body":{"entities/Role.html":{}}}],["primarycolumn({type",{"_index":1262,"title":{},"body":{"entities/Role.html":{}}}],["primarygeneratedcolumn",{"_index":588,"title":{},"body":{"entities/Category.html":{},"entities/Notification.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":572,"title":{},"body":{"entities/Category.html":{},"entities/Notification.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"entities/User.html":{}}}],["private",{"_index":77,"title":{},"body":{"controllers/ApiController.html":{},"injectables/ApiKeyStrategy.html":{},"injectables/ApiService.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"injectables/TypeOrmConfigService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{}}}],["profileimage",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["promise",{"_index":50,"title":{},"body":{"controllers/ApiController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/JwtStrategy.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"injectables/NotificationService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":1611,"title":{},"body":{"injectables/UsersService.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"classes/AddMessageDto.html":{},"injectables/ApiKeyStrategy.html":{},"injectables/ApiService.html":{},"classes/ArrayGuidDTO.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/DefaultController.html":{},"classes/DefaultService.html":{},"classes/DefaultWithoutSecurityController.html":{},"interfaces/JWTPayloadInterface.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"entities/Notification.html":{},"classes/NotificationGateway.html":{},"injectables/NotificationService.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"injectables/OrganizationService.html":{},"classes/PaginationDTO.html":{},"entities/PaymentMethod.html":{},"injectables/PaymentMethodService.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"entities/Role.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/SendNotificationsToUserDTO.html":{},"injectables/TypeOrmConfigService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{},"classes/googleOAuthDTO.html":{},"properties.html":{}}}],["provide",{"_index":285,"title":{},"body":{"modules/AuthModule.html":{}}}],["provided",{"_index":1001,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["provider",{"_index":1525,"title":{},"body":{"controllers/UsersController.html":{}}}],["providers",{"_index":181,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/NotificationModule.html":{},"modules/OrganizationModule.html":{},"modules/PaymentMethodModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"modules/UtilsModule.html":{},"overview.html":{}}}],["providers'})@apiresponse({type",{"_index":1513,"title":{},"body":{"controllers/UsersController.html":{}}}],["public",{"_index":134,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"injectables/ApiService.html":{},"injectables/CategoriesService.html":{},"classes/DefaultController.html":{},"classes/DefaultService.html":{},"classes/DefaultWithoutSecurityController.html":{},"injectables/JwtStrategy.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/TypeOrmConfigService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["que",{"_index":1036,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["query",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["query.createdby",{"_index":944,"title":{},"body":{"controllers/NotificationController.html":{}}}],["query.isprofessional",{"_index":1552,"title":{},"body":{"controllers/UsersController.html":{}}}],["query.offset",{"_index":941,"title":{},"body":{"controllers/NotificationController.html":{},"controllers/UsersController.html":{}}}],["query.pagesize",{"_index":942,"title":{},"body":{"controllers/NotificationController.html":{},"controllers/UsersController.html":{}}}],["query.trim",{"_index":1398,"title":{},"body":{"classes/SqlReader.html":{}}}],["query?.length",{"_index":1400,"title":{},"body":{"classes/SqlReader.html":{}}}],["queryrunner",{"_index":809,"title":{},"body":{"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{}}}],["queryrunner.query(`alter",{"_index":851,"title":{},"body":{"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{}}}],["queryrunner.query(`create",{"_index":813,"title":{},"body":{"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{}}}],["queryrunner.query(`drop",{"_index":881,"title":{},"body":{"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{}}}],["r01",{"_index":1845,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["r02",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["r03",{"_index":1847,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["r04",{"_index":1849,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["readonly",{"_index":78,"title":{},"body":{"controllers/ApiController.html":{},"injectables/ApiKeyStrategy.html":{},"injectables/ApiService.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"injectables/TypeOrmConfigService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{}}}],["readsqlfile",{"_index":1382,"title":{},"body":{"classes/SqlReader.html":{}}}],["readsqlfile(filepath",{"_index":1387,"title":{},"body":{"classes/SqlReader.html":{}}}],["recieve",{"_index":721,"title":{},"body":{"classes/CustomException-3.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{}}}],["recipient",{"_index":1375,"title":{},"body":{"classes/SendNotificationsToUserDTO.html":{}}}],["referencedcolumnname",{"_index":1446,"title":{},"body":{"entities/User.html":{}}}],["references",{"_index":856,"title":{},"body":{"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{}}}],["reflect",{"_index":1830,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":752,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/RolesGuard.html":{}}}],["relations",{"_index":499,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["replace",{"_index":1391,"title":{},"body":{"classes/SqlReader.html":{}}}],["replace(/\\/\\*.*\\*\\//g",{"_index":1394,"title":{},"body":{"classes/SqlReader.html":{}}}],["replace(/\\r?\\n|\\r/g",{"_index":1393,"title":{},"body":{"classes/SqlReader.html":{}}}],["replace(/\\s\\s+/g",{"_index":1395,"title":{},"body":{"classes/SqlReader.html":{}}}],["repository",{"_index":474,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["req",{"_index":401,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["req.user",{"_index":1281,"title":{},"body":{"guards/RolesGuard.html":{}}}],["request",{"_index":148,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"controllers/CategoriesController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["request.get('user",{"_index":164,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"injectables/JwtAuthGuard.html":{}}}],["request.user.guid",{"_index":446,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["required",{"_index":234,"title":{},"body":{"classes/ArrayGuidDTO.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/PaginationDTO.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/googleOAuthDTO.html":{}}}],["requiredroles",{"_index":1278,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":1283,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reset",{"_index":193,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/NotificationModule.html":{},"modules/OrganizationModule.html":{},"modules/PaymentMethodModule.html":{},"modules/UsersModule.html":{},"modules/UtilsModule.html":{},"overview.html":{}}}],["response",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["resposedto",{"_index":44,"title":{"classes/ResposeDTO.html":{}},"body":{"controllers/ApiController.html":{},"classes/ArrayGuidDTO.html":{},"controllers/CategoriesController.html":{},"classes/DefaultController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"classes/PaginationDTO.html":{},"controllers/PaymentMethodController.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["resposeresultspaginationdto",{"_index":257,"title":{"classes/ResposeResultsPaginationDTO.html":{}},"body":{"classes/ArrayGuidDTO.html":{},"injectables/CategoriesService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"classes/PaginationDTO.html":{},"injectables/PaymentMethodService.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["resposesuccessdatadto",{"_index":41,"title":{"classes/ResposeSuccessDataDTO.html":{}},"body":{"controllers/ApiController.html":{},"classes/ArrayGuidDTO.html":{},"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"classes/PaginationDTO.html":{},"controllers/PaymentMethodController.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["resposesuccesspaginationdto",{"_index":259,"title":{"classes/ResposeSuccessPaginationDTO.html":{}},"body":{"classes/ArrayGuidDTO.html":{},"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"classes/PaginationDTO.html":{},"controllers/PaymentMethodController.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["results",{"_index":19,"title":{},"body":{"classes/AddMessageDto.html":{},"controllers/ApiController.html":{},"injectables/ApiKeyStrategy.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"modules/AppModule.html":{},"classes/ArrayGuidDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/DefaultController.html":{},"classes/DefaultService.html":{},"classes/DefaultWithoutSecurityController.html":{},"interfaces/JWTPayloadInterface.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"entities/Notification.html":{},"classes/NotificationAlreadyExistsException.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"modules/NotificationModule.html":{},"classes/NotificationNoExistsException.html":{},"injectables/NotificationService.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"classes/OrganizationAlreadyExistsException.html":{},"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"classes/OrganizationNoExistsException.html":{},"injectables/OrganizationService.html":{},"classes/PaginationDTO.html":{},"entities/PaymentMethod.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"controllers/PaymentMethodController.html":{},"modules/PaymentMethodModule.html":{},"classes/PaymentMethodNoExistsException.html":{},"injectables/PaymentMethodService.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/SendNotificationsToUserDTO.html":{},"classes/SqlReader.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdatePaymentMethodDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/UtilsModule.html":{},"injectables/UtilsService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"classes/googleOAuthDTO.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":83,"title":{},"body":{"controllers/ApiController.html":{},"injectables/ApiKeyStrategy.html":{},"injectables/ApiService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"injectables/NotificationService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"guards/RolesGuard.html":{},"classes/SqlReader.html":{},"injectables/TypeOrmConfigService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":37,"title":{},"body":{"controllers/ApiController.html":{},"injectables/ApiService.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"injectables/NotificationService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"guards/RolesGuard.html":{},"classes/SqlReader.html":{},"injectables/TypeOrmConfigService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{}}}],["role",{"_index":357,"title":{"entities/Role.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JWTPayloadInterface.html":{},"classes/Migrations1717483943918.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["role.users",{"_index":1474,"title":{},"body":{"entities/User.html":{}}}],["roleenum",{"_index":410,"title":{},"body":{"controllers/CategoriesController.html":{},"classes/CreateUserDTO.html":{},"classes/DefaultController.html":{},"classes/LoginDTO.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"guards/RolesGuard.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"classes/googleOAuthDTO.html":{},"miscellaneous/variables.html":{}}}],["roleenum.client",{"_index":920,"title":{},"body":{"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["roleenum.moderator",{"_index":431,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["roleenum.moderator)@httpcode(httpstatus.created)@apioperation({summary",{"_index":924,"title":{},"body":{"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["roleenum.moderator)@httpcode(httpstatus.ok)@apioperation({summary",{"_index":385,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["roleenum.moderator)@useinterceptors(undefined)@httpcode(httpstatus.created)@apioperation({summary",{"_index":379,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["roleenum.serviceprovier",{"_index":919,"title":{},"body":{"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["roleguid",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"classes/googleOAuthDTO.html":{}}}],["roles",{"_index":729,"title":{},"body":{"classes/DefaultController.html":{},"classes/Migrations1717483943918.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(...roles",{"_index":737,"title":{},"body":{"classes/DefaultController.html":{},"miscellaneous/variables.html":{}}}],["roles/decorators/public.decorator",{"_index":768,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/UsersController.html":{}}}],["roles/decorators/roles.decorator",{"_index":730,"title":{},"body":{"classes/DefaultController.html":{},"guards/RolesGuard.html":{}}}],["roles/role.enum",{"_index":411,"title":{},"body":{"controllers/CategoriesController.html":{},"classes/DefaultController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"guards/RolesGuard.html":{}}}],["roles/roles.entity",{"_index":1489,"title":{},"body":{"entities/User.html":{}}}],["roles\\`(\\`guid",{"_index":864,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["roles_key",{"_index":1277,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":273,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AuthModule.html":{},"classes/DefaultController.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rxjs",{"_index":1833,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":1594,"title":{},"body":{"injectables/UsersService.html":{}}}],["savefile",{"_index":479,"title":{},"body":{"injectables/CategoriesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["savefile(file",{"_index":524,"title":{},"body":{"injectables/CategoriesService.html":{},"miscellaneous/variables.html":{}}}],["savefile(fileorfiles",{"_index":1914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["savefiles",{"_index":1591,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["savefiles(files",{"_index":1638,"title":{},"body":{"injectables/UsersService.html":{}}}],["searchcategorydto",{"_index":485,"title":{"classes/SearchCategoryDto.html":{}},"body":{"injectables/CategoriesService.html":{},"classes/SearchCategoryDto.html":{},"coverage.html":{}}}],["searchcategorypaginationdto",{"_index":487,"title":{"classes/SearchCategoryPaginationDto.html":{}},"body":{"injectables/CategoriesService.html":{},"classes/SearchCategoryPaginationDto.html":{},"coverage.html":{}}}],["searchnotificationdto",{"_index":1079,"title":{"classes/SearchNotificationDto.html":{}},"body":{"injectables/NotificationService.html":{},"classes/SearchNotificationDto.html":{},"coverage.html":{}}}],["searchnotificationpaginationdto",{"_index":1080,"title":{"classes/SearchNotificationPaginationDto.html":{}},"body":{"injectables/NotificationService.html":{},"classes/SearchNotificationPaginationDto.html":{},"coverage.html":{}}}],["searchorganizationdto",{"_index":1159,"title":{"classes/SearchOrganizationDto.html":{}},"body":{"injectables/OrganizationService.html":{},"classes/SearchOrganizationDto.html":{},"coverage.html":{}}}],["searchorganizationpaginationdto",{"_index":1160,"title":{"classes/SearchOrganizationPaginationDto.html":{}},"body":{"injectables/OrganizationService.html":{},"classes/SearchOrganizationPaginationDto.html":{},"coverage.html":{}}}],["searchpaymentmethoddto",{"_index":1232,"title":{"classes/SearchPaymentMethodDto.html":{}},"body":{"injectables/PaymentMethodService.html":{},"classes/SearchPaymentMethodDto.html":{},"coverage.html":{}}}],["searchpaymentmethodpaginationdto",{"_index":1233,"title":{"classes/SearchPaymentMethodPaginationDto.html":{}},"body":{"injectables/PaymentMethodService.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"coverage.html":{}}}],["searchuserdto",{"_index":686,"title":{"classes/SearchUserDTO.html":{}},"body":{"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/googleOAuthDTO.html":{}}}],["searchuserpaginationdto",{"_index":687,"title":{"classes/SearchUserPaginationDTO.html":{}},"body":{"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/googleOAuthDTO.html":{}}}],["secret",{"_index":280,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":794,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["security.controller",{"_index":68,"title":{},"body":{"controllers/ApiController.html":{}}}],["security.controller.ts",{"_index":744,"title":{},"body":{"classes/DefaultWithoutSecurityController.html":{},"coverage.html":{}}}],["security.controller.ts:4",{"_index":745,"title":{},"body":{"classes/DefaultWithoutSecurityController.html":{}}}],["select",{"_index":493,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["sending",{"_index":1058,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["sendnotification",{"_index":963,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["sendnotification(message",{"_index":982,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["sendnotificationstouserdto",{"_index":1373,"title":{"classes/SendNotificationsToUserDTO.html":{}},"body":{"classes/SendNotificationsToUserDTO.html":{},"coverage.html":{}}}],["sendnotificationto",{"_index":964,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["sendnotificationto(destinatary",{"_index":985,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["server",{"_index":958,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["service",{"_index":1566,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["serviceprovier",{"_index":1846,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["servidor",{"_index":1020,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["setmetadata(is_public_key",{"_index":1915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(roles_key",{"_index":1916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signoptions",{"_index":282,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":1563,"title":{},"body":{"controllers/UsersController.html":{}}}],["signup'})@apiresponse({type",{"_index":1533,"title":{},"body":{"controllers/UsersController.html":{}}}],["singup",{"_index":1507,"title":{},"body":{"controllers/UsersController.html":{}}}],["singup(files",{"_index":1531,"title":{},"body":{"controllers/UsersController.html":{}}}],["skip",{"_index":521,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["socket",{"_index":971,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["socket.io",{"_index":993,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddMessageDto.html":{},"controllers/ApiController.html":{},"injectables/ApiKeyStrategy.html":{},"modules/ApiModule.html":{},"injectables/ApiService.html":{},"modules/AppModule.html":{},"classes/ArrayGuidDTO.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/DefaultController.html":{},"classes/DefaultService.html":{},"classes/DefaultWithoutSecurityController.html":{},"interfaces/JWTPayloadInterface.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"entities/Notification.html":{},"classes/NotificationAlreadyExistsException.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"modules/NotificationModule.html":{},"classes/NotificationNoExistsException.html":{},"injectables/NotificationService.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"classes/OrganizationAlreadyExistsException.html":{},"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"classes/OrganizationNoExistsException.html":{},"injectables/OrganizationService.html":{},"classes/PaginationDTO.html":{},"entities/PaymentMethod.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"controllers/PaymentMethodController.html":{},"modules/PaymentMethodModule.html":{},"classes/PaymentMethodNoExistsException.html":{},"injectables/PaymentMethodService.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/SendNotificationsToUserDTO.html":{},"classes/SqlReader.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateNotificationDto.html":{},"classes/UpdateOrganizationDto.html":{},"classes/UpdatePaymentMethodDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/UtilsModule.html":{},"injectables/UtilsService.html":{},"classes/googleOAuthDTO.html":{}}}],["split",{"_index":1396,"title":{},"body":{"classes/SqlReader.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{}}}],["split('gmt')[1",{"_index":1743,"title":{},"body":{"injectables/UtilsService.html":{}}}],["sqlreader",{"_index":1378,"title":{"classes/SqlReader.html":{}},"body":{"classes/SqlReader.html":{},"coverage.html":{}}}],["sqlreader.parsesqlstring(sqlstring",{"_index":1402,"title":{},"body":{"classes/SqlReader.html":{}}}],["sqlstring",{"_index":1386,"title":{},"body":{"classes/SqlReader.html":{}}}],["src/**/*.entity.{ts,js",{"_index":1884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../default.controller.ts",{"_index":1874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../filepersistor.ts",{"_index":1875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1851,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":1876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.enum.ts",{"_index":1843,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":1877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/api.module.ts",{"_index":195,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/app/api.controller.ts",{"_index":24,"title":{},"body":{"controllers/ApiController.html":{},"coverage.html":{}}}],["src/app/api.controller.ts:23",{"_index":36,"title":{},"body":{"controllers/ApiController.html":{}}}],["src/app/api.controller.ts:32",{"_index":54,"title":{},"body":{"controllers/ApiController.html":{}}}],["src/app/api.controller.ts:57",{"_index":46,"title":{},"body":{"controllers/ApiController.html":{}}}],["src/app/api.dto",{"_index":69,"title":{},"body":{"controllers/ApiController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["src/app/api.dto.ts",{"_index":231,"title":{},"body":{"classes/ArrayGuidDTO.html":{},"classes/PaginationDTO.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"coverage.html":{}}}],["src/app/api.dto.ts:15",{"_index":236,"title":{},"body":{"classes/ArrayGuidDTO.html":{}}}],["src/app/api.dto.ts:21",{"_index":1176,"title":{},"body":{"classes/PaginationDTO.html":{}}}],["src/app/api.dto.ts:25",{"_index":1182,"title":{},"body":{"classes/PaginationDTO.html":{}}}],["src/app/api.dto.ts:30",{"_index":1178,"title":{},"body":{"classes/PaginationDTO.html":{}}}],["src/app/api.dto.ts:35",{"_index":1180,"title":{},"body":{"classes/PaginationDTO.html":{}}}],["src/app/api.dto.ts:42",{"_index":1249,"title":{},"body":{"classes/ResposeDTO.html":{}}}],["src/app/api.dto.ts:47",{"_index":1247,"title":{},"body":{"classes/ResposeDTO.html":{}}}],["src/app/api.dto.ts:54",{"_index":1256,"title":{},"body":{"classes/ResposeSuccessDataDTO.html":{}}}],["src/app/api.dto.ts:58",{"_index":1255,"title":{},"body":{"classes/ResposeSuccessDataDTO.html":{}}}],["src/app/api.dto.ts:64",{"_index":1254,"title":{},"body":{"classes/ResposeResultsPaginationDTO.html":{}}}],["src/app/api.dto.ts:68",{"_index":1252,"title":{},"body":{"classes/ResposeResultsPaginationDTO.html":{}}}],["src/app/api.dto.ts:72",{"_index":1251,"title":{},"body":{"classes/ResposeResultsPaginationDTO.html":{}}}],["src/app/api.dto.ts:76",{"_index":1253,"title":{},"body":{"classes/ResposeResultsPaginationDTO.html":{}}}],["src/app/api.dto.ts:83",{"_index":1258,"title":{},"body":{"classes/ResposeSuccessPaginationDTO.html":{}}}],["src/app/api.dto.ts:87",{"_index":1257,"title":{},"body":{"classes/ResposeSuccessPaginationDTO.html":{}}}],["src/app/api.interface",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["src/app/api.interface.ts",{"_index":748,"title":{},"body":{"interfaces/JWTPayloadInterface.html":{},"coverage.html":{}}}],["src/app/api.service.ts",{"_index":205,"title":{},"body":{"injectables/ApiService.html":{},"coverage.html":{}}}],["src/app/api.service.ts:14",{"_index":208,"title":{},"body":{"injectables/ApiService.html":{}}}],["src/app/api.service.ts:8",{"_index":207,"title":{},"body":{"injectables/ApiService.html":{}}}],["src/app/app.module.ts",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/defaults/defatul.service",{"_index":211,"title":{},"body":{"injectables/ApiService.html":{},"injectables/UsersService.html":{}}}],["src/app/defaults/defatul.service.ts",{"_index":742,"title":{},"body":{"classes/DefaultService.html":{},"coverage.html":{}}}],["src/app/defaults/defatul.service.ts:4",{"_index":743,"title":{},"body":{"classes/DefaultService.html":{}}}],["src/app/defaults/default.controller",{"_index":1543,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/app/defaults/default.controller.ts",{"_index":722,"title":{},"body":{"classes/DefaultController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/defaults/default.controller.ts:19",{"_index":724,"title":{},"body":{"classes/DefaultController.html":{}}}],["src/app/defaults/default.without",{"_index":67,"title":{},"body":{"controllers/ApiController.html":{},"classes/DefaultWithoutSecurityController.html":{},"coverage.html":{}}}],["src/app/utils/filepersistor",{"_index":480,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/app/utils/filepersistor.ts",{"_index":1779,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/utils/sqlparser.ts",{"_index":1379,"title":{},"body":{"classes/SqlReader.html":{},"coverage.html":{}}}],["src/app/utils/sqlparser.ts:19",{"_index":1388,"title":{},"body":{"classes/SqlReader.html":{}}}],["src/app/utils/sqlparser.ts:3",{"_index":1383,"title":{},"body":{"classes/SqlReader.html":{}}}],["src/app/utils/sqlparser.ts:6",{"_index":1385,"title":{},"body":{"classes/SqlReader.html":{}}}],["src/app/utils/utils.module.ts",{"_index":1718,"title":{},"body":{"modules/UtilsModule.html":{}}}],["src/app/utils/utils.service.ts",{"_index":1720,"title":{},"body":{"injectables/UtilsService.html":{},"coverage.html":{}}}],["src/app/utils/utils.service.ts:10",{"_index":1730,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/app/utils/utils.service.ts:27",{"_index":1733,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/app/utils/utils.service.ts:44",{"_index":1735,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/app/utils/utils.service.ts:49",{"_index":1728,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/app/utils/utils.service.ts:55",{"_index":1726,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/app/utils/utils.service.ts:8",{"_index":1737,"title":{},"body":{"injectables/UtilsService.html":{}}}],["src/auth/auth.module",{"_index":197,"title":{},"body":{"modules/ApiModule.html":{},"modules/NotificationModule.html":{}}}],["src/auth/auth.module.ts",{"_index":264,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":72,"title":{},"body":{"controllers/ApiController.html":{},"classes/NotificationGateway.html":{}}}],["src/auth/auth.service.ts",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:12",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:14",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:16",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:29",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:80",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:94",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/guard/jwt",{"_index":749,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guard/roles.guard.ts",{"_index":1272,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guard/roles.guard.ts:13",{"_index":1274,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guard/roles.guard.ts:16",{"_index":1275,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/strategie/api",{"_index":127,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"coverage.html":{}}}],["src/auth/strategie/jwt.strategy.ts",{"_index":781,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategie/jwt.strategy.ts:16",{"_index":789,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategie/jwt.strategy.ts:18",{"_index":787,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategie/jwt.strategy.ts:19",{"_index":784,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategie/jwt.strategy.ts:29",{"_index":786,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/categories/categories.controller.ts",{"_index":365,"title":{},"body":{"controllers/CategoriesController.html":{},"coverage.html":{}}}],["src/categories/categories.controller.ts:105",{"_index":381,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:150",{"_index":395,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:192",{"_index":386,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:53",{"_index":374,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:76",{"_index":391,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.module",{"_index":201,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/categories/categories.module.ts",{"_index":457,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["src/categories/categories.service.ts",{"_index":461,"title":{},"body":{"injectables/CategoriesService.html":{},"coverage.html":{}}}],["src/categories/categories.service.ts:128",{"_index":468,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:153",{"_index":473,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:17",{"_index":476,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:187",{"_index":470,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:19",{"_index":465,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:25",{"_index":472,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:61",{"_index":467,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/dto/create",{"_index":593,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/categories/dto/search",{"_index":1285,"title":{},"body":{"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"coverage.html":{}}}],["src/categories/dto/update",{"_index":1421,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/categories/entities/category.entity",{"_index":1573,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/categories/entities/category.entity.ts",{"_index":551,"title":{},"body":{"entities/Category.html":{},"coverage.html":{}}}],["src/categories/entities/category.entity.ts:17",{"_index":573,"title":{},"body":{"entities/Category.html":{}}}],["src/categories/entities/category.entity.ts:20",{"_index":579,"title":{},"body":{"entities/Category.html":{}}}],["src/categories/entities/category.entity.ts:23",{"_index":571,"title":{},"body":{"entities/Category.html":{}}}],["src/categories/entities/category.entity.ts:26",{"_index":577,"title":{},"body":{"entities/Category.html":{}}}],["src/categories/entities/category.entity.ts:29",{"_index":575,"title":{},"body":{"entities/Category.html":{}}}],["src/categories/entities/category.entity.ts:36",{"_index":563,"title":{},"body":{"entities/Category.html":{}}}],["src/categories/entities/category.entity.ts:43",{"_index":583,"title":{},"body":{"entities/Category.html":{}}}],["src/categories/entities/category.entity.ts:50",{"_index":567,"title":{},"body":{"entities/Category.html":{}}}],["src/categories/entities/category.entity.ts:53",{"_index":556,"title":{},"body":{"entities/Category.html":{}}}],["src/categories/entities/category.entity.ts:56",{"_index":581,"title":{},"body":{"entities/Category.html":{}}}],["src/categories/entities/category.entity.ts:59",{"_index":565,"title":{},"body":{"entities/Category.html":{}}}],["src/categories/entities/category.entity.ts:62",{"_index":586,"title":{},"body":{"entities/Category.html":{}}}],["src/categories/entities/category.entity.ts:63",{"_index":553,"title":{},"body":{"entities/Category.html":{}}}],["src/main.ts",{"_index":1786,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/notification/dto/add",{"_index":6,"title":{},"body":{"classes/AddMessageDto.html":{},"coverage.html":{}}}],["src/notification/dto/create",{"_index":610,"title":{},"body":{"classes/CreateNotificationDto.html":{},"coverage.html":{}}}],["src/notification/dto/search",{"_index":1300,"title":{},"body":{"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"coverage.html":{}}}],["src/notification/dto/sendnotificationstouser.dto.ts",{"_index":1374,"title":{},"body":{"classes/SendNotificationsToUserDTO.html":{},"coverage.html":{}}}],["src/notification/dto/sendnotificationstouser.dto.ts:2",{"_index":1377,"title":{},"body":{"classes/SendNotificationsToUserDTO.html":{}}}],["src/notification/dto/sendnotificationstouser.dto.ts:3",{"_index":1376,"title":{},"body":{"classes/SendNotificationsToUserDTO.html":{}}}],["src/notification/dto/update",{"_index":1423,"title":{},"body":{"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["src/notification/entities/notification.entity.ts",{"_index":899,"title":{},"body":{"entities/Notification.html":{},"coverage.html":{}}}],["src/notification/entities/notification.entity.ts:11",{"_index":911,"title":{},"body":{"entities/Notification.html":{}}}],["src/notification/entities/notification.entity.ts:14",{"_index":905,"title":{},"body":{"entities/Notification.html":{}}}],["src/notification/entities/notification.entity.ts:17",{"_index":908,"title":{},"body":{"entities/Notification.html":{}}}],["src/notification/entities/notification.entity.ts:20",{"_index":907,"title":{},"body":{"entities/Notification.html":{}}}],["src/notification/entities/notification.entity.ts:27",{"_index":901,"title":{},"body":{"entities/Notification.html":{}}}],["src/notification/entities/notification.entity.ts:34",{"_index":913,"title":{},"body":{"entities/Notification.html":{}}}],["src/notification/entities/notification.entity.ts:41",{"_index":903,"title":{},"body":{"entities/Notification.html":{}}}],["src/notification/entities/notification.entity.ts:44",{"_index":900,"title":{},"body":{"entities/Notification.html":{}}}],["src/notification/entities/notification.entity.ts:47",{"_index":912,"title":{},"body":{"entities/Notification.html":{}}}],["src/notification/entities/notification.entity.ts:50",{"_index":902,"title":{},"body":{"entities/Notification.html":{}}}],["src/notification/entities/notification.entity.ts:53",{"_index":910,"title":{},"body":{"entities/Notification.html":{}}}],["src/notification/entities/notification.entity.ts:8",{"_index":906,"title":{},"body":{"entities/Notification.html":{}}}],["src/notification/entities/notificationtype.entity.ts",{"_index":1100,"title":{},"body":{"entities/NotificationType.html":{},"coverage.html":{}}}],["src/notification/entities/notificationtype.entity.ts:10",{"_index":1104,"title":{},"body":{"entities/NotificationType.html":{}}}],["src/notification/entities/notificationtype.entity.ts:13",{"_index":1101,"title":{},"body":{"entities/NotificationType.html":{}}}],["src/notification/entities/notificationtype.entity.ts:16",{"_index":1103,"title":{},"body":{"entities/NotificationType.html":{}}}],["src/notification/entities/notificationtype.entity.ts:19",{"_index":1107,"title":{},"body":{"entities/NotificationType.html":{}}}],["src/notification/entities/notificationtype.entity.ts:7",{"_index":1102,"title":{},"body":{"entities/NotificationType.html":{}}}],["src/notification/notification.controller.ts",{"_index":917,"title":{},"body":{"controllers/NotificationController.html":{},"coverage.html":{}}}],["src/notification/notification.controller.ts:103",{"_index":931,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notification/notification.controller.ts:27",{"_index":922,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notification/notification.controller.ts:54",{"_index":928,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notification/notification.controller.ts:78",{"_index":926,"title":{},"body":{"controllers/NotificationController.html":{}}}],["src/notification/notification.exeptions.ts",{"_index":691,"title":{},"body":{"classes/CustomException.html":{},"classes/NotificationAlreadyExistsException.html":{},"classes/NotificationNoExistsException.html":{},"coverage.html":{}}}],["src/notification/notification.exeptions.ts:15",{"_index":693,"title":{},"body":{"classes/CustomException.html":{}}}],["src/notification/notification.exeptions.ts:3",{"_index":915,"title":{},"body":{"classes/NotificationAlreadyExistsException.html":{}}}],["src/notification/notification.exeptions.ts:9",{"_index":1066,"title":{},"body":{"classes/NotificationNoExistsException.html":{}}}],["src/notification/notification.gateway.ts",{"_index":954,"title":{},"body":{"classes/NotificationGateway.html":{},"coverage.html":{}}}],["src/notification/notification.gateway.ts:20",{"_index":965,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["src/notification/notification.gateway.ts:23",{"_index":969,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["src/notification/notification.gateway.ts:24",{"_index":967,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["src/notification/notification.gateway.ts:26",{"_index":972,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["src/notification/notification.gateway.ts:57",{"_index":975,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["src/notification/notification.gateway.ts:63",{"_index":978,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["src/notification/notification.gateway.ts:79",{"_index":981,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["src/notification/notification.gateway.ts:86",{"_index":983,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["src/notification/notification.gateway.ts:95",{"_index":986,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["src/notification/notification.module",{"_index":203,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/notification/notification.module.ts",{"_index":1063,"title":{},"body":{"modules/NotificationModule.html":{}}}],["src/notification/notification.service.ts",{"_index":1067,"title":{},"body":{"injectables/NotificationService.html":{},"coverage.html":{}}}],["src/notification/notification.service.ts:110",{"_index":1075,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notification/notification.service.ts:17",{"_index":1078,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notification/notification.service.ts:20",{"_index":1069,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notification/notification.service.ts:26",{"_index":1073,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notification/notification.service.ts:50",{"_index":1070,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/notification/notification.service.ts:91",{"_index":1072,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/organization/dto/create",{"_index":620,"title":{},"body":{"classes/CreateOrganizationDto.html":{},"coverage.html":{}}}],["src/organization/dto/search",{"_index":1313,"title":{},"body":{"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"coverage.html":{}}}],["src/organization/dto/update",{"_index":1425,"title":{},"body":{"classes/UpdateOrganizationDto.html":{},"coverage.html":{}}}],["src/organization/entities/organization.entity.ts",{"_index":1109,"title":{},"body":{"entities/Organization.html":{},"coverage.html":{}}}],["src/organization/entities/organization.entity.ts:10",{"_index":1117,"title":{},"body":{"entities/Organization.html":{}}}],["src/organization/entities/organization.entity.ts:13",{"_index":1114,"title":{},"body":{"entities/Organization.html":{}}}],["src/organization/entities/organization.entity.ts:16",{"_index":1116,"title":{},"body":{"entities/Organization.html":{}}}],["src/organization/entities/organization.entity.ts:23",{"_index":1111,"title":{},"body":{"entities/Organization.html":{}}}],["src/organization/entities/organization.entity.ts:30",{"_index":1119,"title":{},"body":{"entities/Organization.html":{}}}],["src/organization/entities/organization.entity.ts:37",{"_index":1113,"title":{},"body":{"entities/Organization.html":{}}}],["src/organization/entities/organization.entity.ts:40",{"_index":1110,"title":{},"body":{"entities/Organization.html":{}}}],["src/organization/entities/organization.entity.ts:43",{"_index":1118,"title":{},"body":{"entities/Organization.html":{}}}],["src/organization/entities/organization.entity.ts:46",{"_index":1112,"title":{},"body":{"entities/Organization.html":{}}}],["src/organization/entities/organization.entity.ts:49",{"_index":1121,"title":{},"body":{"entities/Organization.html":{}}}],["src/organization/entities/organization.entity.ts:7",{"_index":1115,"title":{},"body":{"entities/Organization.html":{}}}],["src/organization/organization.controller.ts",{"_index":1124,"title":{},"body":{"controllers/OrganizationController.html":{},"coverage.html":{}}}],["src/organization/organization.controller.ts:100",{"_index":1130,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["src/organization/organization.controller.ts:27",{"_index":1126,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["src/organization/organization.controller.ts:51",{"_index":1128,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["src/organization/organization.controller.ts:75",{"_index":1127,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["src/organization/organization.exeptions.ts",{"_index":700,"title":{},"body":{"classes/CustomException-1.html":{},"classes/OrganizationAlreadyExistsException.html":{},"classes/OrganizationNoExistsException.html":{},"coverage.html":{}}}],["src/organization/organization.exeptions.ts:15",{"_index":701,"title":{},"body":{"classes/CustomException-1.html":{}}}],["src/organization/organization.exeptions.ts:3",{"_index":1122,"title":{},"body":{"classes/OrganizationAlreadyExistsException.html":{}}}],["src/organization/organization.exeptions.ts:9",{"_index":1150,"title":{},"body":{"classes/OrganizationNoExistsException.html":{}}}],["src/organization/organization.module.ts",{"_index":1148,"title":{},"body":{"modules/OrganizationModule.html":{}}}],["src/organization/organization.service.ts",{"_index":1151,"title":{},"body":{"injectables/OrganizationService.html":{},"coverage.html":{}}}],["src/organization/organization.service.ts:117",{"_index":1155,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["src/organization/organization.service.ts:138",{"_index":1157,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["src/organization/organization.service.ts:16",{"_index":1153,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["src/organization/organization.service.ts:22",{"_index":1156,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["src/organization/organization.service.ts:56",{"_index":1154,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["src/paymentmethod/dto/create",{"_index":627,"title":{},"body":{"classes/CreatePaymentMethodDto.html":{},"coverage.html":{}}}],["src/paymentmethod/dto/search",{"_index":1326,"title":{},"body":{"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"coverage.html":{}}}],["src/paymentmethod/dto/update",{"_index":1427,"title":{},"body":{"classes/UpdatePaymentMethodDto.html":{},"coverage.html":{}}}],["src/paymentmethod/entities/paymentmethod.entity",{"_index":1575,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/paymentmethod/entities/paymentmethod.entity.ts",{"_index":1183,"title":{},"body":{"entities/PaymentMethod.html":{},"coverage.html":{}}}],["src/paymentmethod/entities/paymentmethod.entity.ts:10",{"_index":1190,"title":{},"body":{"entities/PaymentMethod.html":{}}}],["src/paymentmethod/entities/paymentmethod.entity.ts:13",{"_index":1189,"title":{},"body":{"entities/PaymentMethod.html":{}}}],["src/paymentmethod/entities/paymentmethod.entity.ts:20",{"_index":1185,"title":{},"body":{"entities/PaymentMethod.html":{}}}],["src/paymentmethod/entities/paymentmethod.entity.ts:27",{"_index":1192,"title":{},"body":{"entities/PaymentMethod.html":{}}}],["src/paymentmethod/entities/paymentmethod.entity.ts:34",{"_index":1187,"title":{},"body":{"entities/PaymentMethod.html":{}}}],["src/paymentmethod/entities/paymentmethod.entity.ts:37",{"_index":1184,"title":{},"body":{"entities/PaymentMethod.html":{}}}],["src/paymentmethod/entities/paymentmethod.entity.ts:40",{"_index":1191,"title":{},"body":{"entities/PaymentMethod.html":{}}}],["src/paymentmethod/entities/paymentmethod.entity.ts:43",{"_index":1186,"title":{},"body":{"entities/PaymentMethod.html":{}}}],["src/paymentmethod/entities/paymentmethod.entity.ts:46",{"_index":1194,"title":{},"body":{"entities/PaymentMethod.html":{}}}],["src/paymentmethod/entities/paymentmethod.entity.ts:7",{"_index":1188,"title":{},"body":{"entities/PaymentMethod.html":{}}}],["src/paymentmethod/paymentmethod.controller.ts",{"_index":1197,"title":{},"body":{"controllers/PaymentMethodController.html":{},"coverage.html":{}}}],["src/paymentmethod/paymentmethod.controller.ts:100",{"_index":1203,"title":{},"body":{"controllers/PaymentMethodController.html":{}}}],["src/paymentmethod/paymentmethod.controller.ts:27",{"_index":1199,"title":{},"body":{"controllers/PaymentMethodController.html":{}}}],["src/paymentmethod/paymentmethod.controller.ts:51",{"_index":1201,"title":{},"body":{"controllers/PaymentMethodController.html":{}}}],["src/paymentmethod/paymentmethod.controller.ts:75",{"_index":1200,"title":{},"body":{"controllers/PaymentMethodController.html":{}}}],["src/paymentmethod/paymentmethod.exeptions.ts",{"_index":706,"title":{},"body":{"classes/CustomException-2.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"classes/PaymentMethodNoExistsException.html":{},"coverage.html":{}}}],["src/paymentmethod/paymentmethod.exeptions.ts:15",{"_index":707,"title":{},"body":{"classes/CustomException-2.html":{}}}],["src/paymentmethod/paymentmethod.exeptions.ts:3",{"_index":1195,"title":{},"body":{"classes/PaymentMethodAlreadyExistsException.html":{}}}],["src/paymentmethod/paymentmethod.exeptions.ts:9",{"_index":1223,"title":{},"body":{"classes/PaymentMethodNoExistsException.html":{}}}],["src/paymentmethod/paymentmethod.module",{"_index":202,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/paymentmethod/paymentmethod.module.ts",{"_index":1221,"title":{},"body":{"modules/PaymentMethodModule.html":{}}}],["src/paymentmethod/paymentmethod.service.ts",{"_index":1224,"title":{},"body":{"injectables/PaymentMethodService.html":{},"coverage.html":{}}}],["src/paymentmethod/paymentmethod.service.ts:115",{"_index":1228,"title":{},"body":{"injectables/PaymentMethodService.html":{}}}],["src/paymentmethod/paymentmethod.service.ts:135",{"_index":1230,"title":{},"body":{"injectables/PaymentMethodService.html":{}}}],["src/paymentmethod/paymentmethod.service.ts:16",{"_index":1226,"title":{},"body":{"injectables/PaymentMethodService.html":{}}}],["src/paymentmethod/paymentmethod.service.ts:22",{"_index":1229,"title":{},"body":{"injectables/PaymentMethodService.html":{}}}],["src/paymentmethod/paymentmethod.service.ts:55",{"_index":1227,"title":{},"body":{"injectables/PaymentMethodService.html":{}}}],["src/roles/decorators/public.decorator.ts",{"_index":1790,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/roles/decorators/roles.decorator.ts",{"_index":1791,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/roles/role.enum",{"_index":678,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["src/roles/role.enum.ts",{"_index":1844,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/roles/roles.entity",{"_index":1572,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/roles/roles.entity.ts",{"_index":1259,"title":{},"body":{"entities/Role.html":{},"coverage.html":{}}}],["src/roles/roles.entity.ts:10",{"_index":1266,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/roles.entity.ts:13",{"_index":1261,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/roles.entity.ts:16",{"_index":1268,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/roles.entity.ts:7",{"_index":1264,"title":{},"body":{"entities/Role.html":{}}}],["src/users/users.controller.ts",{"_index":1503,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:114",{"_index":1526,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:136",{"_index":1540,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:160",{"_index":1522,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:199",{"_index":1518,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:251",{"_index":1534,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:301",{"_index":1536,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:341",{"_index":1521,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:43",{"_index":1510,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:65",{"_index":1514,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:88",{"_index":1530,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.dto",{"_index":70,"title":{},"body":{"controllers/ApiController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["src/users/users.dto.ts",{"_index":632,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"coverage.html":{},"classes/googleOAuthDTO.html":{}}}],["src/users/users.dto.ts:10",{"_index":799,"title":{},"body":{"classes/LoginDTO.html":{}}}],["src/users/users.dto.ts:102",{"_index":642,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/users.dto.ts:108",{"_index":662,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/users.dto.ts:114",{"_index":637,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/users.dto.ts:122",{"_index":651,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/users.dto.ts:129",{"_index":653,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/users.dto.ts:136",{"_index":663,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/users.dto.ts:144",{"_index":660,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/users.dto.ts:148",{"_index":654,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/users.dto.ts:152",{"_index":658,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/users.dto.ts:159",{"_index":665,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/users.dto.ts:165",{"_index":672,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/users.dto.ts:17",{"_index":798,"title":{},"body":{"classes/LoginDTO.html":{}}}],["src/users/users.dto.ts:170",{"_index":644,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/users.dto.ts:174",{"_index":638,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/users.dto.ts:179",{"_index":645,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/users.dto.ts:183",{"_index":655,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/users.dto.ts:188",{"_index":666,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/users.dto.ts:197",{"_index":1344,"title":{},"body":{"classes/SearchUserDTO.html":{}}}],["src/users/users.dto.ts:202",{"_index":1348,"title":{},"body":{"classes/SearchUserDTO.html":{}}}],["src/users/users.dto.ts:207",{"_index":1341,"title":{},"body":{"classes/SearchUserDTO.html":{}}}],["src/users/users.dto.ts:211",{"_index":1346,"title":{},"body":{"classes/SearchUserDTO.html":{}}}],["src/users/users.dto.ts:215",{"_index":1345,"title":{},"body":{"classes/SearchUserDTO.html":{}}}],["src/users/users.dto.ts:220",{"_index":1347,"title":{},"body":{"classes/SearchUserDTO.html":{}}}],["src/users/users.dto.ts:225",{"_index":1343,"title":{},"body":{"classes/SearchUserDTO.html":{}}}],["src/users/users.dto.ts:230",{"_index":1342,"title":{},"body":{"classes/SearchUserDTO.html":{}}}],["src/users/users.dto.ts:235",{"_index":1340,"title":{},"body":{"classes/SearchUserDTO.html":{}}}],["src/users/users.dto.ts:24",{"_index":1853,"title":{},"body":{"classes/googleOAuthDTO.html":{}}}],["src/users/users.dto.ts:242",{"_index":1355,"title":{},"body":{"classes/SearchUserPaginationDTO.html":{}}}],["src/users/users.dto.ts:247",{"_index":1360,"title":{},"body":{"classes/SearchUserPaginationDTO.html":{}}}],["src/users/users.dto.ts:252",{"_index":1367,"title":{},"body":{"classes/SearchUserPaginationDTO.html":{}}}],["src/users/users.dto.ts:257",{"_index":1368,"title":{},"body":{"classes/SearchUserPaginationDTO.html":{}}}],["src/users/users.dto.ts:262",{"_index":1358,"title":{},"body":{"classes/SearchUserPaginationDTO.html":{}}}],["src/users/users.dto.ts:266",{"_index":1357,"title":{},"body":{"classes/SearchUserPaginationDTO.html":{}}}],["src/users/users.dto.ts:271",{"_index":1354,"title":{},"body":{"classes/SearchUserPaginationDTO.html":{}}}],["src/users/users.dto.ts:276",{"_index":1359,"title":{},"body":{"classes/SearchUserPaginationDTO.html":{}}}],["src/users/users.dto.ts:281",{"_index":1372,"title":{},"body":{"classes/SearchUserPaginationDTO.html":{}}}],["src/users/users.dto.ts:286",{"_index":1353,"title":{},"body":{"classes/SearchUserPaginationDTO.html":{}}}],["src/users/users.dto.ts:29",{"_index":1852,"title":{},"body":{"classes/googleOAuthDTO.html":{}}}],["src/users/users.dto.ts:290",{"_index":1356,"title":{},"body":{"classes/SearchUserPaginationDTO.html":{}}}],["src/users/users.dto.ts:295",{"_index":1370,"title":{},"body":{"classes/SearchUserPaginationDTO.html":{}}}],["src/users/users.dto.ts:300",{"_index":1352,"title":{},"body":{"classes/SearchUserPaginationDTO.html":{}}}],["src/users/users.dto.ts:305",{"_index":1371,"title":{},"body":{"classes/SearchUserPaginationDTO.html":{}}}],["src/users/users.dto.ts:309",{"_index":1362,"title":{},"body":{"classes/SearchUserPaginationDTO.html":{}}}],["src/users/users.dto.ts:313",{"_index":1366,"title":{},"body":{"classes/SearchUserPaginationDTO.html":{}}}],["src/users/users.dto.ts:318",{"_index":1363,"title":{},"body":{"classes/SearchUserPaginationDTO.html":{}}}],["src/users/users.dto.ts:323",{"_index":1364,"title":{},"body":{"classes/SearchUserPaginationDTO.html":{}}}],["src/users/users.dto.ts:328",{"_index":1350,"title":{},"body":{"classes/SearchUserPaginationDTO.html":{}}}],["src/users/users.dto.ts:333",{"_index":1351,"title":{},"body":{"classes/SearchUserPaginationDTO.html":{}}}],["src/users/users.dto.ts:34",{"_index":1855,"title":{},"body":{"classes/googleOAuthDTO.html":{}}}],["src/users/users.dto.ts:39",{"_index":1854,"title":{},"body":{"classes/googleOAuthDTO.html":{}}}],["src/users/users.dto.ts:47",{"_index":674,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/users.dto.ts:54",{"_index":647,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/users.dto.ts:60",{"_index":667,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/users.dto.ts:66",{"_index":643,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/users.dto.ts:72",{"_index":668,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/users.dto.ts:78",{"_index":648,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/users.dto.ts:84",{"_index":649,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/users.dto.ts:90",{"_index":639,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/users.dto.ts:96",{"_index":641,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/users.entity",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"classes/NotificationGateway.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/users/users.entity.ts",{"_index":1429,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/users.entity.ts:100",{"_index":1447,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:112",{"_index":1477,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:124",{"_index":1449,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:127",{"_index":1444,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:130",{"_index":1476,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:133",{"_index":1448,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:136",{"_index":1479,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:139",{"_index":1485,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:142",{"_index":1481,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:146",{"_index":1441,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:150",{"_index":1470,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:154",{"_index":1467,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:157",{"_index":1435,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:160",{"_index":1451,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:163",{"_index":1472,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:166",{"_index":1443,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:169",{"_index":1461,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:23",{"_index":1459,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:27",{"_index":1453,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:30",{"_index":1465,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:33",{"_index":1462,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:37",{"_index":1457,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:40",{"_index":1433,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:43",{"_index":1439,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:46",{"_index":1473,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:49",{"_index":1454,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:52",{"_index":1455,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:55",{"_index":1436,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:58",{"_index":1437,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:61",{"_index":1438,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:64",{"_index":1471,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:67",{"_index":1464,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:71",{"_index":1483,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:74",{"_index":1458,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:82",{"_index":1475,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:85",{"_index":1460,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.entity.ts:88",{"_index":1468,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.exception",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["src/users/users.exception.ts",{"_index":712,"title":{},"body":{"classes/CustomException-3.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"coverage.html":{}}}],["src/users/users.exception.ts:15",{"_index":1501,"title":{},"body":{"classes/UsernamePasswordNoExistsException.html":{}}}],["src/users/users.exception.ts:22",{"_index":713,"title":{},"body":{"classes/CustomException-3.html":{}}}],["src/users/users.exception.ts:3",{"_index":1499,"title":{},"body":{"classes/UserAlreadyExistsException.html":{}}}],["src/users/users.exception.ts:9",{"_index":1500,"title":{},"body":{"classes/UserNoExistsException.html":{}}}],["src/users/users.module",{"_index":271,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/users.module.ts",{"_index":1571,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["src/users/users.service.ts",{"_index":1576,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:109",{"_index":1582,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:18",{"_index":1588,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:20",{"_index":1590,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:22",{"_index":1587,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:24",{"_index":1579,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:242",{"_index":1583,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:30",{"_index":1581,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:331",{"_index":1586,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:35",{"_index":1585,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:454",{"_index":1584,"title":{},"body":{"injectables/UsersService.html":{}}}],["started",{"_index":1857,"title":{"index.html":{}},"body":{}}],["statements",{"_index":1770,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1380,"title":{},"body":{"classes/SqlReader.html":{},"dependencies.html":{}}}],["status",{"_index":42,"title":{},"body":{"controllers/ApiController.html":{},"classes/ArrayGuidDTO.html":{},"controllers/CategoriesController.html":{},"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/DefaultController.html":{},"injectables/JwtAuthGuard.html":{},"classes/NotificationAlreadyExistsException.html":{},"controllers/NotificationController.html":{},"classes/NotificationNoExistsException.html":{},"classes/OrganizationAlreadyExistsException.html":{},"controllers/OrganizationController.html":{},"classes/OrganizationNoExistsException.html":{},"classes/PaginationDTO.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"controllers/PaymentMethodController.html":{},"classes/PaymentMethodNoExistsException.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"guards/RolesGuard.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"controllers/UsersController.html":{}}}],["strategie/api",{"_index":275,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategie/jwt.strategy",{"_index":277,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":150,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["string",{"_index":14,"title":{},"body":{"classes/AddMessageDto.html":{},"injectables/ApiKeyStrategy.html":{},"classes/ArrayGuidDTO.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"interfaces/JWTPayloadInterface.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"entities/Notification.html":{},"classes/NotificationAlreadyExistsException.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"classes/NotificationNoExistsException.html":{},"injectables/NotificationService.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"classes/OrganizationAlreadyExistsException.html":{},"controllers/OrganizationController.html":{},"classes/OrganizationNoExistsException.html":{},"injectables/OrganizationService.html":{},"classes/PaginationDTO.html":{},"entities/PaymentMethod.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"controllers/PaymentMethodController.html":{},"classes/PaymentMethodNoExistsException.html":{},"injectables/PaymentMethodService.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"entities/Role.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/SendNotificationsToUserDTO.html":{},"classes/SqlReader.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{},"classes/googleOAuthDTO.html":{},"miscellaneous/variables.html":{}}}],["string'})@arrayminsize(1)@isarray",{"_index":235,"title":{},"body":{"classes/ArrayGuidDTO.html":{}}}],["string'})@isoptional()@isenum(roleenum",{"_index":1369,"title":{},"body":{"classes/SearchUserPaginationDTO.html":{}}}],["string'})@isoptional()@isnotempty()@isenum(roleenum",{"_index":670,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["string'})@isoptional()@isstring",{"_index":1339,"title":{},"body":{"classes/SearchUserDTO.html":{}}}],["subscribemessage",{"_index":988,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["subscribemessage('notification",{"_index":977,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["subscribemessage('sendnotificationtouser",{"_index":980,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["substring(0",{"_index":1744,"title":{},"body":{"injectables/UtilsService.html":{}}}],["substring(1",{"_index":1613,"title":{},"body":{"injectables/UsersService.html":{}}}],["substring(3",{"_index":1745,"title":{},"body":{"injectables/UtilsService.html":{}}}],["substring(d.search('gmt",{"_index":1741,"title":{},"body":{"injectables/UtilsService.html":{}}}],["success",{"_index":102,"title":{},"body":{"controllers/ApiController.html":{},"classes/ArrayGuidDTO.html":{},"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"classes/PaginationDTO.html":{},"controllers/PaymentMethodController.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"controllers/UsersController.html":{}}}],["summary",{"_index":82,"title":{},"body":{"controllers/ApiController.html":{},"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":153,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/enumerations.html":{}}}],["super('notification",{"_index":695,"title":{},"body":{"classes/CustomException.html":{},"classes/NotificationAlreadyExistsException.html":{},"classes/NotificationNoExistsException.html":{}}}],["super('organization",{"_index":703,"title":{},"body":{"classes/CustomException-1.html":{},"classes/OrganizationAlreadyExistsException.html":{},"classes/OrganizationNoExistsException.html":{}}}],["super('paymentmethod",{"_index":709,"title":{},"body":{"classes/CustomException-2.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"classes/PaymentMethodNoExistsException.html":{}}}],["super('user",{"_index":715,"title":{},"body":{"classes/CustomException-3.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{}}}],["super('wrong",{"_index":717,"title":{},"body":{"classes/CustomException-3.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{}}}],["super(apicontroller",{"_index":81,"title":{},"body":{"controllers/ApiController.html":{}}}],["super(apiservice",{"_index":212,"title":{},"body":{"injectables/ApiService.html":{}}}],["super(categoriescontroller",{"_index":423,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["super(categoriesservice",{"_index":491,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["super(message",{"_index":699,"title":{},"body":{"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/NotificationAlreadyExistsException.html":{},"classes/NotificationNoExistsException.html":{},"classes/OrganizationAlreadyExistsException.html":{},"classes/OrganizationNoExistsException.html":{},"classes/PaymentMethodAlreadyExistsException.html":{},"classes/PaymentMethodNoExistsException.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{}}}],["super(notificationcontroller",{"_index":939,"title":{},"body":{"controllers/NotificationController.html":{}}}],["super(notificationservice",{"_index":1082,"title":{},"body":{"injectables/NotificationService.html":{}}}],["super(organizationcontroller",{"_index":1138,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["super(organizationservice",{"_index":1162,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["super(paymentmethodcontroller",{"_index":1211,"title":{},"body":{"controllers/PaymentMethodController.html":{}}}],["super(paymentmethodservice",{"_index":1235,"title":{},"body":{"injectables/PaymentMethodService.html":{}}}],["super(userscontroller",{"_index":1547,"title":{},"body":{"controllers/UsersController.html":{}}}],["super(usersservice",{"_index":1593,"title":{},"body":{"injectables/UsersService.html":{}}}],["super.canactivate(context",{"_index":772,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":1860,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1861,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1835,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":1420,"title":{},"body":{"injectables/TypeOrmConfigService.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":814,"title":{},"body":{"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1796,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":519,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{},"injectables/UsersService.html":{}}}],["themes",{"_index":1836,"title":{},"body":{"dependencies.html":{}}}],["this._hashpassword(params.body.password",{"_index":1642,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.apiservice.getinfo",{"_index":84,"title":{},"body":{"controllers/ApiController.html":{}}}],["this.authservice.generateaccesstoken",{"_index":101,"title":{},"body":{"controllers/ApiController.html":{}}}],["this.authservice.validateaccesstoken",{"_index":1004,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["this.authservice.validategoogleuser",{"_index":115,"title":{},"body":{"controllers/ApiController.html":{}}}],["this.authservice.validateuser",{"_index":95,"title":{},"body":{"controllers/ApiController.html":{}}}],["this.categoryrepository.findandcount",{"_index":516,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.findone",{"_index":492,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.findoneby",{"_index":1618,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.categoryrepository.save",{"_index":525,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.save(category",{"_index":540,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryservice.all",{"_index":425,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoryservice.create(file",{"_index":444,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoryservice.delete",{"_index":452,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoryservice.getby",{"_index":429,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoryservice.update(file",{"_index":450,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.config.get('api_key",{"_index":166,"title":{},"body":{"injectables/ApiKeyStrategy.html":{}}}],["this.config.get('basepath",{"_index":1763,"title":{},"body":{"injectables/UtilsService.html":{}}}],["this.config.get('basepath').replace(/\\//g",{"_index":171,"title":{},"body":{"injectables/ApiKeyStrategy.html":{}}}],["this.config.get('database_host",{"_index":1411,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["this.config.get('database_name",{"_index":1415,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["this.config.get('database_password",{"_index":1417,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["this.config.get('database_port",{"_index":1413,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["this.config.get('database_username",{"_index":1416,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["this.config.get('description",{"_index":213,"title":{},"body":{"injectables/ApiService.html":{}}}],["this.connectedusers",{"_index":1053,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["this.connectedusers.delete(client.id",{"_index":1022,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["this.connectedusers.get(client",{"_index":1056,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["this.connectedusers.get(client?.id",{"_index":1026,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["this.connectedusers.get(key",{"_index":1055,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["this.connectedusers.set(client.id",{"_index":1010,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["this.jwtservice.sign(payload",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(params.token",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger",{"_index":740,"title":{},"body":{"classes/DefaultController.html":{},"classes/DefaultService.html":{},"classes/DefaultWithoutSecurityController.html":{}}}],["this.logger.error",{"_index":774,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.logger.error(`unauthorized",{"_index":167,"title":{},"body":{"injectables/ApiKeyStrategy.html":{}}}],["this.logger.error(error.message",{"_index":106,"title":{},"body":{"controllers/ApiController.html":{},"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["this.logger.log(`authorized",{"_index":172,"title":{},"body":{"injectables/ApiKeyStrategy.html":{}}}],["this.logger.warn(`authorized",{"_index":780,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.notificationgateway.sendnotificationto(notification.createdby.guid",{"_index":1094,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.notificationrepository.findandcount",{"_index":1088,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.notificationrepository.findone",{"_index":1083,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.notificationrepository.save",{"_index":1091,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.notificationrepository.save(notification",{"_index":1098,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.notificationservice.all",{"_index":945,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.notificationservice.create",{"_index":949,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.notificationservice.getby",{"_index":947,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.notificationservice.update",{"_index":952,"title":{},"body":{"controllers/NotificationController.html":{}}}],["this.organizationrepository.findandcount",{"_index":1165,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["this.organizationrepository.findone",{"_index":1163,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["this.organizationrepository.save",{"_index":1168,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["this.organizationrepository.save(organization",{"_index":1173,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["this.organizationservice.all",{"_index":1139,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["this.organizationservice.create",{"_index":1142,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["this.organizationservice.getby",{"_index":1141,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["this.organizationservice.update",{"_index":1144,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["this.paymentmethodrepository.findandcount",{"_index":1238,"title":{},"body":{"injectables/PaymentMethodService.html":{}}}],["this.paymentmethodrepository.findone",{"_index":1236,"title":{},"body":{"injectables/PaymentMethodService.html":{}}}],["this.paymentmethodrepository.findoneby",{"_index":1677,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.paymentmethodrepository.save",{"_index":1241,"title":{},"body":{"injectables/PaymentMethodService.html":{}}}],["this.paymentmethodrepository.save(paymentmethod",{"_index":1245,"title":{},"body":{"injectables/PaymentMethodService.html":{}}}],["this.paymentmethodservice.all",{"_index":1212,"title":{},"body":{"controllers/PaymentMethodController.html":{}}}],["this.paymentmethodservice.create",{"_index":1215,"title":{},"body":{"controllers/PaymentMethodController.html":{}}}],["this.paymentmethodservice.getby",{"_index":1214,"title":{},"body":{"controllers/PaymentMethodController.html":{}}}],["this.paymentmethodservice.update",{"_index":1217,"title":{},"body":{"controllers/PaymentMethodController.html":{}}}],["this.reflector.get(is_public_key",{"_index":770,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.reflector.getallandoverride",{"_index":1279,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.server",{"_index":1049,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["this.server.emit('notification",{"_index":1029,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["this.server.sockets.emit('notification",{"_index":1050,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["this.server.to(client).emit('notification",{"_index":1057,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["this.server.to(client.id).emit('notification",{"_index":1042,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["this.userrepository.findandcount",{"_index":1621,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":542,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.findoneby",{"_index":1639,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save",{"_index":1646,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(user",{"_index":1699,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(usertodelete",{"_index":1711,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrolerepository.findoneby",{"_index":1668,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.all",{"_index":1548,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.create(file",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.create(files",{"_index":1561,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.delete",{"_index":1567,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.getby",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{}}}],["this.userservice.update(file",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.update(files",{"_index":1564,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.validate(apikey",{"_index":159,"title":{},"body":{"injectables/ApiKeyStrategy.html":{}}}],["throw",{"_index":107,"title":{},"body":{"controllers/ApiController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{}}}],["timestamp",{"_index":555,"title":{},"body":{"entities/Category.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"entities/Notification.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"entities/User.html":{}}}],["timestamp(6",{"_index":819,"title":{},"body":{"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{}}}],["tinyint",{"_index":576,"title":{},"body":{"entities/Category.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"entities/Notification.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"entities/User.html":{}}}],["title",{"_index":613,"title":{},"body":{"classes/CreateNotificationDto.html":{},"classes/Migrations1717483943918.html":{},"entities/Notification.html":{},"injectables/NotificationService.html":{}}}],["token",{"_index":100,"title":{},"body":{"controllers/ApiController.html":{},"injectables/AuthService.html":{},"classes/NotificationGateway.html":{}}}],["token.tostring",{"_index":1005,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["total",{"_index":258,"title":{},"body":{"classes/ArrayGuidDTO.html":{},"injectables/CategoriesService.html":{},"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"classes/PaginationDTO.html":{},"injectables/PaymentMethodService.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"injectables/UsersService.html":{}}}],["transformer",{"_index":1813,"title":{},"body":{"dependencies.html":{}}}],["trim",{"_index":1612,"title":{},"body":{"injectables/UsersService.html":{}}}],["true",{"_index":156,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"modules/AppModule.html":{},"classes/ArrayGuidDTO.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"entities/Notification.html":{},"injectables/NotificationService.html":{},"entities/Organization.html":{},"injectables/OrganizationService.html":{},"classes/PaginationDTO.html":{},"entities/PaymentMethod.html":{},"injectables/PaymentMethodService.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{},"classes/googleOAuthDTO.html":{},"miscellaneous/variables.html":{}}}],["true})@isnotempty()@isstring",{"_index":1248,"title":{},"body":{"classes/ResposeDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"classes/googleOAuthDTO.html":{}}}],["true})@isnumber",{"_index":1250,"title":{},"body":{"classes/ResposeResultsPaginationDTO.html":{}}}],["true})@maxlength(10)@minlength(7)@isnotempty()@isstring",{"_index":646,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["true})@maxlength(50)@isnotempty()@isstring",{"_index":673,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{}}}],["true})@minlength(3)@maxlength(50)@isnotempty()@isstring",{"_index":602,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{}}}],["true})@minlength(3)@maxlength(70)@isnotempty()@isstring",{"_index":797,"title":{},"body":{"classes/LoginDTO.html":{}}}],["true})@unique(['document",{"_index":1452,"title":{},"body":{"entities/User.html":{}}}],["try",{"_index":91,"title":{},"body":{"controllers/ApiController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"injectables/NotificationService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{}}}],["type",{"_index":12,"title":{},"body":{"classes/AddMessageDto.html":{},"controllers/ApiController.html":{},"injectables/ApiKeyStrategy.html":{},"injectables/ApiService.html":{},"classes/ArrayGuidDTO.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/CustomException.html":{},"classes/CustomException-1.html":{},"classes/CustomException-2.html":{},"classes/CustomException-3.html":{},"classes/DefaultController.html":{},"classes/DefaultService.html":{},"classes/DefaultWithoutSecurityController.html":{},"interfaces/JWTPayloadInterface.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"injectables/NotificationService.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"classes/PaginationDTO.html":{},"entities/PaymentMethod.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/SendNotificationsToUserDTO.html":{},"classes/SqlReader.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilsService.html":{},"coverage.html":{},"classes/googleOAuthDTO.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":482,"title":{},"body":{"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"entities/Notification.html":{},"injectables/NotificationService.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"injectables/OrganizationService.html":{},"entities/PaymentMethod.html":{},"injectables/PaymentMethodService.html":{},"entities/Role.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormconfigservice",{"_index":221,"title":{"injectables/TypeOrmConfigService.html":{}},"body":{"modules/AppModule.html":{},"injectables/TypeOrmConfigService.html":{},"coverage.html":{}}}],["typeormmodule",{"_index":219,"title":{},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"modules/NotificationModule.html":{},"modules/OrganizationModule.html":{},"modules/PaymentMethodModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":460,"title":{},"body":{"modules/CategoriesModule.html":{},"modules/NotificationModule.html":{},"modules/OrganizationModule.html":{},"modules/PaymentMethodModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":228,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":1406,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["typeormoptionsfactory",{"_index":1408,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["types",{"_index":1802,"title":{},"body":{"dependencies.html":{}}}],["types/multer",{"_index":1810,"title":{},"body":{"dependencies.html":{}}}],["un",{"_index":1034,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["unauthorized",{"_index":775,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["unauthorizedexception",{"_index":144,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["undefined",{"_index":45,"title":{},"body":{"controllers/ApiController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["undefined})@apiresponse({type",{"_index":43,"title":{},"body":{"controllers/ApiController.html":{},"controllers/CategoriesController.html":{},"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{},"controllers/UsersController.html":{}}}],["undefined})@post()@useinterceptors(undefined",{"_index":1517,"title":{},"body":{"controllers/UsersController.html":{}}}],["undefined})@useinterceptors(undefined",{"_index":394,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/UsersController.html":{}}}],["unique",{"_index":833,"title":{},"body":{"classes/Migrations1717483943918.html":{},"entities/User.html":{}}}],["unique('users_uk",{"_index":1491,"title":{},"body":{"entities/User.html":{}}}],["unique(['document",{"_index":1492,"title":{},"body":{"entities/User.html":{}}}],["unique(['email",{"_index":1493,"title":{},"body":{"entities/User.html":{}}}],["unique(['username",{"_index":1494,"title":{},"body":{"entities/User.html":{}}}],["unlicensed",{"_index":1871,"title":{},"body":{"properties.html":{}}}],["unlinksync(`../files/${file.filename",{"_index":1890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unlinksync(file.path",{"_index":1909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["up",{"_index":806,"title":{},"body":{"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{}}}],["up(queryrunner",{"_index":811,"title":{},"body":{"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{}}}],["update",{"_index":370,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@param('guid",{"_index":950,"title":{},"body":{"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{}}}],["update(file",{"_index":392,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["update(files",{"_index":1535,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(guid",{"_index":929,"title":{},"body":{"controllers/NotificationController.html":{},"controllers/OrganizationController.html":{},"controllers/PaymentMethodController.html":{}}}],["update(params",{"_index":1074,"title":{},"body":{"injectables/NotificationService.html":{},"injectables/OrganizationService.html":{},"injectables/PaymentMethodService.html":{}}}],["updatecategorydto",{"_index":383,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updated",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["updatedat",{"_index":495,"title":{},"body":{"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"entities/Notification.html":{},"entities/Organization.html":{},"injectables/OrganizationService.html":{},"entities/PaymentMethod.html":{},"injectables/PaymentMethodService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["updatedatecolumn",{"_index":589,"title":{},"body":{"entities/Category.html":{},"entities/Notification.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"entities/User.html":{}}}],["updatedatecolumn({type",{"_index":580,"title":{},"body":{"entities/Category.html":{},"entities/Notification.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"entities/User.html":{}}}],["updatedby",{"_index":500,"title":{},"body":{"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/Migrations1717483943918.html":{},"entities/Notification.html":{},"entities/Organization.html":{},"injectables/OrganizationService.html":{},"entities/PaymentMethod.html":{},"injectables/PaymentMethodService.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["updatedbyguid",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{}}}],["updatedcategory",{"_index":449,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["updatednotification",{"_index":951,"title":{},"body":{"controllers/NotificationController.html":{}}}],["updatedorganization",{"_index":1143,"title":{},"body":{"controllers/OrganizationController.html":{}}}],["updatedpaymentmethod",{"_index":1216,"title":{},"body":{"controllers/PaymentMethodController.html":{}}}],["updateduser",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["updatenotificationdto",{"_index":930,"title":{"classes/UpdateNotificationDto.html":{}},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"classes/UpdateNotificationDto.html":{},"coverage.html":{}}}],["updateorganizationdto",{"_index":1129,"title":{"classes/UpdateOrganizationDto.html":{}},"body":{"controllers/OrganizationController.html":{},"injectables/OrganizationService.html":{},"classes/UpdateOrganizationDto.html":{},"coverage.html":{}}}],["updatepaymentmethoddto",{"_index":1202,"title":{"classes/UpdatePaymentMethodDto.html":{}},"body":{"controllers/PaymentMethodController.html":{},"injectables/PaymentMethodService.html":{},"classes/UpdatePaymentMethodDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":684,"title":{"classes/UpdateUserDTO.html":{}},"body":{"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/googleOAuthDTO.html":{}}}],["uploadedfile",{"_index":402,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["uploadedfiles",{"_index":1541,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploads/temp",{"_index":434,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/UsersController.html":{}}}],["url",{"_index":1729,"title":{},"body":{"injectables/UtilsService.html":{}}}],["url.charat(url.length",{"_index":1759,"title":{},"body":{"injectables/UtilsService.html":{}}}],["url.length",{"_index":1761,"title":{},"body":{"injectables/UtilsService.html":{}}}],["url.substring(0",{"_index":1760,"title":{},"body":{"injectables/UtilsService.html":{}}}],["useclass",{"_index":229,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["usefactory",{"_index":279,"title":{},"body":{"modules/AuthModule.html":{}}}],["useguards",{"_index":726,"title":{},"body":{"classes/DefaultController.html":{}}}],["useguards(jwtauthguard",{"_index":736,"title":{},"body":{"classes/DefaultController.html":{},"miscellaneous/variables.html":{}}}],["useguards(rolesguard",{"_index":738,"title":{},"body":{"classes/DefaultController.html":{},"miscellaneous/variables.html":{}}}],["useinterceptors",{"_index":403,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/UsersController.html":{}}}],["user",{"_index":93,"title":{"entities/User.html":{}},"body":{"controllers/ApiController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"injectables/JwtAuthGuard.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"classes/NotificationGateway.html":{},"modules/NotificationModule.html":{},"entities/Organization.html":{},"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"entities/PaymentMethod.html":{},"controllers/PaymentMethodController.html":{},"modules/PaymentMethodModule.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user'})@apiresponse({type",{"_index":1516,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.address",{"_index":1682,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.availability",{"_index":1602,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.backgroundcheck",{"_index":1689,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.backgroundcheckdate",{"_index":1691,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.backgroundcheckexpirationdate",{"_index":1690,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.birthdate",{"_index":1685,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.category",{"_index":585,"title":{},"body":{"entities/Category.html":{},"injectables/UsersService.html":{}}}],["user.certifications",{"_index":1604,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.createdby",{"_index":1478,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["user.deletedby",{"_index":1480,"title":{},"body":{"entities/User.html":{}}}],["user.description",{"_index":1698,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.document",{"_index":1693,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.documentsidea",{"_index":1687,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.documentsideb",{"_index":1688,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.email",{"_index":1681,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.foreach((user",{"_index":1636,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.googleid",{"_index":1684,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.guid",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{},"classes/NotificationGateway.html":{}}}],["user.isactive",{"_index":1696,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.isavailable",{"_index":1697,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.lastname",{"_index":1692,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.mapadress",{"_index":1694,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.name",{"_index":1680,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.organization",{"_index":1120,"title":{},"body":{"entities/Organization.html":{}}}],["user.password",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.paymentmethod",{"_index":1193,"title":{},"body":{"entities/PaymentMethod.html":{},"injectables/UsersService.html":{}}}],["user.phone",{"_index":1683,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.previusworks",{"_index":1606,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.profileimage",{"_index":1686,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.role",{"_index":1267,"title":{},"body":{"entities/Role.html":{},"injectables/UsersService.html":{}}}],["user.role.guid",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{}}}],["user.updatedby",{"_index":1484,"title":{},"body":{"entities/User.html":{}}}],["user.usercreated",{"_index":558,"title":{},"body":{"entities/Category.html":{},"entities/Notification.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"entities/User.html":{}}}],["user.userdeleted",{"_index":566,"title":{},"body":{"entities/Category.html":{},"entities/Notification.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"entities/User.html":{}}}],["user.username",{"_index":1017,"title":{},"body":{"classes/NotificationGateway.html":{},"injectables/UsersService.html":{}}}],["user.userupdated",{"_index":582,"title":{},"body":{"entities/Category.html":{},"entities/Notification.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"entities/User.html":{}}}],["useragent",{"_index":163,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"injectables/JwtAuthGuard.html":{}}}],["useralreadyexistsexception",{"_index":714,"title":{"classes/UserAlreadyExistsException.html":{}},"body":{"classes/CustomException-3.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["usercreated",{"_index":1430,"title":{},"body":{"entities/User.html":{}}}],["userdeleted",{"_index":1431,"title":{},"body":{"entities/User.html":{}}}],["userid",{"_index":1025,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["username",{"_index":96,"title":{},"body":{"controllers/ApiController.html":{},"classes/ArrayGuidDTO.html":{},"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"classes/CustomException-3.html":{},"interfaces/JWTPayloadInterface.html":{},"classes/LoginDTO.html":{},"classes/Migrations1717483943918.html":{},"classes/PaginationDTO.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"injectables/UsersService.html":{},"classes/googleOAuthDTO.html":{},"miscellaneous/variables.html":{}}}],["usernamepasswordnoexistsexception",{"_index":311,"title":{"classes/UsernamePasswordNoExistsException.html":{}},"body":{"injectables/AuthService.html":{},"classes/CustomException-3.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"coverage.html":{}}}],["usernoexistsexception",{"_index":716,"title":{"classes/UserNoExistsException.html":{}},"body":{"classes/CustomException-3.html":{},"classes/UserAlreadyExistsException.html":{},"classes/UserNoExistsException.html":{},"classes/UsernamePasswordNoExistsException.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userrepository",{"_index":463,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/UsersService.html":{}}}],["userrolerepository",{"_index":1577,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":552,"title":{},"body":{"entities/Category.html":{},"classes/Migrations1717483943918.html":{},"classes/NotificationGateway.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"entities/Role.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["users'})@apiresponse({type",{"_index":1509,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":1574,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1544,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.entity",{"_index":412,"title":{},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"entities/Notification.html":{},"controllers/NotificationController.html":{},"modules/NotificationModule.html":{},"entities/Organization.html":{},"controllers/OrganizationController.html":{},"modules/OrganizationModule.html":{},"entities/PaymentMethod.html":{},"controllers/PaymentMethodController.html":{},"modules/PaymentMethodModule.html":{},"entities/Role.html":{}}}],["users/users.module",{"_index":200,"title":{},"body":{"modules/ApiModule.html":{}}}],["users\\`(\\`guid",{"_index":857,"title":{},"body":{"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{}}}],["users_category_categories",{"_index":842,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["users_fk_1",{"_index":865,"title":{},"body":{"classes/Migrations1717483943918.html":{},"entities/User.html":{}}}],["users_fk_2",{"_index":866,"title":{},"body":{"classes/Migrations1717483943918.html":{},"entities/User.html":{}}}],["users_fk_3",{"_index":867,"title":{},"body":{"classes/Migrations1717483943918.html":{},"entities/User.html":{}}}],["users_organization_organization",{"_index":889,"title":{},"body":{"classes/Migrations1719099417082.html":{}}}],["users_payment_method_payment_method",{"_index":847,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["users_roles_fk",{"_index":863,"title":{},"body":{"classes/Migrations1717483943918.html":{},"entities/User.html":{}}}],["users_uk",{"_index":837,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["userscontroller",{"_index":1502,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userscontroller.name",{"_index":1549,"title":{},"body":{"controllers/UsersController.html":{}}}],["userservice",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{}}}],["usersguid",{"_index":843,"title":{},"body":{"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{}}}],["usersmodule",{"_index":191,"title":{"modules/UsersModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":305,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usertodelete",{"_index":1707,"title":{},"body":{"injectables/UsersService.html":{}}}],["usertodelete.deletedat",{"_index":1708,"title":{},"body":{"injectables/UsersService.html":{}}}],["usertodelete.isactive",{"_index":1710,"title":{},"body":{"injectables/UsersService.html":{}}}],["usertodelete.updatedby",{"_index":1709,"title":{},"body":{"injectables/UsersService.html":{}}}],["userupdated",{"_index":1432,"title":{},"body":{"entities/User.html":{}}}],["utf8mb4",{"_index":1889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utils.service",{"_index":1719,"title":{},"body":{"modules/UtilsModule.html":{}}}],["utilsmodule",{"_index":1713,"title":{"modules/UtilsModule.html":{}},"body":{"modules/UtilsModule.html":{},"modules.html":{},"overview.html":{}}}],["utilsservice",{"_index":1717,"title":{"injectables/UtilsService.html":{}},"body":{"modules/UtilsModule.html":{},"injectables/UtilsService.html":{},"coverage.html":{},"overview.html":{}}}],["utilsservice.name}(getyyyymmdddateformat",{"_index":1753,"title":{},"body":{"injectables/UtilsService.html":{}}}],["uuid",{"_index":1839,"title":{},"body":{"dependencies.html":{}}}],["validate",{"_index":135,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":785,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateaccesstoken",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateaccesstoken(params",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["validategoogleuser",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["validategoogleuser(params",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(params",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["validating",{"_index":1008,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["validator",{"_index":244,"title":{},"body":{"classes/ArrayGuidDTO.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateNotificationDto.html":{},"classes/CreateOrganizationDto.html":{},"classes/CreatePaymentMethodDto.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"classes/PaginationDTO.html":{},"classes/ResposeDTO.html":{},"classes/ResposeResultsPaginationDTO.html":{},"classes/ResposeSuccessDataDTO.html":{},"classes/ResposeSuccessPaginationDTO.html":{},"classes/SearchCategoryDto.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"classes/SearchUserDTO.html":{},"classes/SearchUserPaginationDTO.html":{},"classes/UpdateUserDTO.html":{},"dependencies.html":{},"classes/googleOAuthDTO.html":{}}}],["validators",{"_index":438,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["value",{"_index":141,"title":{},"body":{"injectables/ApiKeyStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{},"classes/NotificationGateway.html":{},"classes/PaginationDTO.html":{},"classes/SearchCategoryPaginationDto.html":{},"classes/SearchNotificationPaginationDto.html":{},"classes/SearchOrganizationPaginationDto.html":{},"classes/SearchPaymentMethodPaginationDto.html":{},"injectables/UtilsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":568,"title":{},"body":{"entities/Category.html":{},"entities/Notification.html":{},"entities/NotificationType.html":{},"entities/Organization.html":{},"entities/PaymentMethod.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["varchar(10",{"_index":826,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["varchar(150",{"_index":827,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["varchar(1500",{"_index":839,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["varchar(200",{"_index":825,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["varchar(250",{"_index":817,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["varchar(255",{"_index":818,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["varchar(3250",{"_index":831,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["varchar(350",{"_index":828,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["varchar(36",{"_index":815,"title":{},"body":{"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{}}}],["varchar(38",{"_index":823,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["varchar(45",{"_index":824,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["varchar(50",{"_index":816,"title":{},"body":{"classes/Migrations1717483943918.html":{},"classes/Migrations1719099417082.html":{}}}],["varchar(550",{"_index":829,"title":{},"body":{"classes/Migrations1717483943918.html":{}}}],["variable",{"_index":1772,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1872,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":35,"title":{},"body":{"controllers/ApiController.html":{},"injectables/ApiService.html":{},"properties.html":{}}}],["void",{"_index":984,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["websocketgateway",{"_index":989,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["websocketserver",{"_index":968,"title":{},"body":{"classes/NotificationGateway.html":{}}}],["whoami",{"_index":1508,"title":{},"body":{"controllers/UsersController.html":{}}}],["whoami(@req",{"_index":1559,"title":{},"body":{"controllers/UsersController.html":{}}}],["whoami(request",{"_index":1537,"title":{},"body":{"controllers/UsersController.html":{}}}],["withpassword",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["x",{"_index":130,"title":{},"body":{"injectables/ApiKeyStrategy.html":{}}}],["yyyy",{"_index":1755,"title":{},"body":{"injectables/UtilsService.html":{}}}],["zoom",{"_index":192,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/NotificationModule.html":{},"modules/OrganizationModule.html":{},"modules/PaymentMethodModule.html":{},"modules/UsersModule.html":{},"modules/UtilsModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddMessageDto.html":{"url":"classes/AddMessageDto.html","title":"class - AddMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/dto/add-message.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                body\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/notification/dto/add-message.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/notification/dto/add-message.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class AddMessageDto {\n  author: string;\n  body: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ApiController.html":{"url":"controllers/ApiController.html","title":"controller - ApiController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ApiController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api.controller.ts\n        \n\n\n\n\n            \n                Extends\n            \n            \n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getInfo\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                googleoauth\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    getInfo()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'API description and version'})\n                \n            \n\n                    \n                        \n                            Defined in src/app/api.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        googleoauth\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleoauth(body: googleOAuthDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('googleoauth')@HttpCode(HttpStatus.OK)@ApiResponse({type: ResposeSuccessDataDTO, status: undefined})@ApiResponse({type: ResposeDTO, status: undefined})@ApiResponse({type: ResposeDTO, status: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/app/api.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            googleOAuthDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(body: LoginDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@HttpCode(HttpStatus.OK)@ApiResponse({type: ResposeSuccessDataDTO, status: undefined})@ApiResponse({type: ResposeDTO, status: undefined})@ApiResponse({type: ResposeDTO, status: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/app/api.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            LoginDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, HttpCode, HttpException, HttpStatus, Inject, Post } from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { DefaultWithoutSecurityController } from 'src/app/defaults/default.without-security.controller';\nimport { ResposeDTO, ResposeSuccessDataDTO } from 'src/app/api.dto';\nimport { LoginDTO, googleOAuthDTO } from 'src/users/users.dto';\nimport { AuthService } from 'src/auth/auth.service';\nimport { ApiService } from './api.service';\n\n@Controller()\n@ApiTags('API')\nexport class ApiController extends DefaultWithoutSecurityController {\n  @Inject(ApiService)\n  private readonly apiService: ApiService;\n  @Inject(AuthService)\n  private readonly authService: AuthService;\n\n  constructor() {\n    super(ApiController);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'API description and version' })\n  getInfo(): any {\n    return this.apiService.getInfo();\n  }\n\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  @ApiResponse({ type: ResposeSuccessDataDTO, status: HttpStatus.OK })\n  @ApiResponse({ type: ResposeDTO, status: HttpStatus.INTERNAL_SERVER_ERROR })\n  @ApiResponse({ type: ResposeDTO, status: HttpStatus.NOT_FOUND })\n  async login(@Body() body: LoginDTO): Promise {\n    try {\n      const user = await this.authService.validateUser({\n        username: body.username,\n        password: body.password\n      });\n      const token = await this.authService.generateAccessToken({ user });\n      return { status: 'success', data: token };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${ApiController.name}-${error.message ?? error}`\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  @Post('googleoauth')\n  @HttpCode(HttpStatus.OK)\n  @ApiResponse({ type: ResposeSuccessDataDTO, status: HttpStatus.OK })\n  @ApiResponse({ type: ResposeDTO, status: HttpStatus.INTERNAL_SERVER_ERROR })\n  @ApiResponse({ type: ResposeDTO, status: HttpStatus.NOT_FOUND })\n  async googleoauth(@Body() body: googleOAuthDTO): Promise {\n    try {\n      const user = await this.authService.validateGoogleUser({\n        name: body.name,\n        lastname: body.lastname,\n        email: body.email,\n        googleID: body.googleID\n      });\n      const token = await this.authService.generateAccessToken({ user });\n      console.log(token);\n      return { status: 'success', data: token };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${ApiController.name}-${error.message ?? error}`\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ApiKeyStrategy.html":{"url":"injectables/ApiKeyStrategy.html","title":"injectable - ApiKeyStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ApiKeyStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategie/api-key.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'x-api-key')\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                    Readonly\n                                config\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Public\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategie/api-key.strategy.ts:16\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                            Readonly\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ConfigService\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(ConfigService)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/strategie/api-key.strategy.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(ApiKeyStrategy.name)\n                    \n                \n                    \n                        \n                                Defined in src/auth/strategie/api-key.strategy.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        validate\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/auth/strategie/api-key.strategy.ts:28\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Inject,\n  Injectable,\n  Logger,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Request } from 'express';\nimport Strategy from 'passport-headerapikey';\n\n@Injectable()\nexport class ApiKeyStrategy extends PassportStrategy(Strategy, 'x-api-key') {\n  @Inject(ConfigService)\n  private readonly config: ConfigService;\n  private readonly logger = new Logger(ApiKeyStrategy.name);\n\n  constructor() {\n    super(\n      { header: 'x-api-key', prefix: '' },\n      true,\n      (apiKey, done, request) => {\n        return this.validate(apiKey, done, request);\n      },\n    );\n  }\n\n  public validate = (\n    apiKey: string,\n    done: (error: Error, data) => any,\n    request: Request,\n  ) => {\n    const { ip, method, originalUrl } = request;\n    const userAgent = request.get('user-agent') || '';\n\n    const message = `${method} ${originalUrl} - ${userAgent} [${ip}]`;\n\n    if (this.config.get('API_KEY') !== apiKey) {\n      this.logger.error(`UNAUTHORIZED ${message}`);\n      return done(new UnauthorizedException(), null);\n    }\n\n    if (\n      originalUrl.replace(/\\//g, '') !==\n      this.config.get('BASEPATH').replace(/\\//g, '')\n    ) {\n      this.logger.log(`AUTHORIZED ${message}`);\n    }\n    done(null, true);\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ApiModule.html":{"url":"modules/ApiModule.html","title":"module - ApiModule","body":"\n                   \n\n\n\n\n    Modules\n    ApiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_providers\n\n\n\ncluster_ApiModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nAuthModule->ApiModule\n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nApiModule -->\n\nCategoriesModule->ApiModule\n\n\n\n\n\nNotificationModule\n\nNotificationModule\n\nApiModule -->\n\nNotificationModule->ApiModule\n\n\n\n\n\nOrganizationModule\n\nOrganizationModule\n\nApiModule -->\n\nOrganizationModule->ApiModule\n\n\n\n\n\nPaymentMethodModule\n\nPaymentMethodModule\n\nApiModule -->\n\nPaymentMethodModule->ApiModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nApiModule -->\n\nUsersModule->ApiModule\n\n\n\n\n\nApiService\n\nApiService\n\nApiModule -->\n\nApiService->ApiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/api.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ApiService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ApiController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CategoriesModule\n                        \n                        \n                            NotificationModule\n                        \n                        \n                            OrganizationModule\n                        \n                        \n                            PaymentMethodModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { ApiController } from './app/api.controller';\nimport { ApiService } from './app/api.service';\nimport { UsersModule } from './users/users.module';\nimport { CategoriesModule } from 'src/categories/categories.module';\nimport { PaymentMethodModule } from 'src/paymentMethod/paymentMethod.module';\nimport { NotificationModule } from 'src/notification/notification.module';\nimport { OrganizationModule } from './organization/organization.module';\n\n\n@Module({\n  imports: [UsersModule, AuthModule, CategoriesModule, PaymentMethodModule, NotificationModule, OrganizationModule],\n  providers: [ApiService],\n  controllers: [ApiController],\n  exports: []\n})\nexport class ApiModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ApiService.html":{"url":"injectables/ApiService.html","title":"injectable - ApiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ApiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            DefaultService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                    Readonly\n                                config\n                            \n                            \n                                    Public\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/api.service.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getInfo\n                        \n                    \n                \n            \n            \n                \ngetInfo()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/api.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                            Readonly\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ConfigService\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(ConfigService)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/api.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                        \n                            \n                                Inherited from         DefaultService\n\n                            \n                        \n                    \n                        \n                                Defined in         DefaultService:4\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { DefaultService } from 'src/app/defaults/defatul.service';\n\n@Injectable()\nexport class ApiService extends DefaultService {\n  @Inject(ConfigService)\n  private readonly config: ConfigService;\n\n  constructor() {\n    super(ApiService);\n  }\n\n  getInfo(): any {\n    return {\n      description: this.config.get('DESCRIPTION'),\n      version: '1.1.1',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nApiModule\n\nApiModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApiModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ApiModule\n                        \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TypeOrmConfigService } from '../../config/typeorm.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { ApiModule } from '../api.module';\nimport { AuthModule } from '../auth/auth.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ isGlobal: true }),\n    TypeOrmModule.forRootAsync({ useClass: TypeOrmConfigService }),\n    ApiModule,\n    AuthModule,\n  ],\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArrayGuidDTO.html":{"url":"classes/ArrayGuidDTO.html","title":"class - ArrayGuidDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArrayGuidDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                guids\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        guids\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({isArray: true, required: true, type: 'string'})@ArrayMinSize(1)@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/api.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayMinSize,\n  IsArray,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nexport class ArrayGuidDTO {\n  @ApiProperty({ isArray: true, required: true, type: 'string' })\n  @ArrayMinSize(1)\n  @IsArray()\n  guids: string[];\n}\n\nexport class PaginationDTO {\n  @ApiProperty({ required: true, default: 0 })\n  @IsString()\n  offset?: number;\n\n  @ApiProperty({ required: true, default: 10 })\n  @IsString()\n  pageSize?: number;\n\n  @ApiProperty({ required: false, type: 'string', default: 'name' })\n  @IsOptional()\n  @IsString()\n  orderBy?: 'name' | 'lastname' | 'username' = 'name';\n\n  @ApiProperty({ required: false, type: 'string', default: 'ASC' })\n  @IsOptional()\n  @IsString()\n  orderType?: 'ASC' | 'DESC' = 'ASC';\n}\n\nexport class ResposeDTO {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  status: 'success' | 'error';\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  message?: string;\n}\n\nexport class ResposeSuccessDataDTO {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  status: 'success' | 'error';\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  data?: any;\n}\n\nexport class ResposeResultsPaginationDTO {\n  @ApiProperty({ required: true })\n  @IsNumber()\n  total: number;\n\n  @ApiProperty({ required: true })\n  @IsNumber()\n  pageSize: number;\n\n  @ApiProperty({ required: true })\n  @IsNumber()\n  offset: number;\n\n  @ApiProperty({ required: true })\n  @IsNumber()\n  results: any[];\n}\n\nexport class ResposeSuccessPaginationDTO {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  status: 'success' | 'error';\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  data?: ResposeResultsPaginationDTO;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nApiKeyStrategy\n\nApiKeyStrategy\n\nAuthModule -->\n\nApiKeyStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ApiKeyStrategy\n                        \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { APP_GUARD } from '@nestjs/core';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { UsersModule } from 'src/users/users.module';\nimport { AuthService } from './auth.service';\nimport { RolesGuard } from './guard/roles.guard';\nimport { ApiKeyStrategy } from './strategie/api-key.strategy';\nimport { JwtStrategy } from './strategie/jwt.strategy';\n\n@Module({\n  imports: [\n    forwardRef(() => UsersModule),\n    PassportModule,\n    JwtModule.registerAsync({\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => {\n        return {\n          secret: config.get('JWT_SECRET'),\n          signOptions: { expiresIn: config.get('JWT_EXPIRE_IN') }\n        };\n      }\n    })\n  ],\n  providers: [\n    AuthService,\n    ApiKeyStrategy,\n    JwtStrategy,\n    {\n      provide: APP_GUARD,\n      useClass: RolesGuard\n    }\n  ],\n  exports: [AuthService]\n})\nexport class AuthModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                    Readonly\n                                jwtService\n                            \n                            \n                                    \n                                    Private\n                                    Readonly\n                                userService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateAccessToken\n                            \n                            \n                                    Async\n                                validateAccessToken\n                            \n                            \n                                    Async\n                                validateGoogleUser\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateAccessToken(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateAccessToken(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateGoogleUser(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                            Readonly\n                        jwtService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JwtService\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(JwtService)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                            Readonly\n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UsersService\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(UsersService)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\nimport { UsersService } from 'src/users/users.service';\nimport { User } from 'src/users/users.entity';\nimport { UsernamePasswordNoExistsException } from 'src/users/users.exception';\nimport { JWTPayloadInterface } from 'src/app/api.interface';\n\n@Injectable()\nexport class AuthService {\n  @Inject(UsersService)\n  private readonly userService: UsersService;\n  @Inject(JwtService)\n  private readonly jwtService: JwtService;\n\n  async validateUser(params: { username: string; password: string; googleID?: string }): Promise {\n    const user = await this.userService.getBy({\n      query: { username: params.username },\n      withPassword: true\n    });\n\n    if (user && (await bcrypt.compare(params.password, user.password))) {\n      user.password = undefined;\n      return user;\n    }\n    throw new UsernamePasswordNoExistsException();\n  }\n\n  async validateGoogleUser(params: { googleID: string; name: string; lastname: string; email: string }): Promise {\n    console.log('Validating Google User');\n    try {\n      const user: User = await this.userService.getBy({\n        query: { email: params.email }\n      });\n\n      const file: any = null;\n      const updatedUser = await this.userService.update(file, {\n        guid: user.guid,\n        body: {\n          googleID: params.googleID,\n          roleGuid: user.role.guid\n        },\n        updatedByGUID: user.guid\n      });\n      console.log('User updated');\n      const response = updatedUser;\n      console.log('User response', response);\n      return updatedUser;\n    } catch (error) {\n      console.log('User does not exist, creating new user...');\n      const file: any = null;\n      const newUser = await this.userService.create(file, {\n        body: {\n          password: '',\n          name: params.name,\n          lastname: params.lastname,\n          email: params.email,\n          username: params.email,\n          googleID: params.googleID,\n          roleGuid: 'R02',\n          document: '',\n          phone: '',\n          address: '',\n          birthdate: undefined,\n          profileImage: '',\n          documentSideA: '',\n          documentSideB: '',\n          backgroundCheck: '',\n          category: '[]',\n          paymentMethods: '[]',\n          backgroundCheckExpirationDate: undefined,\n          mapAdress: '',\n          backgroundCheckDate: undefined\n        }\n      });\n      return newUser;\n    }\n  }\n\n  async generateAccessToken(params: { user: User }): Promise {\n    const payload: JWTPayloadInterface = {\n      guid: params.user.guid,\n      role: params.user.role.guid,\n      username: params.user.username\n    };\n    console.log('Payload', payload);\n    console.log('User', params.user);\n    return {\n      token: this.jwtService.sign(payload),\n      user: params.user\n    };\n  }\n\n  async validateAccessToken(params: { token: string }): Promise {\n    return this.jwtService.verify(params.token);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoriesController.html":{"url":"controllers/CategoriesController.html","title":"controller - CategoriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/categories.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                categories\n            \n\n\n\n            \n                Extends\n            \n            \n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                all\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        all\n                        \n                    \n                \n            \n            \n                \n                        \n                    all(query: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all categories'})@ApiResponse({type: ResposeSuccessPaginationDTO, status: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/categories/categories.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(file: Express.Multer.File, body: CreateCategoryDto, request: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Auth(RoleEnum.Super, RoleEnum.Moderator)@UseInterceptors(undefined)@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create Category'})@ApiResponse({type: ResposeSuccessDataDTO, status: undefined})@ApiResponse({type: ResposeDTO, status: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/categories/categories.controller.ts:105\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            CreateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                request\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(guid: string, body: UpdateCategoryDto, request: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':guid')@Auth(RoleEnum.Super, RoleEnum.Moderator)@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete Category'})@ApiResponse({type: ResposeSuccessDataDTO, status: undefined})@ApiResponse({type: ResposeDTO, status: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/categories/categories.controller.ts:192\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            UpdateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                request\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(guid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':guid')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get one category by guid'})@ApiResponse({type: ResposeSuccessDataDTO, status: undefined})@ApiResponse({type: ResposeDTO, status: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/categories/categories.controller.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(file: Express.Multer.File, guid: string, body: UpdateCategoryDto, request: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':guid')@Auth(RoleEnum.Super, RoleEnum.Moderator)@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update Category'})@ApiResponse({type: ResposeSuccessDataDTO, status: undefined})@ApiResponse({type: ResposeDTO, status: undefined})@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/categories/categories.controller.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            UpdateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                request\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  FileTypeValidator,\n  Get,\n  HttpCode,\n  HttpException,\n  HttpStatus,\n  Inject,\n  MaxFileSizeValidator,\n  Param,\n  ParseFilePipe,\n  Patch,\n  Post,\n  Query,\n  Req,\n  UploadedFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport {\n  ResposeDTO,\n  ResposeSuccessDataDTO,\n  ResposeSuccessPaginationDTO,\n} from '../app/api.dto';\nimport {\n  Auth,\n  DefaultController,\n} from '../app/defaults/default.controller';\nimport { RoleEnum } from '../roles/role.enum';\nimport { User } from '../users/users.entity';\nimport { CreateCategoryDto } from '../categories/dto/create-category.dto';\nimport { UpdateCategoryDto } from '../categories/dto/update-category.dto';\nimport { Category } from '../categories/entities/category.entity';\nimport { CategoriesService } from './categories.service';\n\n@Controller('categories')\n@ApiTags('Categories')\nexport class CategoriesController extends DefaultController {\n  @Inject(CategoriesService)\n  private readonly categoryService: CategoriesService;\n\n  constructor() {\n    super(CategoriesController);\n  }\n\n  @Get()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get all categories' })\n  @ApiResponse({ type: ResposeSuccessPaginationDTO, status: HttpStatus.OK })\n  async all(@Query() query: any): Promise {\n    try {\n      return {\n        status: 'success',\n        data: await this.categoryService.all({ query: query }),\n      };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${CategoriesController.name}-${error.message ?? error}`,\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Get(':guid')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get one category by guid' })\n  @ApiResponse({ type: ResposeSuccessDataDTO, status: HttpStatus.OK })\n  @ApiResponse({ type: ResposeDTO, status: HttpStatus.NOT_FOUND })\n  async findOne(@Param('guid') guid: string): Promise {\n    try {\n      const category = await this.categoryService.getBy({\n        query: { guid: guid },\n      });\n      return { status: 'success', data: category };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${CategoriesController.name}-${error.message ?? error}`,\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Post()\n  @Auth(RoleEnum.Super, RoleEnum.Moderator)\n  @UseInterceptors(\n    FileInterceptor('image', {\n      dest: './uploads/temp',\n    }),\n  )\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOperation({ summary: 'Create Category' })\n  @ApiResponse({ type: ResposeSuccessDataDTO, status: HttpStatus.CREATED })\n  @ApiResponse({ type: ResposeDTO, status: HttpStatus.CONFLICT })\n  async create(\n    @UploadedFile(\n      new ParseFilePipe({\n        validators: [\n          new FileTypeValidator({ fileType: '.(png|jpeg|jpg)' }),\n          new MaxFileSizeValidator({\n            maxSize: 20000000,\n          }),\n        ],\n        fileIsRequired: false,\n      }),\n    )\n    file: Express.Multer.File,\n    @Body() body: CreateCategoryDto,\n    @Req() request: { user: User },\n  ): Promise {\n    try {\n      const category: Category = await this.categoryService.create(file, {\n        body: body,\n        createdByGUID: request.user.guid,\n      });\n      return { status: 'success', data: category };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${CategoriesController.name}-${error.message ?? error}`,\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Patch(':guid')\n  @Auth(RoleEnum.Super, RoleEnum.Moderator)\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Update Category' })\n  @ApiResponse({ type: ResposeSuccessDataDTO, status: HttpStatus.OK })\n  @ApiResponse({ type: ResposeDTO, status: HttpStatus.NOT_FOUND })\n  @UseInterceptors(\n    FileInterceptor('image', {\n      dest: './uploads/temp',\n    }),\n  )\n  async update(\n    @UploadedFile(\n      new ParseFilePipe({\n        validators: [\n          new FileTypeValidator({ fileType: '.(png|jpeg|jpg)' }),\n          new MaxFileSizeValidator({\n            maxSize: 20000000,\n          }),\n        ],\n        fileIsRequired: false,\n      }),\n    )\n    file: Express.Multer.File,\n    @Param('guid') guid: string,\n    @Body() body: UpdateCategoryDto,\n    @Req() request: { user: User },\n  ): Promise {\n    try {\n      const updatedCategory = await this.categoryService.update(file, {\n        guid: guid,\n        body: body,\n        updatedByGUID: request.user.guid,\n      });\n      return { status: 'success', data: updatedCategory };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${CategoriesController.name}-${error.message ?? error}`,\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  @Delete(':guid')\n  @Auth(RoleEnum.Super, RoleEnum.Moderator)\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Delete Category' })\n  @ApiResponse({ type: ResposeSuccessDataDTO, status: HttpStatus.OK })\n  @ApiResponse({ type: ResposeDTO, status: HttpStatus.NOT_FOUND })\n  async delete(\n    @Param('guid') guid: string,\n    @Body() body: UpdateCategoryDto,\n    @Req() request: { user: User },\n  ): Promise {\n    try {\n      const category = await this.categoryService.delete({\n        guid: guid,\n        deletedByGUID: request.user.guid,\n      });\n      return { status: 'success', data: category };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${CategoriesController.name}-${error.message ?? error}`,\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoriesModule.html":{"url":"modules/CategoriesModule.html","title":"module - CategoriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_exports\n\n\n\ncluster_CategoriesModule_providers\n\n\n\n\nCategoriesService \n\nCategoriesService \n\n\n\nCategoriesModule\n\nCategoriesModule\n\nCategoriesService  -->\n\nCategoriesModule->CategoriesService \n\n\n\n\n\nCategoriesService\n\nCategoriesService\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/categories/categories.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoriesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CategoriesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CategoriesService } from './categories.service';\nimport { CategoriesController } from './categories.controller';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../users/users.entity';\nimport { Category } from './entities/category.entity';\n\n@Module({\n  imports: [ConfigModule, TypeOrmModule.forFeature([User, Category])],\n  controllers: [CategoriesController],\n  providers: [CategoriesService],\n  exports: [CategoriesService],\n})\nexport class CategoriesModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoriesService.html":{"url":"injectables/CategoriesService.html","title":"injectable - CategoriesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/categories.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            DefaultService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                    Readonly\n                                categoryRepository\n                            \n                            \n                                    \n                                    Private\n                                    Readonly\n                                userRepository\n                            \n                            \n                                    Public\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                all\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getBy\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/categories/categories.service.ts:19\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        all\n                        \n                    \n                \n            \n            \n                \n                        \n                    all(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/categories/categories.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(file: Express.Multer.File, params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/categories/categories.service.ts:128\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/categories/categories.service.ts:187\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getBy\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBy(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/categories/categories.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(file: Express.Multer.File, params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/categories/categories.service.ts:153\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                            Readonly\n                        categoryRepository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(Category)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/categories.service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                            Readonly\n                        userRepository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(User)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/categories.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                        \n                            \n                                Inherited from         DefaultService\n\n                            \n                        \n                    \n                        \n                                Defined in         DefaultService:4\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { saveFile } from 'src/app/utils/filePersistor';\nimport { IsNull, Like, Repository } from 'typeorm';\nimport { ResposeResultsPaginationDTO } from '../app/api.dto';\nimport { DefaultService } from '../app/defaults/defatul.service';\nimport { User } from '../users/users.entity';\nimport { Category } from '../categories/entities/category.entity';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { SearchCategoryDto } from './dto/search-category.dto';\nimport { SearchCategoryPaginationDto } from './dto/search-pagination-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport { error } from 'console';\n@Injectable()\nexport class CategoriesService extends DefaultService {\n  @InjectRepository(Category)\n  private readonly categoryRepository: Repository;\n  @InjectRepository(User)\n  private readonly userRepository: Repository;\n\n  constructor() {\n    super(CategoriesService);\n  }\n\n  async getBy(params: { query: SearchCategoryDto }): Promise {\n    try {\n      const category = await this.categoryRepository.findOne({\n        select: {\n          guid: true,\n          name: true,\n          description: true,\n          createdAt: true,\n          updatedAt: true,\n          isActive: true,\n          image: true,\n          createdBy: {\n            guid: true,\n            name: true,\n            lastname: true,\n            email: true,\n            createdAt: true,\n            updatedAt: true,\n            password: false,\n          },\n        },\n        relations: ['createdBy', 'updatedBy', 'deletedBy'],\n        where: {\n          guid: params.query.guid || undefined,\n          name: params.query.name || undefined,\n          isActive: params.query.isActive || undefined,\n          description: params.query.description || undefined,\n          deletedAt: IsNull(),\n        },\n      });\n      return category;\n    } catch (error) {\n      throw new Error(`${CategoriesService.name}[getBy]:${error.message}`);\n    }\n  }\n\n  async all(params: {\n    query: SearchCategoryPaginationDto;\n  }): Promise {\n    const emptyResponse = {\n      total: 0,\n      pageSize: 0,\n      offset: params.query.offset,\n      results: [],\n    };\n    try {\n      if (Object.keys(params.query).length === 0) {\n        return emptyResponse;\n      }\n\n      if (params.query.pageSize?.toString() === '0') {\n        return emptyResponse;\n      }\n\n      const order = {};\n      if (params.query.orderBy && params.query.orderType) {\n        order[params.query.orderBy] = params.query.orderType;\n      }\n\n      const [categories, total] = await this.categoryRepository.findAndCount({\n        select: {\n          guid: true,\n          name: true,\n          description: true,\n          image: true,\n          createdAt: true,\n          updatedAt: true,\n          isActive: true,\n          createdBy: {\n            guid: true,\n            name: true,\n            lastname: true,\n            email: true,\n            createdAt: true,\n            updatedAt: true,\n            password: false,\n          },\n        },\n        relations: ['createdBy', 'updatedBy'],\n        where: {\n          deletedAt: IsNull(),\n          name: params.query.name ? Like(`%${params.query.name}%`) : undefined,\n          isActive: params.query.isActive || undefined,\n          description: params.query.description\n            ? Like(`%${params.query.description}%`)\n            : undefined,\n        },\n        order,\n        take: params.query.pageSize,\n        skip: params.query.offset,\n      });\n\n      return {\n        total,\n        pageSize: params.query.pageSize * 1,\n        offset: params.query.offset * 1,\n        results: categories,\n      };\n    } catch (error) {\n      throw new Error(`${CategoriesService.name}[all]:${error.message}`);\n    }\n  }\n\n  async create(\n    file: Express.Multer.File,\n    params: {\n      body: CreateCategoryDto;\n      createdByGUID?: string;\n    },\n  ): Promise {\n    try {\n      if (file) {\n        saveFile(file);\n      }\n      const category = await this.categoryRepository.save({\n        name: params.body.name,\n        description: params.body.description || '',\n        image: file?.filename || '',\n        isActive: params.body.isActive === undefined ? 1 : params.body.isActive,\n        createdBy: { guid: params.createdByGUID },\n      });\n\n      return category;\n    } catch (error) {\n      throw new Error(`${CategoriesService.name}[create]:${error.message}`);\n    }\n  }\n\n  async update(\n    file: Express.Multer.File,\n    params: {\n      guid: string;\n      body: UpdateCategoryDto;\n      updatedByGUID: string;\n    },\n  ): Promise {\n    try {\n      if (file) {\n        saveFile(file);\n      }\n      const category = await this.categoryRepository.findOne({\n        where: { guid: params.guid, deletedAt: IsNull() },\n      });\n      if (!category) {\n        throw new error('CategoryNoExists');\n      }\n      category.name = params.body.name || category.name;\n      category.description = params.body.description || category.description;\n      category.image = file?.filename || category.image;\n\n      category.isActive =\n        params.body.isActive !== undefined\n          ? params.body.isActive\n          : category.isActive;\n\n      // category.updatedBy = { guid: params.updatedByGUID };\n      return await this.categoryRepository.save(category);\n    } catch (error) {\n      throw new Error(`${CategoriesService.name}[update]:${error.message}`);\n    }\n  }\n\n  async delete(params: {\n    guid: string;\n    deletedByGUID: string;\n  }): Promise {\n    try {\n      const category = await this.categoryRepository.findOne({\n        where: { guid: params.guid, deletedAt: IsNull() },\n      });\n      if (!category) {\n        throw new error('CategoryNoExists');\n      }\n\n      const user = await this.userRepository.findOne({\n        where: { guid: params.deletedByGUID },\n      });\n      if (!user) {\n        throw new Error('UserNoExists');\n      }\n\n      category.deletedAt = new Date();\n      category.deletedBy = user;\n      return await this.categoryRepository.save(category);\n    } catch (error) {\n      throw new Error(`${CategoriesService.name}[delete]:${error.message}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Category.html":{"url":"entities/Category.html","title":"entity - Category","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/entities/category.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                category\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                createdBy\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                    Optional\n                                deletedBy\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                guid\n                            \n                            \n                                    \n                                image\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    Optional\n                                updatedBy\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category\n\n                    \n                \n                    \n                        \n                                Defined in src/categories/entities/category.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/entities/category.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.userCreated, {nullable: true, onDelete: 'NO ACTION', onUpdate: 'NO ACTION'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/entities/category.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/entities/category.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.userDeleted, {nullable: true, onDelete: 'NO ACTION', onUpdate: 'NO ACTION'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/entities/category.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 250, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/entities/category.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/entities/category.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/entities/category.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'tinyint', nullable: false, default: '1'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/entities/category.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 50, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/entities/category.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/entities/category.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        updatedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.userUpdated, {nullable: true, onDelete: 'NO ACTION', onUpdate: 'NO ACTION'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/entities/category.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.category)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/entities/category.entity.ts:62\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n  ManyToOne,\n  ManyToMany,\n  OneToMany,\n} from 'typeorm';\nimport { User } from '../../users/users.entity';\n\n\n@Entity({ name: 'Categories' })\nexport class Category {\n  @PrimaryGeneratedColumn('uuid')\n  guid: string;\n\n  @Column({ type: 'varchar', length: 50, nullable: false })\n  name: string;\n\n  @Column({ type: 'varchar', length: 250, nullable: true })\n  description: string;\n\n  @Column({ type: 'tinyint', nullable: false, default: '1' })\n  isActive: number;\n\n  @Column()\n  image: string;\n\n  @ManyToOne(() => User, (user) => user.userCreated, {\n    nullable: true,\n    onDelete: 'NO ACTION',\n    onUpdate: 'NO ACTION',\n  })\n  createdBy?: User;\n\n  @ManyToOne(() => User, (user) => user.userUpdated, {\n    nullable: true,\n    onDelete: 'NO ACTION',\n    onUpdate: 'NO ACTION',\n  })\n  updatedBy?: User;\n\n  @ManyToOne(() => User, (user) => user.userDeleted, {\n    nullable: true,\n    onDelete: 'NO ACTION',\n    onUpdate: 'NO ACTION',\n  })\n  deletedBy?: User;\n\n  @CreateDateColumn({ type: 'timestamp' })\n  createdAt: Date;\n\n  @UpdateDateColumn({ type: 'timestamp' })\n  updatedAt: Date;\n\n  @Column({ type: 'timestamp', nullable: true })\n  deletedAt?: Date;\n\n  @ManyToMany(() => User, (user) => user.category)\n  users: User[];\n  category: Category;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dto/create-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                image\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/create-category.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsString()@IsOptional()@MaxLength(250)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/create-category.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/create-category.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@MinLength(3)@MaxLength(50)@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/create-category.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateCategoryDto {\n  @ApiProperty({ required: true })\n  @MinLength(3)\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  description: string;\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  @MaxLength(250)\n  image: string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  isActive?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateNotificationDto.html":{"url":"classes/CreateNotificationDto.html","title":"class - CreateNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/dto/create-notification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                link\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/dto/create-notification.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/dto/create-notification.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        link\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/dto/create-notification.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/dto/create-notification.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsOptional, IsString, MaxLength, MinLength } from 'class-validator';\n\nexport class CreateNotificationDto {\n  @ApiProperty()\n  @IsString()\n  title?: string;\n\n  @ApiProperty()\n  @IsString()\n  description?: string;\n\n  @ApiProperty()\n  @IsString()\n  link?: string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  isActive?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateOrganizationDto.html":{"url":"classes/CreateOrganizationDto.html","title":"class - CreateOrganizationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateOrganizationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/organization/dto/create-organization.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/create-organization.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/create-organization.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@MinLength(3)@MaxLength(50)@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/create-organization.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsOptional, IsString, MaxLength, MinLength } from 'class-validator';\n\nexport class CreateOrganizationDto {\n  @ApiProperty({ required: true })\n  @MinLength(3)\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  isActive?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePaymentMethodDto.html":{"url":"classes/CreatePaymentMethodDto.html","title":"class - CreatePaymentMethodDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePaymentMethodDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/paymentMethod/dto/create-paymentMethod.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paymentMethod/dto/create-paymentMethod.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@MinLength(3)@MaxLength(50)@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paymentMethod/dto/create-paymentMethod.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsOptional, IsString, MaxLength, MinLength } from 'class-validator';\n\nexport class CreatePaymentMethodDto {\n  @ApiProperty({ required: true })\n  @MinLength(3)\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  isActive?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDTO.html":{"url":"classes/CreateUserDTO.html","title":"class - CreateUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                address\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                availability\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                backgroundCheck\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                backgroundCheckDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                backgroundCheckExpirationDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                birthdate\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                category\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                document\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                documentSideA\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                documentSideB\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                googleID\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isAvailable\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isProfessional\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastname\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                mapAdress\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                paymentMethods\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                phone\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                profileImage\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                roleGuid\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@MaxLength(50)@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:114\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        availability\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:174\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        backgroundCheck\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsString()@IsOptional()@MaxLength(250)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        backgroundCheckDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@MaxLength(50)@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        backgroundCheckExpirationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@MaxLength(50)@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        birthdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@MaxLength(50)@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:170\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:179\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        document\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@MaxLength(10)@MinLength(7)@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        documentSideA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsString()@IsOptional()@MaxLength(250)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        documentSideB\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsString()@IsOptional()@MaxLength(250)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@MaxLength(50)@IsNotEmpty()@IsOptional()@IsString()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:122\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        googleID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@MaxLength(50)@IsNotEmpty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:129\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:148\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isAvailable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:183\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isProfessional\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'number'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:152\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@MinLength(3)@MaxLength(50)@IsNotEmpty()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:144\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        mapAdress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@MaxLength(150)@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@MinLength(3)@MaxLength(50)@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@MinLength(3)@MaxLength(70)@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:159\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        paymentMethods\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:188\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@MaxLength(50)@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        profileImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsString()@IsOptional()@MaxLength(250)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        roleGuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoleEnum | string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, enum: RoleEnum, type: 'string'})@IsOptional()@IsNotEmpty()@IsEnum(RoleEnum, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:165\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@MaxLength(50)@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:47\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsEmail, IsEnum, IsNotEmpty, IsOptional, IsString, MaxLength, MinLength } from 'class-validator';\nimport { RoleEnum } from 'src/roles/role.enum';\n\nexport class LoginDTO {\n  @ApiProperty({ required: true })\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsString()\n  username: string;\n\n  @ApiProperty({ required: true })\n  @MinLength(3)\n  @MaxLength(70)\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\nexport class googleOAuthDTO {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  googleID: string;\n\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  email: string;\n\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  lastname: string;\n}\n\nexport class CreateUserDTO {\n  @ApiProperty({ required: true })\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsString()\n  username: string;\n\n  @ApiProperty({ required: true })\n  @MaxLength(10)\n  @MinLength(7)\n  @IsNotEmpty()\n  @IsString()\n  document: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsString()\n  @IsOptional()\n  phone: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsString()\n  @IsOptional()\n  birthdate: Date;\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  @MaxLength(250)\n  profileImage: string;\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  @MaxLength(250)\n  documentSideA: string;\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  @MaxLength(250)\n  documentSideB: string;\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  @MaxLength(250)\n  backgroundCheck: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsString()\n  @IsOptional()\n  backgroundCheckDate: Date;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsString()\n  @IsOptional()\n  backgroundCheckExpirationDate: Date;\n\n  @ApiProperty({ required: false })\n  @MaxLength(150)\n  @IsString()\n  @IsOptional()\n  mapAdress: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsOptional()\n  @IsString()\n  address: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsOptional()\n  @IsString()\n  @IsEmail()\n  email?: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsOptional()\n  @IsString()\n  googleID?: string;\n\n  @ApiProperty({ required: true })\n  @MinLength(3)\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @ApiProperty({ required: false })\n  @MinLength(3)\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsOptional()\n  @IsString()\n  lastname?: string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  isActive?: number;\n\n  @ApiProperty({ type: 'number' })\n  @IsOptional()\n  isProfessional?: number;\n\n  @ApiProperty({ required: false })\n  @MinLength(3)\n  @MaxLength(70)\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n\n  @ApiProperty({ required: false, enum: RoleEnum, type: 'string' })\n  @IsOptional()\n  @IsNotEmpty()\n  @IsEnum(RoleEnum, { each: true })\n  roleGuid: RoleEnum | string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  @IsString()\n  category?: string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  availability?: {};\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  isAvailable?: number;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  @IsString()\n  paymentMethods?: string;\n}\n\nexport class UpdateUserDTO extends PartialType(CreateUserDTO) { }\n\nexport class SearchUserDTO {\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  guid?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  username?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  document?: string;\n\n  @ApiProperty({ type: 'number' })\n  @IsOptional()\n  isProfessional?: number;\n\n  @ApiProperty({ type: 'number', required: false })\n  @IsOptional()\n  isActive?: number;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  password?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  googleID?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  email?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  category?: string;\n}\n\nexport class SearchUserPaginationDTO {\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  guid?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  paymentMethod?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  phone?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  lastname?: string;\n\n  @ApiProperty({ type: 'number', required: false })\n  @IsOptional()\n  isProfessional?: number;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  email?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  mapAdress?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  username?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  document?: string;\n\n  @ApiProperty({ type: 'number', required: false })\n  @IsOptional()\n  isActive?: number;\n\n  @ApiProperty({ required: false, enum: RoleEnum, type: 'string' })\n  @IsOptional()\n  @IsEnum(RoleEnum, { each: true })\n  roleGuid: RoleEnum | string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  createdByGuid?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  updatedByGuid?: string;\n\n  @ApiProperty({ required: true, default: 0 })\n  @IsOptional()\n  offset?: any;\n\n  @ApiProperty({ required: true, default: 10 })\n  @IsOptional()\n  pageSize?: any;\n\n  @ApiProperty({ required: false, type: 'string', default: 'name' })\n  @IsOptional()\n  @IsString()\n  orderBy?: 'name' | 'lastname' | 'username';\n\n  @ApiProperty({ required: false, type: 'string', default: 'ASC' })\n  @IsOptional()\n  @IsString()\n  orderType?: 'ASC' | 'DESC';\n\n  @ApiProperty({ required: false, type: 'string', default: '' })\n  @IsOptional()\n  @IsString()\n  category?: string;\n\n  @ApiProperty({ required: false, type: 'string', default: '' })\n  @IsOptional()\n  @IsString()\n  categoryID?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomException.html":{"url":"classes/CustomException.html","title":"class - CustomException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/notification.exeptions.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, status: number)\n                    \n                \n                        \n                            \n                                Defined in src/notification/notification.exeptions.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        status\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\nexport class NotificationAlreadyExistsException extends HttpException {\n  constructor() {\n    super('Notification already exists', HttpStatus.CONFLICT);\n  }\n}\n\nexport class NotificationNoExistsException extends HttpException {\n  constructor() {\n    super('Notification does not exist', HttpStatus.NOT_FOUND);\n  }\n}\n\nexport class CustomException extends HttpException {\n  constructor(message: string, status: number) {\n    super(message, status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomException-1.html":{"url":"classes/CustomException-1.html","title":"class - CustomException-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/organization/organization.exeptions.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, status: number)\n                    \n                \n                        \n                            \n                                Defined in src/organization/organization.exeptions.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        status\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\nexport class OrganizationAlreadyExistsException extends HttpException {\n  constructor() {\n    super('Organization already exists', HttpStatus.CONFLICT);\n  }\n}\n\nexport class OrganizationNoExistsException extends HttpException {\n  constructor() {\n    super('Organization does not exist', HttpStatus.NOT_FOUND);\n  }\n}\n\nexport class CustomException extends HttpException {\n  constructor(message: string, status: number) {\n    super(message, status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomException-2.html":{"url":"classes/CustomException-2.html","title":"class - CustomException-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/paymentMethod/paymentMethod.exeptions.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, status: number)\n                    \n                \n                        \n                            \n                                Defined in src/paymentMethod/paymentMethod.exeptions.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        status\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\nexport class PaymentMethodAlreadyExistsException extends HttpException {\n  constructor() {\n    super('PaymentMethod already exists', HttpStatus.CONFLICT);\n  }\n}\n\nexport class PaymentMethodNoExistsException extends HttpException {\n  constructor() {\n    super('PaymentMethod does not exist', HttpStatus.NOT_FOUND);\n  }\n}\n\nexport class CustomException extends HttpException {\n  constructor(message: string, status: number) {\n    super(message, status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CustomException-3.html":{"url":"classes/CustomException-3.html","title":"class - CustomException-3","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CustomException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, status: number)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.exception.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        status\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\nexport class UserAlreadyExistsException extends HttpException {\n  constructor() {\n    super('User already exists', HttpStatus.CONFLICT);\n  }\n}\n\nexport class UserNoExistsException extends HttpException {\n  constructor() {\n    super('User does not exist', HttpStatus.NOT_FOUND);\n  }\n}\n\nexport class UsernamePasswordNoExistsException extends HttpException {\n  constructor() {\n    super('Wrong username and/or password', HttpStatus.NOT_FOUND);\n  }\n}\n\n//custom exceptions that recieve a message\nexport class CustomException extends HttpException {\n  constructor(message: string, status: number) {\n    super(message, status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DefaultController.html":{"url":"classes/DefaultController.html","title":"class - DefaultController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefaultController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/defaults/default.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                logger\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(object)\n                    \n                \n                        \n                            \n                                Defined in src/app/defaults/default.controller.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        object\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/app/defaults/default.controller.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus, Logger, UseGuards, applyDecorators } from '@nestjs/common';\nimport { ApiBearerAuth, ApiResponse } from '@nestjs/swagger';\nimport { Roles } from '../../roles/decorators/roles.decorator';\nimport { ResposeDTO } from '../api.dto';\nimport { RoleEnum } from '../../roles/role.enum';\nimport { JwtAuthGuard } from '../../auth/guard/jwt-auth.guard';\nimport { RolesGuard } from '../../auth/guard/roles.guard';\nexport const Auth = (...roles: RoleEnum[]) =>\n  applyDecorators(\n    UseGuards(JwtAuthGuard),\n    Roles(...roles),\n    UseGuards(RolesGuard),\n  );\n\n@ApiBearerAuth()\n// @UseGuards(JwtAuthGuard)\n@ApiResponse({ type: ResposeDTO, status: HttpStatus.INTERNAL_SERVER_ERROR })\nexport class DefaultController {\n  public logger: Logger;\n\n  constructor(private object) {\n    this.logger = new Logger(this.object.name);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DefaultService.html":{"url":"classes/DefaultService.html","title":"class - DefaultService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefaultService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/defaults/defatul.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                logger\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(object)\n                    \n                \n                        \n                            \n                                Defined in src/app/defaults/defatul.service.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        object\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/app/defaults/defatul.service.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\n\nexport class DefaultService {\n  public logger: Logger;\n\n  constructor(private object) {\n    this.logger = new Logger(this.object.name);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DefaultWithoutSecurityController.html":{"url":"classes/DefaultWithoutSecurityController.html","title":"class - DefaultWithoutSecurityController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefaultWithoutSecurityController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/defaults/default.without-security.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                logger\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(object)\n                    \n                \n                        \n                            \n                                Defined in src/app/defaults/default.without-security.controller.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        object\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/app/defaults/default.without-security.controller.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Logger } from '@nestjs/common';\n\nexport class DefaultWithoutSecurityController {\n  public logger: Logger;\n\n  constructor(private object) {\n    this.logger = new Logger(this.object.name);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JWTPayloadInterface.html":{"url":"interfaces/JWTPayloadInterface.html","title":"interface - JWTPayloadInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JWTPayloadInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            guid\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        guid\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        guid:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JWTPayloadInterface {\n  guid: string;\n  role: string;\n  username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                            \n                                    \n                                    Private\n                                    Readonly\n                                reflector\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/jwt-auth.guard.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user, info, context)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/jwt-auth.guard.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                info\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger('API')\n                    \n                \n                    \n                        \n                                Defined in src/auth/guard/jwt-auth.guard.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                            Readonly\n                        reflector\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Reflector\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(Reflector)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/guard/jwt-auth.guard.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n  Logger,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from '../../roles/decorators/public.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  @Inject(Reflector)\n  private readonly reflector: Reflector;\n  private logger: Logger = new Logger('API');\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.get(IS_PUBLIC_KEY, context.getHandler());\n    if (isPublic) return true;\n    return super.canActivate(context);\n  }\n\n  handleRequest(err, user, info, context) {\n    const request = context.switchToHttp().getRequest();\n    const { ip, method, originalUrl } = request;\n    const userAgent = request.get('user-agent') || '';\n    const message = `${method} ${originalUrl} - ${userAgent} [${ip}]`;\n\n    if (err || !user) {\n      this.logger.error(\n        `UNAUTHORIZED ${message}${err ? ` - ${err.message}` : ''}`,\n      );\n      throw new HttpException(\n        {\n          status: 'error',\n          message:\n            err && err.message\n              ? err.message\n              : 'Action not allowed. You must login.',\n        },\n        HttpStatus.UNAUTHORIZED,\n      );\n    }\n    this.logger.warn(`AUTHORIZED ${message}`);\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategie/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'jwt')\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                    Readonly\n                                config\n                            \n                            \n                                    Private\n                                logger\n                            \n                            \n                                    \n                                    Private\n                                    Readonly\n                                userService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategie/jwt.strategy.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: JWTPayloadInterface)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategie/jwt.strategy.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JWTPayloadInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                            Readonly\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ConfigService\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(ConfigService)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/strategie/jwt.strategy.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(JwtStrategy.name)\n                    \n                \n                    \n                        \n                                Defined in src/auth/strategie/jwt.strategy.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                            Readonly\n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UsersService\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(UsersService)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/strategie/jwt.strategy.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Inject,\n  Injectable,\n  Logger,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UsersService } from 'src/users/users.service';\nimport { JWTPayloadInterface } from 'src/app/api.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  @Inject(UsersService)\n  private readonly userService: UsersService;\n  @Inject(ConfigService)\n  private readonly config: ConfigService;\n  private logger: Logger = new Logger(JwtStrategy.name);\n\n  constructor(config: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: config.get('JWT_SECRET'),\n    });\n  }\n\n  public async validate(payload: JWTPayloadInterface): Promise {\n    try {\n      return await this.userService.getBy({\n        query: { guid: payload.guid },\n        withPassword: true,\n      });\n    } catch (error) {\n      throw new UnauthorizedException(\n        `${JwtStrategy.name}[validate]:Action not allowed`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDTO.html":{"url":"classes/LoginDTO.html","title":"class - LoginDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@MinLength(3)@MaxLength(70)@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@MaxLength(50)@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsEmail, IsEnum, IsNotEmpty, IsOptional, IsString, MaxLength, MinLength } from 'class-validator';\nimport { RoleEnum } from 'src/roles/role.enum';\n\nexport class LoginDTO {\n  @ApiProperty({ required: true })\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsString()\n  username: string;\n\n  @ApiProperty({ required: true })\n  @MinLength(3)\n  @MaxLength(70)\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\nexport class googleOAuthDTO {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  googleID: string;\n\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  email: string;\n\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  lastname: string;\n}\n\nexport class CreateUserDTO {\n  @ApiProperty({ required: true })\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsString()\n  username: string;\n\n  @ApiProperty({ required: true })\n  @MaxLength(10)\n  @MinLength(7)\n  @IsNotEmpty()\n  @IsString()\n  document: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsString()\n  @IsOptional()\n  phone: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsString()\n  @IsOptional()\n  birthdate: Date;\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  @MaxLength(250)\n  profileImage: string;\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  @MaxLength(250)\n  documentSideA: string;\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  @MaxLength(250)\n  documentSideB: string;\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  @MaxLength(250)\n  backgroundCheck: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsString()\n  @IsOptional()\n  backgroundCheckDate: Date;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsString()\n  @IsOptional()\n  backgroundCheckExpirationDate: Date;\n\n  @ApiProperty({ required: false })\n  @MaxLength(150)\n  @IsString()\n  @IsOptional()\n  mapAdress: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsOptional()\n  @IsString()\n  address: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsOptional()\n  @IsString()\n  @IsEmail()\n  email?: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsOptional()\n  @IsString()\n  googleID?: string;\n\n  @ApiProperty({ required: true })\n  @MinLength(3)\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @ApiProperty({ required: false })\n  @MinLength(3)\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsOptional()\n  @IsString()\n  lastname?: string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  isActive?: number;\n\n  @ApiProperty({ type: 'number' })\n  @IsOptional()\n  isProfessional?: number;\n\n  @ApiProperty({ required: false })\n  @MinLength(3)\n  @MaxLength(70)\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n\n  @ApiProperty({ required: false, enum: RoleEnum, type: 'string' })\n  @IsOptional()\n  @IsNotEmpty()\n  @IsEnum(RoleEnum, { each: true })\n  roleGuid: RoleEnum | string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  @IsString()\n  category?: string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  availability?: {};\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  isAvailable?: number;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  @IsString()\n  paymentMethods?: string;\n}\n\nexport class UpdateUserDTO extends PartialType(CreateUserDTO) { }\n\nexport class SearchUserDTO {\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  guid?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  username?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  document?: string;\n\n  @ApiProperty({ type: 'number' })\n  @IsOptional()\n  isProfessional?: number;\n\n  @ApiProperty({ type: 'number', required: false })\n  @IsOptional()\n  isActive?: number;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  password?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  googleID?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  email?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  category?: string;\n}\n\nexport class SearchUserPaginationDTO {\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  guid?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  paymentMethod?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  phone?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  lastname?: string;\n\n  @ApiProperty({ type: 'number', required: false })\n  @IsOptional()\n  isProfessional?: number;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  email?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  mapAdress?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  username?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  document?: string;\n\n  @ApiProperty({ type: 'number', required: false })\n  @IsOptional()\n  isActive?: number;\n\n  @ApiProperty({ required: false, enum: RoleEnum, type: 'string' })\n  @IsOptional()\n  @IsEnum(RoleEnum, { each: true })\n  roleGuid: RoleEnum | string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  createdByGuid?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  updatedByGuid?: string;\n\n  @ApiProperty({ required: true, default: 0 })\n  @IsOptional()\n  offset?: any;\n\n  @ApiProperty({ required: true, default: 10 })\n  @IsOptional()\n  pageSize?: any;\n\n  @ApiProperty({ required: false, type: 'string', default: 'name' })\n  @IsOptional()\n  @IsString()\n  orderBy?: 'name' | 'lastname' | 'username';\n\n  @ApiProperty({ required: false, type: 'string', default: 'ASC' })\n  @IsOptional()\n  @IsString()\n  orderType?: 'ASC' | 'DESC';\n\n  @ApiProperty({ required: false, type: 'string', default: '' })\n  @IsOptional()\n  @IsString()\n  category?: string;\n\n  @ApiProperty({ required: false, type: 'string', default: '' })\n  @IsOptional()\n  @IsString()\n  categoryID?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Migrations1717483943918.html":{"url":"classes/Migrations1717483943918.html","title":"class - Migrations1717483943918","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Migrations1717483943918\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1717483943918-CREATE-DB.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Migrations1717483943918'\n                    \n                \n                    \n                        \n                                Defined in migrations/1717483943918-CREATE-DB.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in migrations/1717483943918-CREATE-DB.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in migrations/1717483943918-CREATE-DB.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class Migrations1717483943918 implements MigrationInterface {\n    name = 'Migrations1717483943918'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`Categories\\` (\\`guid\\` varchar(36) NOT NULL, \\`name\\` varchar(50) NOT NULL, \\`description\\` varchar(250) NULL, \\`isActive\\` tinyint NOT NULL DEFAULT '1', \\`image\\` varchar(255) NOT NULL, \\`createdAt\\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`deletedAt\\` timestamp NULL, \\`createdByGuid\\` varchar(36) NULL, \\`updatedByGuid\\` varchar(36) NULL, \\`deletedByGuid\\` varchar(36) NULL, PRIMARY KEY (\\`guid\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`CREATE TABLE \\`PaymentMethod\\` (\\`guid\\` varchar(36) NOT NULL, \\`name\\` varchar(50) NOT NULL, \\`isActive\\` tinyint NOT NULL DEFAULT '1', \\`createdAt\\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`deletedAt\\` timestamp NULL, \\`createdByGuid\\` varchar(36) NULL, \\`updatedByGuid\\` varchar(36) NULL, \\`deletedByGuid\\` varchar(36) NULL, PRIMARY KEY (\\`guid\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`CREATE TABLE \\`Roles\\` (\\`guid\\` varchar(38) NOT NULL, \\`role\\` varchar(45) NOT NULL, \\`description\\` varchar(200) NULL, PRIMARY KEY (\\`guid\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`CREATE TABLE \\`Users\\` (\\`guid\\` varchar(36) NOT NULL, \\`document\\` varchar(10) NULL, \\`name\\` varchar(50) NOT NULL, \\`lastname\\` varchar(50) NULL, \\`email\\` varchar(50) NOT NULL, \\`address\\` varchar(50) NULL, \\`birthdate\\` date NULL, \\`profileImage\\` varchar(255) NOT NULL, \\`documentSideA\\` varchar(255) NOT NULL, \\`documentSideB\\` varchar(255) NOT NULL, \\`backgroundCheck\\` varchar(255) NOT NULL, \\`backgroundCheckDate\\` date NULL, \\`backgroundCheckExpirationDate\\` date NULL, \\`phone\\` varchar(50) NULL, \\`mapAdress\\` varchar(150) NULL, \\`username\\` varchar(50) NOT NULL, \\`googleID\\` varchar(50) NULL, \\`isActive\\` tinyint NOT NULL DEFAULT '1', \\`password\\` varchar(250) NULL, \\`createdAt\\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`deletedAt\\` timestamp NULL, \\`availability\\` varchar(350) NULL, \\`description\\` varchar(550) NULL, \\`previusWorks\\` varchar(3250) NULL, \\`certifications\\` varchar(3250) NULL, \\`isAvailable\\` tinyint NOT NULL DEFAULT '1', \\`roleGuid\\` varchar(38) NOT NULL, \\`createdBy\\` varchar(36) NULL, \\`updatedBy\\` varchar(36) NULL, UNIQUE INDEX \\`IDX_cf5b6b34e888c0034e30210c86\\` (\\`document\\`), UNIQUE INDEX \\`IDX_3c3ab3f49a87e6ddb607f3c494\\` (\\`email\\`), UNIQUE INDEX \\`IDX_ffc81a3b97dcbf8e320d5106c0\\` (\\`username\\`), UNIQUE INDEX \\`Users_uk\\` (\\`username\\`), PRIMARY KEY (\\`guid\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`CREATE TABLE \\`Notification\\` (\\`guid\\` varchar(36) NOT NULL, \\`title\\` varchar(1500) NOT NULL, \\`description\\` varchar(1500) NOT NULL, \\`link\\` varchar(1500) NULL, \\`isActive\\` tinyint NOT NULL DEFAULT '1', \\`createdAt\\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`deletedAt\\` timestamp NULL, \\`createdByGuid\\` varchar(36) NULL, \\`updatedByGuid\\` varchar(36) NULL, \\`deletedByGuid\\` varchar(36) NULL, \\`notificationTypeGuid\\` varchar(36) NULL, PRIMARY KEY (\\`guid\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`CREATE TABLE \\`NotificationType\\` (\\`guid\\` varchar(36) NOT NULL, \\`name\\` varchar(1500) NOT NULL, \\`description\\` varchar(1500) NOT NULL, \\`isActive\\` tinyint NOT NULL DEFAULT '1', PRIMARY KEY (\\`guid\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`CREATE TABLE \\`users_category_categories\\` (\\`usersGuid\\` varchar(36) NOT NULL, \\`categoriesGuid\\` varchar(36) NOT NULL, INDEX \\`IDX_6a9fb5a4565856faa6d5ff4b7c\\` (\\`usersGuid\\`), INDEX \\`IDX_7b278a9b9b557617ba0f6a47cf\\` (\\`categoriesGuid\\`), PRIMARY KEY (\\`usersGuid\\`, \\`categoriesGuid\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`CREATE TABLE \\`users_payment_method_payment_method\\` (\\`usersGuid\\` varchar(36) NOT NULL, \\`paymentMethodGuid\\` varchar(36) NOT NULL, INDEX \\`IDX_81677030e50ff65528fc99fb52\\` (\\`usersGuid\\`), INDEX \\`IDX_a91581a3fd7391a8cf3365eeb2\\` (\\`paymentMethodGuid\\`), PRIMARY KEY (\\`usersGuid\\`, \\`paymentMethodGuid\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`Categories\\` ADD CONSTRAINT \\`FK_9445d5029daaaa497314020dc07\\` FOREIGN KEY (\\`createdByGuid\\`) REFERENCES \\`Users\\`(\\`guid\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`Categories\\` ADD CONSTRAINT \\`FK_bf150ad20e2247a284531879c5c\\` FOREIGN KEY (\\`updatedByGuid\\`) REFERENCES \\`Users\\`(\\`guid\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`Categories\\` ADD CONSTRAINT \\`FK_cb4e5a10deb23947949fc174622\\` FOREIGN KEY (\\`deletedByGuid\\`) REFERENCES \\`Users\\`(\\`guid\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`PaymentMethod\\` ADD CONSTRAINT \\`FK_987b13be02d806c5b5e51a52973\\` FOREIGN KEY (\\`createdByGuid\\`) REFERENCES \\`Users\\`(\\`guid\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`PaymentMethod\\` ADD CONSTRAINT \\`FK_f5c6f6a2dba918e75a6665d0155\\` FOREIGN KEY (\\`updatedByGuid\\`) REFERENCES \\`Users\\`(\\`guid\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`PaymentMethod\\` ADD CONSTRAINT \\`FK_493e13c49d6cab80534c41f9998\\` FOREIGN KEY (\\`deletedByGuid\\`) REFERENCES \\`Users\\`(\\`guid\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`Users\\` ADD CONSTRAINT \\`Users_Roles_fk\\` FOREIGN KEY (\\`roleGuid\\`) REFERENCES \\`Roles\\`(\\`guid\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`Users\\` ADD CONSTRAINT \\`Users_fk_1\\` FOREIGN KEY (\\`createdBy\\`) REFERENCES \\`Users\\`(\\`guid\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`Users\\` ADD CONSTRAINT \\`Users_fk_2\\` FOREIGN KEY (\\`updatedBy\\`) REFERENCES \\`Users\\`(\\`guid\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`Users\\` ADD CONSTRAINT \\`Users_fk_3\\` FOREIGN KEY (\\`updatedBy\\`) REFERENCES \\`Users\\`(\\`guid\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`Notification\\` ADD CONSTRAINT \\`FK_ec3c3eb88be4e33e9b8fbd92a60\\` FOREIGN KEY (\\`createdByGuid\\`) REFERENCES \\`Users\\`(\\`guid\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`Notification\\` ADD CONSTRAINT \\`FK_f31ce3e1cbb249ea65703b4d042\\` FOREIGN KEY (\\`updatedByGuid\\`) REFERENCES \\`Users\\`(\\`guid\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`Notification\\` ADD CONSTRAINT \\`FK_5bece5781eec0da0fd62ddd748f\\` FOREIGN KEY (\\`deletedByGuid\\`) REFERENCES \\`Users\\`(\\`guid\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`Notification\\` ADD CONSTRAINT \\`FK_125b2ca9e00b617ffede78e155a\\` FOREIGN KEY (\\`notificationTypeGuid\\`) REFERENCES \\`NotificationType\\`(\\`guid\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`users_category_categories\\` ADD CONSTRAINT \\`FK_6a9fb5a4565856faa6d5ff4b7ce\\` FOREIGN KEY (\\`usersGuid\\`) REFERENCES \\`Users\\`(\\`guid\\`) ON DELETE CASCADE ON UPDATE CASCADE`);\n        await queryRunner.query(`ALTER TABLE \\`users_category_categories\\` ADD CONSTRAINT \\`FK_7b278a9b9b557617ba0f6a47cf2\\` FOREIGN KEY (\\`categoriesGuid\\`) REFERENCES \\`Categories\\`(\\`guid\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`users_payment_method_payment_method\\` ADD CONSTRAINT \\`FK_81677030e50ff65528fc99fb529\\` FOREIGN KEY (\\`usersGuid\\`) REFERENCES \\`Users\\`(\\`guid\\`) ON DELETE CASCADE ON UPDATE CASCADE`);\n        await queryRunner.query(`ALTER TABLE \\`users_payment_method_payment_method\\` ADD CONSTRAINT \\`FK_a91581a3fd7391a8cf3365eeb25\\` FOREIGN KEY (\\`paymentMethodGuid\\`) REFERENCES \\`PaymentMethod\\`(\\`guid\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`users_payment_method_payment_method\\` DROP FOREIGN KEY \\`FK_a91581a3fd7391a8cf3365eeb25\\``);\n        await queryRunner.query(`ALTER TABLE \\`users_payment_method_payment_method\\` DROP FOREIGN KEY \\`FK_81677030e50ff65528fc99fb529\\``);\n        await queryRunner.query(`ALTER TABLE \\`users_category_categories\\` DROP FOREIGN KEY \\`FK_7b278a9b9b557617ba0f6a47cf2\\``);\n        await queryRunner.query(`ALTER TABLE \\`users_category_categories\\` DROP FOREIGN KEY \\`FK_6a9fb5a4565856faa6d5ff4b7ce\\``);\n        await queryRunner.query(`ALTER TABLE \\`Notification\\` DROP FOREIGN KEY \\`FK_125b2ca9e00b617ffede78e155a\\``);\n        await queryRunner.query(`ALTER TABLE \\`Notification\\` DROP FOREIGN KEY \\`FK_5bece5781eec0da0fd62ddd748f\\``);\n        await queryRunner.query(`ALTER TABLE \\`Notification\\` DROP FOREIGN KEY \\`FK_f31ce3e1cbb249ea65703b4d042\\``);\n        await queryRunner.query(`ALTER TABLE \\`Notification\\` DROP FOREIGN KEY \\`FK_ec3c3eb88be4e33e9b8fbd92a60\\``);\n        await queryRunner.query(`ALTER TABLE \\`Users\\` DROP FOREIGN KEY \\`Users_fk_3\\``);\n        await queryRunner.query(`ALTER TABLE \\`Users\\` DROP FOREIGN KEY \\`Users_fk_2\\``);\n        await queryRunner.query(`ALTER TABLE \\`Users\\` DROP FOREIGN KEY \\`Users_fk_1\\``);\n        await queryRunner.query(`ALTER TABLE \\`Users\\` DROP FOREIGN KEY \\`Users_Roles_fk\\``);\n        await queryRunner.query(`ALTER TABLE \\`PaymentMethod\\` DROP FOREIGN KEY \\`FK_493e13c49d6cab80534c41f9998\\``);\n        await queryRunner.query(`ALTER TABLE \\`PaymentMethod\\` DROP FOREIGN KEY \\`FK_f5c6f6a2dba918e75a6665d0155\\``);\n        await queryRunner.query(`ALTER TABLE \\`PaymentMethod\\` DROP FOREIGN KEY \\`FK_987b13be02d806c5b5e51a52973\\``);\n        await queryRunner.query(`ALTER TABLE \\`Categories\\` DROP FOREIGN KEY \\`FK_cb4e5a10deb23947949fc174622\\``);\n        await queryRunner.query(`ALTER TABLE \\`Categories\\` DROP FOREIGN KEY \\`FK_bf150ad20e2247a284531879c5c\\``);\n        await queryRunner.query(`ALTER TABLE \\`Categories\\` DROP FOREIGN KEY \\`FK_9445d5029daaaa497314020dc07\\``);\n        await queryRunner.query(`DROP INDEX \\`IDX_a91581a3fd7391a8cf3365eeb2\\` ON \\`users_payment_method_payment_method\\``);\n        await queryRunner.query(`DROP INDEX \\`IDX_81677030e50ff65528fc99fb52\\` ON \\`users_payment_method_payment_method\\``);\n        await queryRunner.query(`DROP TABLE \\`users_payment_method_payment_method\\``);\n        await queryRunner.query(`DROP INDEX \\`IDX_7b278a9b9b557617ba0f6a47cf\\` ON \\`users_category_categories\\``);\n        await queryRunner.query(`DROP INDEX \\`IDX_6a9fb5a4565856faa6d5ff4b7c\\` ON \\`users_category_categories\\``);\n        await queryRunner.query(`DROP TABLE \\`users_category_categories\\``);\n        await queryRunner.query(`DROP TABLE \\`NotificationType\\``);\n        await queryRunner.query(`DROP TABLE \\`Notification\\``);\n        await queryRunner.query(`DROP INDEX \\`Users_uk\\` ON \\`Users\\``);\n        await queryRunner.query(`DROP INDEX \\`IDX_ffc81a3b97dcbf8e320d5106c0\\` ON \\`Users\\``);\n        await queryRunner.query(`DROP INDEX \\`IDX_3c3ab3f49a87e6ddb607f3c494\\` ON \\`Users\\``);\n        await queryRunner.query(`DROP INDEX \\`IDX_cf5b6b34e888c0034e30210c86\\` ON \\`Users\\``);\n        await queryRunner.query(`DROP TABLE \\`Users\\``);\n        await queryRunner.query(`DROP TABLE \\`Roles\\``);\n        await queryRunner.query(`DROP TABLE \\`PaymentMethod\\``);\n        await queryRunner.query(`DROP TABLE \\`Categories\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Migrations1719099417082.html":{"url":"classes/Migrations1719099417082.html","title":"class - Migrations1719099417082","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Migrations1719099417082\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1719099417082-CREATE-ORGANIZATION.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Migrations1719099417082'\n                    \n                \n                    \n                        \n                                Defined in migrations/1719099417082-CREATE-ORGANIZATION.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in migrations/1719099417082-CREATE-ORGANIZATION.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in migrations/1719099417082-CREATE-ORGANIZATION.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class Migrations1719099417082 implements MigrationInterface {\n    name = 'Migrations1719099417082'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`Organization\\` (\\`guid\\` varchar(36) NOT NULL, \\`name\\` varchar(50) NOT NULL, \\`description\\` varchar(50) NULL, \\`isActive\\` tinyint NOT NULL DEFAULT '1', \\`createdAt\\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`updatedAt\\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6), \\`deletedAt\\` timestamp NULL, \\`createdByGuid\\` varchar(36) NULL, \\`updatedByGuid\\` varchar(36) NULL, \\`deletedByGuid\\` varchar(36) NULL, PRIMARY KEY (\\`guid\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`CREATE TABLE \\`users_organization_organization\\` (\\`usersGuid\\` varchar(36) NOT NULL, \\`organizationGuid\\` varchar(36) NOT NULL, INDEX \\`IDX_db53dae4ddcc4a8f1f6cec7ccf\\` (\\`usersGuid\\`), INDEX \\`IDX_cb171b2ca98556ca7bdf2f2c28\\` (\\`organizationGuid\\`), PRIMARY KEY (\\`usersGuid\\`, \\`organizationGuid\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`Organization\\` ADD CONSTRAINT \\`FK_b3cb751f39e7ea44cf825052056\\` FOREIGN KEY (\\`createdByGuid\\`) REFERENCES \\`Users\\`(\\`guid\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`Organization\\` ADD CONSTRAINT \\`FK_bdacc8f44ea5a8c764b436206ae\\` FOREIGN KEY (\\`updatedByGuid\\`) REFERENCES \\`Users\\`(\\`guid\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`Organization\\` ADD CONSTRAINT \\`FK_d4387eb5cd602518da48dd58696\\` FOREIGN KEY (\\`deletedByGuid\\`) REFERENCES \\`Users\\`(\\`guid\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`users_organization_organization\\` ADD CONSTRAINT \\`FK_db53dae4ddcc4a8f1f6cec7ccf5\\` FOREIGN KEY (\\`usersGuid\\`) REFERENCES \\`Users\\`(\\`guid\\`) ON DELETE CASCADE ON UPDATE CASCADE`);\n        await queryRunner.query(`ALTER TABLE \\`users_organization_organization\\` ADD CONSTRAINT \\`FK_cb171b2ca98556ca7bdf2f2c289\\` FOREIGN KEY (\\`organizationGuid\\`) REFERENCES \\`Organization\\`(\\`guid\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`users_organization_organization\\` DROP FOREIGN KEY \\`FK_cb171b2ca98556ca7bdf2f2c289\\``);\n        await queryRunner.query(`ALTER TABLE \\`users_organization_organization\\` DROP FOREIGN KEY \\`FK_db53dae4ddcc4a8f1f6cec7ccf5\\``);\n        await queryRunner.query(`ALTER TABLE \\`Organization\\` DROP FOREIGN KEY \\`FK_d4387eb5cd602518da48dd58696\\``);\n        await queryRunner.query(`ALTER TABLE \\`Organization\\` DROP FOREIGN KEY \\`FK_bdacc8f44ea5a8c764b436206ae\\``);\n        await queryRunner.query(`ALTER TABLE \\`Organization\\` DROP FOREIGN KEY \\`FK_b3cb751f39e7ea44cf825052056\\``);\n        await queryRunner.query(`DROP INDEX \\`IDX_cb171b2ca98556ca7bdf2f2c28\\` ON \\`users_organization_organization\\``);\n        await queryRunner.query(`DROP INDEX \\`IDX_db53dae4ddcc4a8f1f6cec7ccf\\` ON \\`users_organization_organization\\``);\n        await queryRunner.query(`DROP TABLE \\`users_organization_organization\\``);\n        await queryRunner.query(`DROP TABLE \\`Organization\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Notification.html":{"url":"entities/Notification.html","title":"entity - Notification","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Notification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/entities/notification.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                createdBy\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                    Optional\n                                deletedBy\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                guid\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                link\n                            \n                            \n                                    \n                                notificationType\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    Optional\n                                updatedBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/entities/notification.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.userCreated, {nullable: true, onDelete: 'NO ACTION', onUpdate: 'NO ACTION'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/entities/notification.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/entities/notification.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.userDeleted, {nullable: true, onDelete: 'NO ACTION', onUpdate: 'NO ACTION'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/entities/notification.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1500, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/entities/notification.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/entities/notification.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'tinyint', nullable: false, default: '1'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/entities/notification.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        link\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1500, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/entities/notification.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notificationType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, notificationType => notificationType.notification)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/entities/notification.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1500, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/entities/notification.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/entities/notification.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        updatedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.userUpdated, {nullable: true, onDelete: 'NO ACTION', onUpdate: 'NO ACTION'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/entities/notification.entity.ts:34\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, ManyToOne, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\nimport { User } from '../../users/users.entity';\nimport { NotificationType } from './notificationType.entity';\n\n@Entity({ name: 'Notification' })\nexport class Notification {\n  @PrimaryGeneratedColumn('uuid')\n  guid: string;\n\n  @Column({ type: 'varchar', length: 1500, nullable: false })\n  title: string;\n\n  @Column({ type: 'varchar', length: 1500, nullable: false })\n  description: string;\n\n  @Column({ type: 'varchar', length: 1500, nullable: true })\n  link: string;\n\n  @Column({ type: 'tinyint', nullable: false, default: '1' })\n  isActive: number;\n\n  @ManyToOne(() => User, (user) => user.userCreated, {\n    nullable: true,\n    onDelete: 'NO ACTION',\n    onUpdate: 'NO ACTION'\n  })\n  createdBy?: User;\n\n  @ManyToOne(() => User, (user) => user.userUpdated, {\n    nullable: true,\n    onDelete: 'NO ACTION',\n    onUpdate: 'NO ACTION'\n  })\n  updatedBy?: User;\n\n  @ManyToOne(() => User, (user) => user.userDeleted, {\n    nullable: true,\n    onDelete: 'NO ACTION',\n    onUpdate: 'NO ACTION'\n  })\n  deletedBy?: User;\n\n  @CreateDateColumn({ type: 'timestamp' })\n  createdAt: Date;\n\n  @UpdateDateColumn({ type: 'timestamp' })\n  updatedAt: Date;\n\n  @Column({ type: 'timestamp', nullable: true })\n  deletedAt?: Date;\n\n  @ManyToOne(() => NotificationType, (notificationType) => notificationType.notification)\n  notificationType: NotificationType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotificationAlreadyExistsException.html":{"url":"classes/NotificationAlreadyExistsException.html","title":"class - NotificationAlreadyExistsException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotificationAlreadyExistsException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/notification.exeptions.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/notification/notification.exeptions.ts:3\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\nexport class NotificationAlreadyExistsException extends HttpException {\n  constructor() {\n    super('Notification already exists', HttpStatus.CONFLICT);\n  }\n}\n\nexport class NotificationNoExistsException extends HttpException {\n  constructor() {\n    super('Notification does not exist', HttpStatus.NOT_FOUND);\n  }\n}\n\nexport class CustomException extends HttpException {\n  constructor(message: string, status: number) {\n    super(message, status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NotificationController.html":{"url":"controllers/NotificationController.html","title":"controller - NotificationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NotificationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/notification.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                Notification\n            \n\n\n\n            \n                Extends\n            \n            \n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                all\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        all\n                        \n                    \n                \n            \n            \n                \n                        \n                    all(query: any, request: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all my notifications'})@ApiResponse({type: ResposeSuccessPaginationDTO, status: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/notification/notification.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                request\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(body: CreateNotificationDto, request: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create Notification'})@ApiResponse({type: ResposeSuccessDataDTO, status: undefined})@ApiResponse({type: ResposeDTO, status: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/notification/notification.controller.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            CreateNotificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                request\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(guid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':guid')@Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get one Notification by guid'})@ApiResponse({type: ResposeSuccessDataDTO, status: undefined})@ApiResponse({type: ResposeDTO, status: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/notification/notification.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(guid: string, body: UpdateNotificationDto, request: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':guid')@Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update Notification'})@ApiResponse({type: ResposeSuccessDataDTO, status: undefined})@ApiResponse({type: ResposeDTO, status: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/notification/notification.controller.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            UpdateNotificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                request\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, HttpCode, HttpException, HttpStatus, Inject, Param, Patch, Post, Query, Req } from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { Auth, DefaultController } from '../app/defaults/default.controller';\nimport { ResposeDTO, ResposeSuccessDataDTO, ResposeSuccessPaginationDTO } from '../app/api.dto';\nimport { RoleEnum } from '../roles/role.enum';\nimport { NotificationService } from './notification.service';\nimport { User } from '../users/users.entity';\nimport { CreateNotificationDto } from './dto/create-notification.dto';\nimport { Notification } from './entities/notification.entity';\nimport { UpdateNotificationDto } from './dto/update-notification.dto';\n\n@Controller('Notification')\n@ApiTags('Notification')\nexport class NotificationController extends DefaultController {\n  @Inject(NotificationService)\n  private readonly NotificationService: NotificationService;\n\n  constructor() {\n    super(NotificationController);\n  }\n\n  @Get()\n  @Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get all my notifications' })\n  @ApiResponse({ type: ResposeSuccessPaginationDTO, status: HttpStatus.OK })\n  async all(@Query() query: any, @Req() request: { user: User }): Promise {\n    try {\n      query.offset = query.offset ? query.offset : 0;\n      query.pageSize = query.pageSize ? query.pageSize : 20;\n      query.createdBy = request.user.guid;\n      return {\n        status: 'success',\n        data: await this.NotificationService.all({ query: query })\n      };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${NotificationController.name}-${error.message ?? error}`\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  @Get(':guid')\n  @Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get one Notification by guid' })\n  @ApiResponse({ type: ResposeSuccessDataDTO, status: HttpStatus.OK })\n  @ApiResponse({ type: ResposeDTO, status: HttpStatus.NOT_FOUND })\n  async findOne(@Param('guid') guid: string): Promise {\n    try {\n      const Notification = await this.NotificationService.getBy({\n        query: { guid: guid }\n      });\n      return { status: 'success', data: Notification };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${NotificationController.name}-${error.message ?? error}`\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  @Post()\n  @Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOperation({ summary: 'Create Notification' })\n  @ApiResponse({ type: ResposeSuccessDataDTO, status: HttpStatus.CREATED })\n  @ApiResponse({ type: ResposeDTO, status: HttpStatus.CONFLICT })\n  async create(@Body() body: CreateNotificationDto, @Req() request: { user: User }): Promise {\n    try {\n      const Notification: Notification = await this.NotificationService.create({\n        body: body,\n        createdByGUID: request.user.guid\n      });\n      return { status: 'success', data: Notification };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${NotificationController.name}-${error.message ?? error}`\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  @Patch(':guid')\n  @Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Update Notification' })\n  @ApiResponse({ type: ResposeSuccessDataDTO, status: HttpStatus.OK })\n  @ApiResponse({ type: ResposeDTO, status: HttpStatus.NOT_FOUND })\n  async update(@Param('guid') guid: string, @Body() body: UpdateNotificationDto, @Req() request: { user: User }): Promise {\n    try {\n      const updatedNotification = await this.NotificationService.update({\n        guid: guid,\n        body: body,\n        updatedByGUID: request.user.guid\n      });\n      return { status: 'success', data: updatedNotification };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${NotificationController.name}-${error.message ?? error}`\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotificationGateway.html":{"url":"classes/NotificationGateway.html","title":"class - NotificationGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotificationGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/notification.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authService\n                            \n                            \n                                connectedUsers\n                            \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleConnection\n                            \n                            \n                                    Async\n                                handleDisconnect\n                            \n                            \n                                    \n                                handleMessage\n                            \n                            \n                                    \n                                handleSendNotificationToUser\n                            \n                            \n                                sendNotification\n                            \n                            \n                                sendNotificationTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthService\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(AuthService)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/notification.gateway.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        connectedUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/notification/notification.gateway.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/notification.gateway.ts:23\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleConnection\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleConnection(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notification/notification.gateway.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleDisconnect(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notification/notification.gateway.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleMessage(client: Socket, payload: AddMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('notification')\n                \n            \n\n                    \n                        \n                            Defined in src/notification/notification.gateway.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            AddMessageDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleSendNotificationToUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleSendNotificationToUser(payload: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('sendNotificationToUser')\n                \n            \n\n                    \n                        \n                            Defined in src/notification/notification.gateway.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sendNotification\n                        \n                    \n                \n            \n            \n                \nsendNotification(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notification/notification.gateway.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sendNotificationTo\n                        \n                    \n                \n            \n            \n                \nsendNotificationTo(destinatary: string, notification: Notification)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notification/notification.gateway.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                destinatary\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notification\n                                            \n                                                            Notification\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n  MessageBody,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n  ConnectedSocket\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { AddMessageDto } from './dto/add-message.dto';\nimport { AuthService } from 'src/auth/auth.service';\nimport { Inject } from '@nestjs/common';\nimport { User } from 'src/users/users.entity';\nimport { Notification } from './entities/notification.entity';\n\n@WebSocketGateway({ namespace: 'notification', cors: { origin: '*' } })\nexport class NotificationGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  @Inject(AuthService)\n  authService: AuthService;\n\n  @WebSocketServer()\n  server: Server;\n  connectedUsers: Map = new Map();\n\n  async handleConnection(client: Socket): Promise {\n    const token = client.handshake.headers.auth;\n    if (!token) {\n      console.log('No token provided, disconnecting...');\n      client.disconnect();\n      return;\n    }\n\n    let user = null;\n\n    try {\n      user = await this.authService.validateAccessToken({ token: token.toString() });\n    }\n    catch (e) {\n      console.log('Error validating token, disconnecting...');\n      client.disconnect();\n      return;\n    }\n\n    if (!user) {\n      console.log('Invalid token, disconnecting...');\n      client.disconnect();\n      return;\n    }\n    this.connectedUsers.set(client.id, user.guid);\n    console.log('User connected ID: ', user);\n    console.log('Client connected ID: ', client.id);\n    client.emit('notification', 'bienvenido: ' + user.username);\n    client.emit('notification', 'conectado al servidor con ID: ' + client.id);\n  }\n\n  async handleDisconnect(client: Socket) {\n    this.connectedUsers.delete(client.id);\n    console.log('Client disconected ID: ', client.id);\n  }\n\n  @SubscribeMessage('notification')\n  handleMessage(@ConnectedSocket() client: Socket, @MessageBody() payload: AddMessageDto): any {\n    // const userId = this.connectedUsers.get(client?.id);\n    // console.log('User ID: ', userId);\n    console.log('⬇️ Message from Client: ', client.id);\n    console.log(payload);\n    // this.server.emit('notification', `Mensaje del servidor ⬆️: ${payload}`);\n    //console.log('Client : ', client);\n    client.broadcast.emit('notification', ` ⬇️ FROM: ${client.id} - Message: ${payload}`);\n    // enviar un mensaje al cliente que emitió el mensaje\n    client.emit('notification', 'mensaje para el cliente que emitió el mensaje');\n    // enviar un mensaje a un cliente en especifico\n    this.server.to(client.id).emit('notification', 'mensaje para un cliente en especifico');\n    return 'OK';\n  }\n\n  @SubscribeMessage('sendNotificationToUser')\n  handleSendNotificationToUser(@MessageBody() payload: {}): any {\n    console.log('⬇️ Message from Client desde notificarion: ', payload);\n    //    console.log(this.server);\n    this.server.emit('notification desde sendNotification', payload);\n    return;\n  }\n\n  sendNotification(message: string): void {\n    // console.log('Client ID de sendnotification: ', this.server);\n    // const sendNotification = this.server.emit('notification', message);\n    // this.server.sockets.emit('notification', message);\n    // console.log('Send Notification: ', sendNotification);\n    console.log('Send Notification: ', message);\n    this.server.emit('notification', message);\n  }\n\n  sendNotificationTo(destinatary: string, notification: Notification): void {\n    try {\n      console.log('Send Notification to: ', destinatary);\n      console.log('Send Notification: ', notification);\n      console.log('Connected Users: ', this.connectedUsers);\n      const client = Array.from(this.connectedUsers.keys()).find(key => this.connectedUsers.get(key) === destinatary);\n      const user = this.connectedUsers.get(client);\n      console.log('Send Notification to: ', user);\n      this.server.to(client).emit('notification', notification);\n    }\n    catch (e) {\n      console.log('Error sending notification to: ', destinatary);\n    }\n\n    // console.log('Client ID de sendnotification: ', this.server);\n    // const sendNotification = this.server.emit('notification', message);\n    // this.server.sockets.emit('notification', message);\n    // console.log('Send Notification: ', sendNotification);\n    // console.log('Send Notification: ', notification);\n    // this.server.emit('notification', notification);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NotificationModule.html":{"url":"modules/NotificationModule.html","title":"module - NotificationModule","body":"\n                   \n\n\n\n\n    Modules\n    NotificationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NotificationModule\n\n\n\ncluster_NotificationModule_exports\n\n\n\ncluster_NotificationModule_imports\n\n\n\ncluster_NotificationModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nNotificationModule\n\nNotificationModule\n\nNotificationModule -->\n\nAuthModule->NotificationModule\n\n\n\n\n\nNotificationGateway \n\nNotificationGateway \n\nNotificationGateway  -->\n\nNotificationModule->NotificationGateway \n\n\n\n\n\nNotificationService \n\nNotificationService \n\nNotificationService  -->\n\nNotificationModule->NotificationService \n\n\n\n\n\nNotificationService\n\nNotificationService\n\nNotificationModule -->\n\nNotificationService->NotificationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/notification/notification.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            NotificationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            NotificationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            NotificationGateway\n                        \n                        \n                            NotificationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { NotificationService } from './notification.service';\nimport { NotificationController } from './notification.controller';\nimport { Notification } from './entities/notification.entity';\nimport { User } from '../users/users.entity';\nimport { NotificationGateway } from './notification.gateway';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  imports: [AuthModule, ConfigModule, TypeOrmModule.forFeature([User, Notification])],\n  controllers: [NotificationController],\n  providers: [NotificationService, NotificationGateway],\n  exports: [NotificationService, NotificationGateway]\n})\nexport class NotificationModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotificationNoExistsException.html":{"url":"classes/NotificationNoExistsException.html","title":"class - NotificationNoExistsException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotificationNoExistsException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/notification.exeptions.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/notification/notification.exeptions.ts:9\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\nexport class NotificationAlreadyExistsException extends HttpException {\n  constructor() {\n    super('Notification already exists', HttpStatus.CONFLICT);\n  }\n}\n\nexport class NotificationNoExistsException extends HttpException {\n  constructor() {\n    super('Notification does not exist', HttpStatus.NOT_FOUND);\n  }\n}\n\nexport class CustomException extends HttpException {\n  constructor(message: string, status: number) {\n    super(message, status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationService.html":{"url":"injectables/NotificationService.html","title":"injectable - NotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/notification.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            DefaultService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                    Readonly\n                                notificationGateway\n                            \n                            \n                                    \n                                    Private\n                                    Readonly\n                                notificationRepository\n                            \n                            \n                                    Public\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                all\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getBy\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/notification/notification.service.ts:20\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        all\n                        \n                    \n                \n            \n            \n                \n                        \n                    all(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notification/notification.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notification/notification.service.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getBy\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBy(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notification/notification.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notification/notification.service.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                            Readonly\n                        notificationGateway\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationGateway\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(NotificationGateway)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/notification.service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                            Readonly\n                        notificationRepository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(Notification)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/notification.service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                        \n                            \n                                Inherited from         DefaultService\n\n                            \n                        \n                    \n                        \n                                Defined in         DefaultService:4\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DefaultService } from '../app/defaults/defatul.service';\nimport { ResposeResultsPaginationDTO } from '../app/api.dto';\nimport { IsNull, Like, Repository } from 'typeorm';\nimport { SearchNotificationDto } from './dto/search-notification.dto';\nimport { Notification } from './entities/notification.entity';\nimport { SearchNotificationPaginationDto } from './dto/search-pagination-notification.dto';\nimport { CreateNotificationDto } from './dto/create-notification.dto';\nimport { UpdateNotificationDto } from './dto/update-notification.dto';\nimport { NotificationNoExistsException } from './notification.exeptions';\nimport { NotificationGateway } from './notification.gateway';\n\n@Injectable()\nexport class NotificationService extends DefaultService {\n  @InjectRepository(Notification)\n  private readonly notificationRepository: Repository;\n\n  @Inject(NotificationGateway)\n  private readonly notificationGateway: NotificationGateway;\n\n  constructor() {\n    super(NotificationService);\n  }\n\n  async getBy(params: { query: SearchNotificationDto }): Promise {\n    try {\n      const notification = await this.notificationRepository.findOne({\n        select: {\n          guid: true,\n          title: true,\n          description: true,\n          link: true,\n          createdAt: true,\n          isActive: true,\n        },\n        relations: [],\n        where: {\n          guid: params.query.guid || undefined,\n          isActive: params.query.isActive || undefined,\n          deletedAt: IsNull()\n        }\n      });\n      return notification;\n    } catch (error) {\n      throw new Error(`${NotificationService.name}[getBy]:${error.message}`);\n    }\n  }\n\n  async all(params: { query: SearchNotificationPaginationDto }): Promise {\n    try {\n      const order = {};\n      if (params.query.orderBy && params.query.orderType) {\n        order[params.query.orderBy] = params.query.orderType;\n      }\n\n      const forPage: number = parseInt(params.query.pageSize);\n      const skip: number = parseInt(params.query.offset);\n      const [notification, total] = await this.notificationRepository.findAndCount({\n        select: {\n          guid: true,\n          title: true,\n          description: true,\n          link: true,\n          createdAt: true,\n          isActive: true,\n        },\n        relations: [],\n        where: {\n          deletedAt: IsNull(),\n          createdBy: {\n            guid: params.query.createdBy || undefined\n          },\n          isActive: params.query.isActive || undefined\n        },\n        order,\n        take: forPage,\n        skip: skip\n      });\n      return {\n        total: total,\n        pageSize: forPage,\n        offset: parseInt(params.query.offset),\n        results: notification\n      };\n    } catch (error) {\n      throw new Error(`${NotificationService.name}[all]:${error.message}`);\n    }\n  }\n\n  async create(params: { body: CreateNotificationDto; createdByGUID?: string }): Promise {\n    try {\n\n      const notification = await this.notificationRepository.save({\n        title: params.body.title,\n        link: params.body.link,\n        description: params.body.description,\n        isActive: params.body.isActive || 1,\n        createdBy: { guid: params.createdByGUID }\n      });\n\n      this.notificationGateway.sendNotificationTo(notification.createdBy.guid, notification);\n\n      return notification;\n    } catch (error) {\n      throw new Error(`${NotificationService.name}[create]:${error.message}`);\n    }\n  }\n\n  async update(params: { guid: string; body: UpdateNotificationDto; updatedByGUID: string }): Promise {\n    try {\n      const notification = await this.notificationRepository.findOne({\n        where: { guid: params.guid, deletedAt: IsNull() }\n      });\n      if (!notification) {\n        throw new NotificationNoExistsException();\n      }\n      notification.description = params.body.description || notification.description;\n      notification.isActive = params.body.isActive !== undefined ? params.body.isActive : notification.isActive;\n      return await this.notificationRepository.save(notification);\n    } catch (error) {\n      throw new Error(`${NotificationService.name}[update]:${error.message}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/NotificationType.html":{"url":"entities/NotificationType.html","title":"entity - NotificationType","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  NotificationType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/entities/notificationType.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                guid\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                notification\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1500, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/entities/notificationType.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/entities/notificationType.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'tinyint', nullable: false, default: '1'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/entities/notificationType.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1500, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/entities/notificationType.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notification\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Notification[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, notification => notification.notificationType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/entities/notificationType.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { Notification } from './notification.entity';\n\n@Entity({ name: 'NotificationType' })\nexport class NotificationType {\n  @PrimaryGeneratedColumn('uuid')\n  guid: string;\n\n  @Column({ type: 'varchar', length: 1500, nullable: false })\n  name: string;\n\n  @Column({ type: 'varchar', length: 1500, nullable: false })\n  description: string;\n\n  @Column({ type: 'tinyint', nullable: false, default: '1' })\n  isActive: number;\n\n  @OneToMany(() => Notification, (notification) => notification.notificationType)\n  notification: Notification[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Organization.html":{"url":"entities/Organization.html","title":"entity - Organization","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Organization\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/organization/entities/organization.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                createdBy\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                    Optional\n                                deletedBy\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                guid\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    Optional\n                                updatedBy\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/entities/organization.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.userCreated, {nullable: true, onDelete: 'NO ACTION', onUpdate: 'NO ACTION'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/entities/organization.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/entities/organization.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.userDeleted, {nullable: true, onDelete: 'NO ACTION', onUpdate: 'NO ACTION'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/entities/organization.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 50, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/entities/organization.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/entities/organization.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'tinyint', nullable: false, default: '1'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/entities/organization.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 50, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/entities/organization.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/entities/organization.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        updatedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.userUpdated, {nullable: true, onDelete: 'NO ACTION', onUpdate: 'NO ACTION'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/entities/organization.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.Organization)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/entities/organization.entity.ts:49\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, ManyToOne, PrimaryGeneratedColumn, UpdateDateColumn, ManyToMany } from 'typeorm';\nimport { User } from '../../users/users.entity';\n\n@Entity({ name: 'Organization' })\nexport class Organization {\n  @PrimaryGeneratedColumn('uuid')\n  guid: string;\n\n  @Column({ type: 'varchar', length: 50, nullable: false })\n  name: string;\n\n  @Column({ type: 'varchar', length: 50, nullable: true })\n  description: string;\n\n  @Column({ type: 'tinyint', nullable: false, default: '1' })\n  isActive: number;\n\n  @ManyToOne(() => User, (user) => user.userCreated, {\n    nullable: true,\n    onDelete: 'NO ACTION',\n    onUpdate: 'NO ACTION'\n  })\n  createdBy?: User;\n\n  @ManyToOne(() => User, (user) => user.userUpdated, {\n    nullable: true,\n    onDelete: 'NO ACTION',\n    onUpdate: 'NO ACTION'\n  })\n  updatedBy?: User;\n\n  @ManyToOne(() => User, (user) => user.userDeleted, {\n    nullable: true,\n    onDelete: 'NO ACTION',\n    onUpdate: 'NO ACTION'\n  })\n  deletedBy?: User;\n\n  @CreateDateColumn({ type: 'timestamp' })\n  createdAt: Date;\n\n  @UpdateDateColumn({ type: 'timestamp' })\n  updatedAt: Date;\n\n  @Column({ type: 'timestamp', nullable: true })\n  deletedAt?: Date;\n\n  @ManyToMany(() => User, (user) => user.Organization)\n  users: User[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrganizationAlreadyExistsException.html":{"url":"classes/OrganizationAlreadyExistsException.html","title":"class - OrganizationAlreadyExistsException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrganizationAlreadyExistsException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/organization/organization.exeptions.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/organization/organization.exeptions.ts:3\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\nexport class OrganizationAlreadyExistsException extends HttpException {\n  constructor() {\n    super('Organization already exists', HttpStatus.CONFLICT);\n  }\n}\n\nexport class OrganizationNoExistsException extends HttpException {\n  constructor() {\n    super('Organization does not exist', HttpStatus.NOT_FOUND);\n  }\n}\n\nexport class CustomException extends HttpException {\n  constructor(message: string, status: number) {\n    super(message, status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OrganizationController.html":{"url":"controllers/OrganizationController.html","title":"controller - OrganizationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OrganizationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/organization/organization.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                Organization\n            \n\n\n\n            \n                Extends\n            \n            \n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                all\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        all\n                        \n                    \n                \n            \n            \n                \n                        \n                    all(query: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all Organization'})@ApiResponse({type: ResposeSuccessPaginationDTO, status: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/organization/organization.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(body: CreateOrganizationDto, request: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create Organization'})@ApiResponse({type: ResposeSuccessDataDTO, status: undefined})@ApiResponse({type: ResposeDTO, status: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/organization/organization.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            CreateOrganizationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                request\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(guid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':guid')@Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get one Organization by guid'})@ApiResponse({type: ResposeSuccessDataDTO, status: undefined})@ApiResponse({type: ResposeDTO, status: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/organization/organization.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(guid: string, body: UpdateOrganizationDto, request: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':guid')@Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update Organization'})@ApiResponse({type: ResposeSuccessDataDTO, status: undefined})@ApiResponse({type: ResposeDTO, status: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/organization/organization.controller.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            UpdateOrganizationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                request\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, HttpCode, HttpException, HttpStatus, Inject, Param, Patch, Post, Query, Req } from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { Auth, DefaultController } from '../app/defaults/default.controller';\nimport { ResposeDTO, ResposeSuccessDataDTO, ResposeSuccessPaginationDTO } from '../app/api.dto';\nimport { RoleEnum } from '../roles/role.enum';\nimport { OrganizationService } from './organization.service';\nimport { User } from '../users/users.entity';\nimport { CreateOrganizationDto } from './dto/create-organization.dto';\nimport { Organization } from './entities/organization.entity';\nimport { UpdateOrganizationDto } from './dto/update-organization.dto';\n\n@Controller('Organization')\n@ApiTags('Organization')\nexport class OrganizationController extends DefaultController {\n  @Inject(OrganizationService)\n  private readonly OrganizationService: OrganizationService;\n\n  constructor() {\n    super(OrganizationController);\n  }\n\n  @Get()\n  @Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get all Organization' })\n  @ApiResponse({ type: ResposeSuccessPaginationDTO, status: HttpStatus.OK })\n  async all(@Query() query: any): Promise {\n    try {\n      return {\n        status: 'success',\n        data: await this.OrganizationService.all({ query: query })\n      };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${OrganizationController.name}-${error.message ?? error}`\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  @Get(':guid')\n  @Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get one Organization by guid' })\n  @ApiResponse({ type: ResposeSuccessDataDTO, status: HttpStatus.OK })\n  @ApiResponse({ type: ResposeDTO, status: HttpStatus.NOT_FOUND })\n  async findOne(@Param('guid') guid: string): Promise {\n    try {\n      const Organization = await this.OrganizationService.getBy({\n        query: { guid: guid }\n      });\n      return { status: 'success', data: Organization };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${OrganizationController.name}-${error.message ?? error}`\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  @Post()\n  @Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOperation({ summary: 'Create Organization' })\n  @ApiResponse({ type: ResposeSuccessDataDTO, status: HttpStatus.CREATED })\n  @ApiResponse({ type: ResposeDTO, status: HttpStatus.CONFLICT })\n  async create(@Body() body: CreateOrganizationDto, @Req() request: { user: User }): Promise {\n    try {\n      const Organization: Organization = await this.OrganizationService.create({\n        body: body,\n        createdByGUID: request.user.guid\n      });\n      return { status: 'success', data: Organization };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${OrganizationController.name}-${error.message ?? error}`\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  @Patch(':guid')\n  @Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Update Organization' })\n  @ApiResponse({ type: ResposeSuccessDataDTO, status: HttpStatus.OK })\n  @ApiResponse({ type: ResposeDTO, status: HttpStatus.NOT_FOUND })\n  async update(@Param('guid') guid: string, @Body() body: UpdateOrganizationDto, @Req() request: { user: User }): Promise {\n    try {\n      const updatedOrganization = await this.OrganizationService.update({\n        guid: guid,\n        body: body,\n        updatedByGUID: request.user.guid\n      });\n      return { status: 'success', data: updatedOrganization };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${OrganizationController.name}-${error.message ?? error}`\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OrganizationModule.html":{"url":"modules/OrganizationModule.html","title":"module - OrganizationModule","body":"\n                   \n\n\n\n\n    Modules\n    OrganizationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OrganizationModule\n\n\n\ncluster_OrganizationModule_exports\n\n\n\ncluster_OrganizationModule_providers\n\n\n\n\nOrganizationService \n\nOrganizationService \n\n\n\nOrganizationModule\n\nOrganizationModule\n\nOrganizationService  -->\n\nOrganizationModule->OrganizationService \n\n\n\n\n\nOrganizationService\n\nOrganizationService\n\nOrganizationModule -->\n\nOrganizationService->OrganizationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/organization/organization.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OrganizationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OrganizationController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OrganizationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { OrganizationService } from './organization.service';\nimport { OrganizationController } from './organization.controller';\nimport { Organization } from './entities/organization.entity';\nimport { User } from '../users/users.entity';\n\n@Module({\n  imports: [ConfigModule, TypeOrmModule.forFeature([User, Organization])],\n  controllers: [OrganizationController],\n  providers: [OrganizationService],\n  exports: [OrganizationService]\n})\nexport class OrganizationModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrganizationNoExistsException.html":{"url":"classes/OrganizationNoExistsException.html","title":"class - OrganizationNoExistsException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrganizationNoExistsException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/organization/organization.exeptions.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/organization/organization.exeptions.ts:9\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\nexport class OrganizationAlreadyExistsException extends HttpException {\n  constructor() {\n    super('Organization already exists', HttpStatus.CONFLICT);\n  }\n}\n\nexport class OrganizationNoExistsException extends HttpException {\n  constructor() {\n    super('Organization does not exist', HttpStatus.NOT_FOUND);\n  }\n}\n\nexport class CustomException extends HttpException {\n  constructor(message: string, status: number) {\n    super(message, status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OrganizationService.html":{"url":"injectables/OrganizationService.html","title":"injectable - OrganizationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OrganizationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/organization/organization.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            DefaultService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                    Readonly\n                                OrganizationRepository\n                            \n                            \n                                    Public\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                all\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getBy\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/organization/organization.service.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        all\n                        \n                    \n                \n            \n            \n                \n                        \n                    all(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/organization/organization.service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/organization/organization.service.ts:117\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getBy\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBy(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/organization/organization.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/organization/organization.service.ts:138\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                            Readonly\n                        OrganizationRepository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(Organization)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/organization.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                        \n                            \n                                Inherited from         DefaultService\n\n                            \n                        \n                    \n                        \n                                Defined in         DefaultService:4\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DefaultService } from '../app/defaults/defatul.service';\nimport { ResposeResultsPaginationDTO } from '../app/api.dto';\nimport { IsNull, Like, Repository } from 'typeorm';\nimport { SearchOrganizationDto } from './dto/search-organization.dto';\nimport { Organization } from './entities/organization.entity';\nimport { SearchOrganizationPaginationDto } from './dto/search-pagination-organization.dto';\nimport { CreateOrganizationDto } from './dto/create-organization.dto';\nimport { UpdateOrganizationDto } from './dto/update-organization.dto';\nimport { OrganizationNoExistsException } from './organization.exeptions';\n\n@Injectable()\nexport class OrganizationService extends DefaultService {\n  @InjectRepository(Organization)\n  private readonly OrganizationRepository: Repository;\n\n  constructor() {\n    super(OrganizationService);\n  }\n\n  async getBy(params: { query: SearchOrganizationDto }): Promise {\n    try {\n      const Organization = await this.OrganizationRepository.findOne({\n        select: {\n          guid: true,\n          name: true,\n          description: true,\n          createdAt: true,\n          updatedAt: true,\n          isActive: true,\n          createdBy: {\n            guid: true,\n            name: true,\n            lastname: true,\n            email: true,\n            createdAt: true,\n            updatedAt: true,\n            password: false\n          }\n        },\n        relations: ['createdBy', 'updatedBy', 'deletedBy'],\n        where: {\n          guid: params.query.guid || undefined,\n          name: params.query.name || undefined,\n          isActive: params.query.isActive || undefined,\n          deletedAt: IsNull()\n        }\n      });\n      return Organization;\n    } catch (error) {\n      throw new Error(`${OrganizationService.name}[getBy]:${error.message}`);\n    }\n  }\n\n  async all(params: { query: SearchOrganizationPaginationDto }): Promise {\n    const emptyResponse = {\n      total: 0,\n      pageSize: 0,\n      offset: params.query.offset,\n      results: []\n    };\n    try {\n      if (Object.keys(params.query).length === 0) {\n        return emptyResponse;\n      }\n      if (params.query.pageSize?.toString() === '0') {\n        return emptyResponse;\n      }\n\n      const order = {};\n      if (params.query.orderBy && params.query.orderType) {\n        order[params.query.orderBy] = params.query.orderType;\n      }\n\n      const forPage: number = parseInt(params.query.pageSize);\n      const skip: number = parseInt(params.query.offset);\n      const [Organization, total] = await this.OrganizationRepository.findAndCount({\n        select: {\n          guid: true,\n          name: true,\n          description: true,\n          createdAt: true,\n          updatedAt: true,\n          isActive: true,\n          createdBy: {\n            guid: true,\n            name: true,\n            lastname: true,\n            email: true,\n            createdAt: true,\n            updatedAt: true,\n            password: false\n          }\n        },\n        relations: ['createdBy', 'updatedBy'],\n        where: {\n          deletedAt: IsNull(),\n          name: params.query.name ? Like(`%${params.query.name}%`) : undefined,\n          isActive: params.query.isActive || undefined\n        },\n        order,\n        take: forPage,\n        skip: skip\n      });\n      return {\n        total: total,\n        pageSize: forPage,\n        offset: parseInt(params.query.offset),\n        results: Organization\n      };\n    } catch (error) {\n      throw new Error(`${OrganizationService.name}[all]:${error.message}`);\n    }\n  }\n\n  async create(params: { body: CreateOrganizationDto; createdByGUID?: string }): Promise {\n    try {\n      const findOrganization = await this.OrganizationRepository.findOne({\n        where: { name: params.body.name, deletedAt: IsNull() }\n      });\n      if (findOrganization) {\n        return findOrganization;\n      }\n      const Organization = await this.OrganizationRepository.save({\n        name: params.body.name,\n        description: params.body.description || null,\n        isActive: params.body.isActive || 1,\n        createdBy: { guid: params.createdByGUID }\n      });\n\n      return Organization;\n    } catch (error) {\n      throw new Error(`${OrganizationService.name}[create]:${error.message}`);\n    }\n  }\n\n  async update(params: { guid: string; body: UpdateOrganizationDto; updatedByGUID: string }): Promise {\n    try {\n      const Organization = await this.OrganizationRepository.findOne({\n        where: { guid: params.guid, deletedAt: IsNull() }\n      });\n      if (!Organization) {\n        throw new OrganizationNoExistsException();\n      }\n      Organization.name = params.body.name || Organization.name;\n      Organization.description = params.body.description || Organization.description;\n      Organization.isActive = params.body.isActive !== undefined ? params.body.isActive : Organization.isActive;\n      return await this.OrganizationRepository.save(Organization);\n    } catch (error) {\n      throw new Error(`${OrganizationService.name}[update]:${error.message}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationDTO.html":{"url":"classes/PaginationDTO.html","title":"class - PaginationDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                offset\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                orderBy\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                orderType\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                pageSize\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true, default: 0})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/api.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"name\" | \"lastname\" | \"username\"\n\n                    \n                \n                \n                    \n                        Default value : 'name'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, type: 'string', default: 'name'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/api.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        orderType\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"ASC\" | \"DESC\"\n\n                    \n                \n                \n                    \n                        Default value : 'ASC'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, type: 'string', default: 'ASC'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/api.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true, default: 10})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/api.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayMinSize,\n  IsArray,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nexport class ArrayGuidDTO {\n  @ApiProperty({ isArray: true, required: true, type: 'string' })\n  @ArrayMinSize(1)\n  @IsArray()\n  guids: string[];\n}\n\nexport class PaginationDTO {\n  @ApiProperty({ required: true, default: 0 })\n  @IsString()\n  offset?: number;\n\n  @ApiProperty({ required: true, default: 10 })\n  @IsString()\n  pageSize?: number;\n\n  @ApiProperty({ required: false, type: 'string', default: 'name' })\n  @IsOptional()\n  @IsString()\n  orderBy?: 'name' | 'lastname' | 'username' = 'name';\n\n  @ApiProperty({ required: false, type: 'string', default: 'ASC' })\n  @IsOptional()\n  @IsString()\n  orderType?: 'ASC' | 'DESC' = 'ASC';\n}\n\nexport class ResposeDTO {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  status: 'success' | 'error';\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  message?: string;\n}\n\nexport class ResposeSuccessDataDTO {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  status: 'success' | 'error';\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  data?: any;\n}\n\nexport class ResposeResultsPaginationDTO {\n  @ApiProperty({ required: true })\n  @IsNumber()\n  total: number;\n\n  @ApiProperty({ required: true })\n  @IsNumber()\n  pageSize: number;\n\n  @ApiProperty({ required: true })\n  @IsNumber()\n  offset: number;\n\n  @ApiProperty({ required: true })\n  @IsNumber()\n  results: any[];\n}\n\nexport class ResposeSuccessPaginationDTO {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  status: 'success' | 'error';\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  data?: ResposeResultsPaginationDTO;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PaymentMethod.html":{"url":"entities/PaymentMethod.html","title":"entity - PaymentMethod","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PaymentMethod\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/paymentMethod/entities/paymentMethod.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                createdBy\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                    Optional\n                                deletedBy\n                            \n                            \n                                    \n                                guid\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    Optional\n                                updatedBy\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paymentMethod/entities/paymentMethod.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.userCreated, {nullable: true, onDelete: 'NO ACTION', onUpdate: 'NO ACTION'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paymentMethod/entities/paymentMethod.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paymentMethod/entities/paymentMethod.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.userDeleted, {nullable: true, onDelete: 'NO ACTION', onUpdate: 'NO ACTION'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paymentMethod/entities/paymentMethod.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paymentMethod/entities/paymentMethod.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'tinyint', nullable: false, default: '1'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paymentMethod/entities/paymentMethod.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 50, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paymentMethod/entities/paymentMethod.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paymentMethod/entities/paymentMethod.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        updatedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.userUpdated, {nullable: true, onDelete: 'NO ACTION', onUpdate: 'NO ACTION'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paymentMethod/entities/paymentMethod.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.paymentMethod)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paymentMethod/entities/paymentMethod.entity.ts:46\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, ManyToOne, PrimaryGeneratedColumn, UpdateDateColumn, ManyToMany } from 'typeorm';\nimport { User } from '../../users/users.entity';\n\n@Entity({ name: 'PaymentMethod' })\nexport class PaymentMethod {\n  @PrimaryGeneratedColumn('uuid')\n  guid: string;\n\n  @Column({ type: 'varchar', length: 50, nullable: false })\n  name: string;\n\n  @Column({ type: 'tinyint', nullable: false, default: '1' })\n  isActive: number;\n\n  @ManyToOne(() => User, (user) => user.userCreated, {\n    nullable: true,\n    onDelete: 'NO ACTION',\n    onUpdate: 'NO ACTION'\n  })\n  createdBy?: User;\n\n  @ManyToOne(() => User, (user) => user.userUpdated, {\n    nullable: true,\n    onDelete: 'NO ACTION',\n    onUpdate: 'NO ACTION'\n  })\n  updatedBy?: User;\n\n  @ManyToOne(() => User, (user) => user.userDeleted, {\n    nullable: true,\n    onDelete: 'NO ACTION',\n    onUpdate: 'NO ACTION'\n  })\n  deletedBy?: User;\n\n  @CreateDateColumn({ type: 'timestamp' })\n  createdAt: Date;\n\n  @UpdateDateColumn({ type: 'timestamp' })\n  updatedAt: Date;\n\n  @Column({ type: 'timestamp', nullable: true })\n  deletedAt?: Date;\n\n  @ManyToMany(() => User, (user) => user.paymentMethod)\n  users: User[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaymentMethodAlreadyExistsException.html":{"url":"classes/PaymentMethodAlreadyExistsException.html","title":"class - PaymentMethodAlreadyExistsException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaymentMethodAlreadyExistsException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/paymentMethod/paymentMethod.exeptions.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/paymentMethod/paymentMethod.exeptions.ts:3\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\nexport class PaymentMethodAlreadyExistsException extends HttpException {\n  constructor() {\n    super('PaymentMethod already exists', HttpStatus.CONFLICT);\n  }\n}\n\nexport class PaymentMethodNoExistsException extends HttpException {\n  constructor() {\n    super('PaymentMethod does not exist', HttpStatus.NOT_FOUND);\n  }\n}\n\nexport class CustomException extends HttpException {\n  constructor(message: string, status: number) {\n    super(message, status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PaymentMethodController.html":{"url":"controllers/PaymentMethodController.html","title":"controller - PaymentMethodController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PaymentMethodController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/paymentMethod/paymentMethod.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                PaymentMethod\n            \n\n\n\n            \n                Extends\n            \n            \n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                all\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        all\n                        \n                    \n                \n            \n            \n                \n                        \n                    all(query: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all PaymentMethod'})@ApiResponse({type: ResposeSuccessPaginationDTO, status: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/paymentMethod/paymentMethod.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(body: CreatePaymentMethodDto, request: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create PaymentMethod'})@ApiResponse({type: ResposeSuccessDataDTO, status: undefined})@ApiResponse({type: ResposeDTO, status: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/paymentMethod/paymentMethod.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            CreatePaymentMethodDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                request\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(guid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':guid')@Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get one PaymentMethod by guid'})@ApiResponse({type: ResposeSuccessDataDTO, status: undefined})@ApiResponse({type: ResposeDTO, status: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/paymentMethod/paymentMethod.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(guid: string, body: UpdatePaymentMethodDto, request: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':guid')@Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update PaymentMethod'})@ApiResponse({type: ResposeSuccessDataDTO, status: undefined})@ApiResponse({type: ResposeDTO, status: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/paymentMethod/paymentMethod.controller.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            UpdatePaymentMethodDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                request\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, HttpCode, HttpException, HttpStatus, Inject, Param, Patch, Post, Query, Req } from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { Auth, DefaultController } from '../app/defaults/default.controller';\nimport { ResposeDTO, ResposeSuccessDataDTO, ResposeSuccessPaginationDTO } from '../app/api.dto';\nimport { RoleEnum } from '../roles/role.enum';\nimport { PaymentMethodService } from './paymentMethod.service';\nimport { User } from '../users/users.entity';\nimport { CreatePaymentMethodDto } from './dto/create-paymentMethod.dto';\nimport { PaymentMethod } from './entities/paymentMethod.entity';\nimport { UpdatePaymentMethodDto } from './dto/update-paymentMethod.dto';\n\n@Controller('PaymentMethod')\n@ApiTags('PaymentMethod')\nexport class PaymentMethodController extends DefaultController {\n  @Inject(PaymentMethodService)\n  private readonly PaymentMethodService: PaymentMethodService;\n\n  constructor() {\n    super(PaymentMethodController);\n  }\n\n  @Get()\n  @Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get all PaymentMethod' })\n  @ApiResponse({ type: ResposeSuccessPaginationDTO, status: HttpStatus.OK })\n  async all(@Query() query: any): Promise {\n    try {\n      return {\n        status: 'success',\n        data: await this.PaymentMethodService.all({ query: query })\n      };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${PaymentMethodController.name}-${error.message ?? error}`\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  @Get(':guid')\n  @Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get one PaymentMethod by guid' })\n  @ApiResponse({ type: ResposeSuccessDataDTO, status: HttpStatus.OK })\n  @ApiResponse({ type: ResposeDTO, status: HttpStatus.NOT_FOUND })\n  async findOne(@Param('guid') guid: string): Promise {\n    try {\n      const PaymentMethod = await this.PaymentMethodService.getBy({\n        query: { guid: guid }\n      });\n      return { status: 'success', data: PaymentMethod };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${PaymentMethodController.name}-${error.message ?? error}`\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  @Post()\n  @Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOperation({ summary: 'Create PaymentMethod' })\n  @ApiResponse({ type: ResposeSuccessDataDTO, status: HttpStatus.CREATED })\n  @ApiResponse({ type: ResposeDTO, status: HttpStatus.CONFLICT })\n  async create(@Body() body: CreatePaymentMethodDto, @Req() request: { user: User }): Promise {\n    try {\n      const PaymentMethod: PaymentMethod = await this.PaymentMethodService.create({\n        body: body,\n        createdByGUID: request.user.guid\n      });\n      return { status: 'success', data: PaymentMethod };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${PaymentMethodController.name}-${error.message ?? error}`\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  @Patch(':guid')\n  @Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Update PaymentMethod' })\n  @ApiResponse({ type: ResposeSuccessDataDTO, status: HttpStatus.OK })\n  @ApiResponse({ type: ResposeDTO, status: HttpStatus.NOT_FOUND })\n  async update(@Param('guid') guid: string, @Body() body: UpdatePaymentMethodDto, @Req() request: { user: User }): Promise {\n    try {\n      const updatedPaymentMethod = await this.PaymentMethodService.update({\n        guid: guid,\n        body: body,\n        updatedByGUID: request.user.guid\n      });\n      return { status: 'success', data: updatedPaymentMethod };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${PaymentMethodController.name}-${error.message ?? error}`\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaymentMethodModule.html":{"url":"modules/PaymentMethodModule.html","title":"module - PaymentMethodModule","body":"\n                   \n\n\n\n\n    Modules\n    PaymentMethodModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaymentMethodModule\n\n\n\ncluster_PaymentMethodModule_exports\n\n\n\ncluster_PaymentMethodModule_providers\n\n\n\n\nPaymentMethodService \n\nPaymentMethodService \n\n\n\nPaymentMethodModule\n\nPaymentMethodModule\n\nPaymentMethodService  -->\n\nPaymentMethodModule->PaymentMethodService \n\n\n\n\n\nPaymentMethodService\n\nPaymentMethodService\n\nPaymentMethodModule -->\n\nPaymentMethodService->PaymentMethodModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/paymentMethod/paymentMethod.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaymentMethodService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PaymentMethodController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaymentMethodService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PaymentMethodService } from './paymentMethod.service';\nimport { PaymentMethodController } from './paymentMethod.controller';\nimport { PaymentMethod } from './entities/paymentMethod.entity';\nimport { User } from '../users/users.entity';\n\n@Module({\n  imports: [ConfigModule, TypeOrmModule.forFeature([User, PaymentMethod])],\n  controllers: [PaymentMethodController],\n  providers: [PaymentMethodService],\n  exports: [PaymentMethodService]\n})\nexport class PaymentMethodModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaymentMethodNoExistsException.html":{"url":"classes/PaymentMethodNoExistsException.html","title":"class - PaymentMethodNoExistsException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaymentMethodNoExistsException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/paymentMethod/paymentMethod.exeptions.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/paymentMethod/paymentMethod.exeptions.ts:9\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\nexport class PaymentMethodAlreadyExistsException extends HttpException {\n  constructor() {\n    super('PaymentMethod already exists', HttpStatus.CONFLICT);\n  }\n}\n\nexport class PaymentMethodNoExistsException extends HttpException {\n  constructor() {\n    super('PaymentMethod does not exist', HttpStatus.NOT_FOUND);\n  }\n}\n\nexport class CustomException extends HttpException {\n  constructor(message: string, status: number) {\n    super(message, status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaymentMethodService.html":{"url":"injectables/PaymentMethodService.html","title":"injectable - PaymentMethodService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaymentMethodService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/paymentMethod/paymentMethod.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            DefaultService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                    Readonly\n                                paymentMethodRepository\n                            \n                            \n                                    Public\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                all\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getBy\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/paymentMethod/paymentMethod.service.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        all\n                        \n                    \n                \n            \n            \n                \n                        \n                    all(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/paymentMethod/paymentMethod.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/paymentMethod/paymentMethod.service.ts:115\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getBy\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBy(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/paymentMethod/paymentMethod.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/paymentMethod/paymentMethod.service.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                            Readonly\n                        paymentMethodRepository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(PaymentMethod)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paymentMethod/paymentMethod.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                        \n                            \n                                Inherited from         DefaultService\n\n                            \n                        \n                    \n                        \n                                Defined in         DefaultService:4\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DefaultService } from '../app/defaults/defatul.service';\nimport { ResposeResultsPaginationDTO } from '../app/api.dto';\nimport { IsNull, Like, Repository } from 'typeorm';\nimport { SearchPaymentMethodDto } from './dto/search-paymentMethod.dto';\nimport { PaymentMethod } from './entities/paymentMethod.entity';\nimport { SearchPaymentMethodPaginationDto } from './dto/search-pagination-paymentMethod.dto';\nimport { CreatePaymentMethodDto } from './dto/create-paymentMethod.dto';\nimport { UpdatePaymentMethodDto } from './dto/update-paymentMethod.dto';\nimport { PaymentMethodNoExistsException } from './paymentMethod.exeptions';\n\n@Injectable()\nexport class PaymentMethodService extends DefaultService {\n  @InjectRepository(PaymentMethod)\n  private readonly paymentMethodRepository: Repository;\n\n  constructor() {\n    super(PaymentMethodService);\n  }\n\n  async getBy(params: { query: SearchPaymentMethodDto }): Promise {\n    try {\n      const paymentMethod = await this.paymentMethodRepository.findOne({\n        select: {\n          guid: true,\n          name: true,\n          createdAt: true,\n          updatedAt: true,\n          isActive: true,\n          createdBy: {\n            guid: true,\n            name: true,\n            lastname: true,\n            email: true,\n            createdAt: true,\n            updatedAt: true,\n            password: false\n          }\n        },\n        relations: ['createdBy', 'updatedBy', 'deletedBy'],\n        where: {\n          guid: params.query.guid || undefined,\n          name: params.query.name || undefined,\n          isActive: params.query.isActive || undefined,\n          deletedAt: IsNull()\n        }\n      });\n      return paymentMethod;\n    } catch (error) {\n      throw new Error(`${PaymentMethodService.name}[getBy]:${error.message}`);\n    }\n  }\n\n  async all(params: { query: SearchPaymentMethodPaginationDto }): Promise {\n    const emptyResponse = {\n      total: 0,\n      pageSize: 0,\n      offset: params.query.offset,\n      results: []\n    };\n    try {\n      if (Object.keys(params.query).length === 0) {\n        return emptyResponse;\n      }\n      if (params.query.pageSize?.toString() === '0') {\n        return emptyResponse;\n      }\n\n      const order = {};\n      if (params.query.orderBy && params.query.orderType) {\n        order[params.query.orderBy] = params.query.orderType;\n      }\n\n      const forPage: number = parseInt(params.query.pageSize);\n      const skip: number = parseInt(params.query.offset);\n      const [paymentMethod, total] = await this.paymentMethodRepository.findAndCount({\n        select: {\n          guid: true,\n          name: true,\n          createdAt: true,\n          updatedAt: true,\n          isActive: true,\n          createdBy: {\n            guid: true,\n            name: true,\n            lastname: true,\n            email: true,\n            createdAt: true,\n            updatedAt: true,\n            password: false\n          }\n        },\n        relations: ['createdBy', 'updatedBy'],\n        where: {\n          deletedAt: IsNull(),\n          name: params.query.name ? Like(`%${params.query.name}%`) : undefined,\n          isActive: params.query.isActive || undefined\n        },\n        order,\n        take: forPage,\n        skip: skip\n      });\n      return {\n        total: total,\n        pageSize: forPage,\n        offset: parseInt(params.query.offset),\n        results: paymentMethod\n      };\n    } catch (error) {\n      throw new Error(`${PaymentMethodService.name}[all]:${error.message}`);\n    }\n  }\n\n  async create(params: { body: CreatePaymentMethodDto; createdByGUID?: string }): Promise {\n    try {\n      const findPaymentMethod = await this.paymentMethodRepository.findOne({\n        where: { name: params.body.name, deletedAt: IsNull() }\n      });\n      if (findPaymentMethod) {\n        return findPaymentMethod;\n      }\n      const paymentMethod = await this.paymentMethodRepository.save({\n        name: params.body.name,\n        isActive: params.body.isActive || 1,\n        createdBy: { guid: params.createdByGUID }\n      });\n\n      return paymentMethod;\n    } catch (error) {\n      throw new Error(`${PaymentMethodService.name}[create]:${error.message}`);\n    }\n  }\n\n  async update(params: { guid: string; body: UpdatePaymentMethodDto; updatedByGUID: string }): Promise {\n    try {\n      const paymentMethod = await this.paymentMethodRepository.findOne({\n        where: { guid: params.guid, deletedAt: IsNull() }\n      });\n      if (!paymentMethod) {\n        throw new PaymentMethodNoExistsException();\n      }\n      paymentMethod.name = params.body.name || paymentMethod.name;\n      paymentMethod.isActive = params.body.isActive !== undefined ? params.body.isActive : paymentMethod.isActive;\n      return await this.paymentMethodRepository.save(paymentMethod);\n    } catch (error) {\n      throw new Error(`${PaymentMethodService.name}[update]:${error.message}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResposeDTO.html":{"url":"classes/ResposeDTO.html","title":"class - ResposeDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResposeDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                message\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/api.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"success\" | \"error\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/api.dto.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayMinSize,\n  IsArray,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nexport class ArrayGuidDTO {\n  @ApiProperty({ isArray: true, required: true, type: 'string' })\n  @ArrayMinSize(1)\n  @IsArray()\n  guids: string[];\n}\n\nexport class PaginationDTO {\n  @ApiProperty({ required: true, default: 0 })\n  @IsString()\n  offset?: number;\n\n  @ApiProperty({ required: true, default: 10 })\n  @IsString()\n  pageSize?: number;\n\n  @ApiProperty({ required: false, type: 'string', default: 'name' })\n  @IsOptional()\n  @IsString()\n  orderBy?: 'name' | 'lastname' | 'username' = 'name';\n\n  @ApiProperty({ required: false, type: 'string', default: 'ASC' })\n  @IsOptional()\n  @IsString()\n  orderType?: 'ASC' | 'DESC' = 'ASC';\n}\n\nexport class ResposeDTO {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  status: 'success' | 'error';\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  message?: string;\n}\n\nexport class ResposeSuccessDataDTO {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  status: 'success' | 'error';\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  data?: any;\n}\n\nexport class ResposeResultsPaginationDTO {\n  @ApiProperty({ required: true })\n  @IsNumber()\n  total: number;\n\n  @ApiProperty({ required: true })\n  @IsNumber()\n  pageSize: number;\n\n  @ApiProperty({ required: true })\n  @IsNumber()\n  offset: number;\n\n  @ApiProperty({ required: true })\n  @IsNumber()\n  results: any[];\n}\n\nexport class ResposeSuccessPaginationDTO {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  status: 'success' | 'error';\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  data?: ResposeResultsPaginationDTO;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResposeResultsPaginationDTO.html":{"url":"classes/ResposeResultsPaginationDTO.html","title":"class - ResposeResultsPaginationDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResposeResultsPaginationDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                offset\n                            \n                            \n                                    \n                                    \n                                pageSize\n                            \n                            \n                                    \n                                    \n                                results\n                            \n                            \n                                    \n                                    \n                                total\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/api.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/api.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        results\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/api.dto.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        total\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/api.dto.ts:64\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayMinSize,\n  IsArray,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nexport class ArrayGuidDTO {\n  @ApiProperty({ isArray: true, required: true, type: 'string' })\n  @ArrayMinSize(1)\n  @IsArray()\n  guids: string[];\n}\n\nexport class PaginationDTO {\n  @ApiProperty({ required: true, default: 0 })\n  @IsString()\n  offset?: number;\n\n  @ApiProperty({ required: true, default: 10 })\n  @IsString()\n  pageSize?: number;\n\n  @ApiProperty({ required: false, type: 'string', default: 'name' })\n  @IsOptional()\n  @IsString()\n  orderBy?: 'name' | 'lastname' | 'username' = 'name';\n\n  @ApiProperty({ required: false, type: 'string', default: 'ASC' })\n  @IsOptional()\n  @IsString()\n  orderType?: 'ASC' | 'DESC' = 'ASC';\n}\n\nexport class ResposeDTO {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  status: 'success' | 'error';\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  message?: string;\n}\n\nexport class ResposeSuccessDataDTO {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  status: 'success' | 'error';\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  data?: any;\n}\n\nexport class ResposeResultsPaginationDTO {\n  @ApiProperty({ required: true })\n  @IsNumber()\n  total: number;\n\n  @ApiProperty({ required: true })\n  @IsNumber()\n  pageSize: number;\n\n  @ApiProperty({ required: true })\n  @IsNumber()\n  offset: number;\n\n  @ApiProperty({ required: true })\n  @IsNumber()\n  results: any[];\n}\n\nexport class ResposeSuccessPaginationDTO {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  status: 'success' | 'error';\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  data?: ResposeResultsPaginationDTO;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResposeSuccessDataDTO.html":{"url":"classes/ResposeSuccessDataDTO.html","title":"class - ResposeSuccessDataDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResposeSuccessDataDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                data\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/api.dto.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"success\" | \"error\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/api.dto.ts:54\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayMinSize,\n  IsArray,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nexport class ArrayGuidDTO {\n  @ApiProperty({ isArray: true, required: true, type: 'string' })\n  @ArrayMinSize(1)\n  @IsArray()\n  guids: string[];\n}\n\nexport class PaginationDTO {\n  @ApiProperty({ required: true, default: 0 })\n  @IsString()\n  offset?: number;\n\n  @ApiProperty({ required: true, default: 10 })\n  @IsString()\n  pageSize?: number;\n\n  @ApiProperty({ required: false, type: 'string', default: 'name' })\n  @IsOptional()\n  @IsString()\n  orderBy?: 'name' | 'lastname' | 'username' = 'name';\n\n  @ApiProperty({ required: false, type: 'string', default: 'ASC' })\n  @IsOptional()\n  @IsString()\n  orderType?: 'ASC' | 'DESC' = 'ASC';\n}\n\nexport class ResposeDTO {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  status: 'success' | 'error';\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  message?: string;\n}\n\nexport class ResposeSuccessDataDTO {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  status: 'success' | 'error';\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  data?: any;\n}\n\nexport class ResposeResultsPaginationDTO {\n  @ApiProperty({ required: true })\n  @IsNumber()\n  total: number;\n\n  @ApiProperty({ required: true })\n  @IsNumber()\n  pageSize: number;\n\n  @ApiProperty({ required: true })\n  @IsNumber()\n  offset: number;\n\n  @ApiProperty({ required: true })\n  @IsNumber()\n  results: any[];\n}\n\nexport class ResposeSuccessPaginationDTO {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  status: 'success' | 'error';\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  data?: ResposeResultsPaginationDTO;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResposeSuccessPaginationDTO.html":{"url":"classes/ResposeSuccessPaginationDTO.html","title":"class - ResposeSuccessPaginationDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResposeSuccessPaginationDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/api.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                data\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResposeResultsPaginationDTO\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/api.dto.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"success\" | \"error\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/api.dto.ts:83\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayMinSize,\n  IsArray,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nexport class ArrayGuidDTO {\n  @ApiProperty({ isArray: true, required: true, type: 'string' })\n  @ArrayMinSize(1)\n  @IsArray()\n  guids: string[];\n}\n\nexport class PaginationDTO {\n  @ApiProperty({ required: true, default: 0 })\n  @IsString()\n  offset?: number;\n\n  @ApiProperty({ required: true, default: 10 })\n  @IsString()\n  pageSize?: number;\n\n  @ApiProperty({ required: false, type: 'string', default: 'name' })\n  @IsOptional()\n  @IsString()\n  orderBy?: 'name' | 'lastname' | 'username' = 'name';\n\n  @ApiProperty({ required: false, type: 'string', default: 'ASC' })\n  @IsOptional()\n  @IsString()\n  orderType?: 'ASC' | 'DESC' = 'ASC';\n}\n\nexport class ResposeDTO {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  status: 'success' | 'error';\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  message?: string;\n}\n\nexport class ResposeSuccessDataDTO {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  status: 'success' | 'error';\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  data?: any;\n}\n\nexport class ResposeResultsPaginationDTO {\n  @ApiProperty({ required: true })\n  @IsNumber()\n  total: number;\n\n  @ApiProperty({ required: true })\n  @IsNumber()\n  pageSize: number;\n\n  @ApiProperty({ required: true })\n  @IsNumber()\n  offset: number;\n\n  @ApiProperty({ required: true })\n  @IsNumber()\n  results: any[];\n}\n\nexport class ResposeSuccessPaginationDTO {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  status: 'success' | 'error';\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  data?: ResposeResultsPaginationDTO;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Role.html":{"url":"entities/Role.html","title":"entity - Role","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                guid\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 200, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/roles.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn({type: 'varchar', length: 38, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/roles.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 45, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/roles.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, user => user.role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/roles.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany, PrimaryColumn } from 'typeorm';\nimport { User } from '../users/users.entity';\n\n@Entity({ name: 'Roles' })\nexport class Role {\n  @PrimaryColumn({ type: 'varchar', length: 38, nullable: false })\n  guid: string;\n\n  @Column({ type: 'varchar', length: 45, nullable: false })\n  role: string;\n\n  @Column({ type: 'varchar', length: 200, nullable: true })\n  description?: string;\n\n  @OneToMany(() => User, (user) => user.role)\n  users: User[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guard/roles.guard.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guard/roles.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../../roles/decorators/roles.decorator';\nimport { RoleEnum } from '../../roles/role.enum';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) { }\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const req = context.switchToHttp().getRequest();\n\n    const user = req.user;\n\n    if (!user) return true;\n\n    const hasRole = requiredRoles.some((role) => user.role.guid === role);\n\n    if (!hasRole) {\n      throw new HttpException(\n        {\n          status: 'error',\n          message: 'You do not have permission (Roles).',\n        },\n        HttpStatus.UNAUTHORIZED,\n      );\n    }\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchCategoryDto.html":{"url":"classes/SearchCategoryDto.html","title":"class - SearchCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dto/search-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                createdByGuid\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                guid\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                updatedByGuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        createdByGuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/search-category.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/search-category.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/search-category.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'number', required: false})@IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/search-category.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/search-category.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        updatedByGuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/search-category.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNumber, IsOptional, IsString } from 'class-validator';\n\nexport class SearchCategoryDto {\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  guid?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiProperty({ type: 'number', required: false })\n  @IsOptional()\n  @IsNumber()\n  isActive?: number;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  createdByGuid?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  updatedByGuid?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchCategoryPaginationDto.html":{"url":"classes/SearchCategoryPaginationDto.html","title":"class - SearchCategoryPaginationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchCategoryPaginationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dto/search-pagination-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                createdBy\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                guid\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                offset\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                orderBy\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                orderType\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                pageSize\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                updatedBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/search-pagination-category.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/search-pagination-category.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/search-pagination-category.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'number', required: false})@IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/search-pagination-category.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/search-pagination-category.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true, default: 0})@IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/search-pagination-category.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"name\" | \"created\"\n\n                    \n                \n                \n                    \n                        Default value : 'name'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, type: 'string', default: 'name'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/search-pagination-category.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        orderType\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"ASC\" | \"DESC\"\n\n                    \n                \n                \n                    \n                        Default value : 'ASC'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, type: 'string', default: 'ASC'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/search-pagination-category.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true, default: 10})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/search-pagination-category.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        updatedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/search-pagination-category.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNumber, IsOptional, IsString } from 'class-validator';\n\nexport class SearchCategoryPaginationDto {\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  guid?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiProperty({ type: 'number', required: false })\n  @IsOptional()\n  @IsNumber()\n  isActive?: number;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  createdBy?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  updatedBy?: string;\n\n  @ApiProperty({ required: true, default: 0 })\n  @IsNumber()\n  @IsOptional()\n  offset?: any;\n\n  @ApiProperty({ required: true, default: 10 })\n  @IsNumber()\n  pageSize?: any;\n\n  @ApiProperty({ required: false, type: 'string', default: 'name' })\n  @IsOptional()\n  @IsString()\n  orderBy?: 'name' | 'created' = 'name';\n\n  @ApiProperty({ required: false, type: 'string', default: 'ASC' })\n  @IsOptional()\n  @IsString()\n  orderType?: 'ASC' | 'DESC' = 'ASC';\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchNotificationDto.html":{"url":"classes/SearchNotificationDto.html","title":"class - SearchNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/dto/search-notification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                createdByGuid\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                guid\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                updatedByGuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        createdByGuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/dto/search-notification.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/dto/search-notification.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'number', required: false})@IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/dto/search-notification.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/dto/search-notification.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        updatedByGuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/dto/search-notification.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNumber, IsOptional, IsString } from 'class-validator';\n\nexport class SearchNotificationDto {\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  guid?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @ApiProperty({ type: 'number', required: false })\n  @IsOptional()\n  @IsNumber()\n  isActive?: number;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  createdByGuid?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  updatedByGuid?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchNotificationPaginationDto.html":{"url":"classes/SearchNotificationPaginationDto.html","title":"class - SearchNotificationPaginationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchNotificationPaginationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/dto/search-pagination-notification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                body\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                createdBy\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                guid\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                offset\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                orderBy\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                orderType\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                pageSize\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                updatedBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/dto/search-pagination-notification.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/dto/search-pagination-notification.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/dto/search-pagination-notification.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'number', required: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/dto/search-pagination-notification.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true, default: 0})@IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/dto/search-pagination-notification.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"name\" | \"created\"\n\n                    \n                \n                \n                    \n                        Default value : 'name'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, type: 'string', default: 'name'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/dto/search-pagination-notification.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        orderType\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"ASC\" | \"DESC\"\n\n                    \n                \n                \n                    \n                        Default value : 'ASC'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, type: 'string', default: 'ASC'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/dto/search-pagination-notification.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true, default: 10})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/dto/search-pagination-notification.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        updatedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/notification/dto/search-pagination-notification.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNumber, IsOptional, IsString } from 'class-validator';\n\nexport class SearchNotificationPaginationDto {\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  guid?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  body?: string;\n\n  @ApiProperty({ type: 'number', required: false })\n  @IsOptional()\n  isActive?: number;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  createdBy?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  updatedBy?: string;\n\n  @ApiProperty({ required: true, default: 0 })\n  @IsNumber()\n  @IsOptional()\n  offset?: any;\n\n  @ApiProperty({ required: true, default: 10 })\n  @IsNumber()\n  pageSize?: any;\n\n  @ApiProperty({ required: false, type: 'string', default: 'name' })\n  @IsOptional()\n  @IsString()\n  orderBy?: 'name' | 'created' = 'name';\n\n  @ApiProperty({ required: false, type: 'string', default: 'ASC' })\n  @IsOptional()\n  @IsString()\n  orderType?: 'ASC' | 'DESC' = 'ASC';\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchOrganizationDto.html":{"url":"classes/SearchOrganizationDto.html","title":"class - SearchOrganizationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchOrganizationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/organization/dto/search-organization.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                createdByGuid\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                guid\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                updatedByGuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        createdByGuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/search-organization.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/search-organization.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'number', required: false})@IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/search-organization.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/search-organization.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        updatedByGuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/search-organization.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNumber, IsOptional, IsString } from 'class-validator';\n\nexport class SearchOrganizationDto {\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  guid?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @ApiProperty({ type: 'number', required: false })\n  @IsOptional()\n  @IsNumber()\n  isActive?: number;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  createdByGuid?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  updatedByGuid?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchOrganizationPaginationDto.html":{"url":"classes/SearchOrganizationPaginationDto.html","title":"class - SearchOrganizationPaginationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchOrganizationPaginationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/organization/dto/search-pagination-organization.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                createdBy\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                guid\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                offset\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                orderBy\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                orderType\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                pageSize\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                updatedBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/search-pagination-organization.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/search-pagination-organization.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'number', required: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/search-pagination-organization.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/search-pagination-organization.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true, default: 0})@IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/search-pagination-organization.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"name\" | \"created\"\n\n                    \n                \n                \n                    \n                        Default value : 'name'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, type: 'string', default: 'name'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/search-pagination-organization.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        orderType\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"ASC\" | \"DESC\"\n\n                    \n                \n                \n                    \n                        Default value : 'ASC'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, type: 'string', default: 'ASC'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/search-pagination-organization.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true, default: 10})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/search-pagination-organization.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        updatedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/organization/dto/search-pagination-organization.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNumber, IsOptional, IsString } from 'class-validator';\n\nexport class SearchOrganizationPaginationDto {\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  guid?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @ApiProperty({ type: 'number', required: false })\n  @IsOptional()\n  isActive?: number;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  createdBy?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  updatedBy?: string;\n\n  @ApiProperty({ required: true, default: 0 })\n  @IsNumber()\n  @IsOptional()\n  offset?: any;\n\n  @ApiProperty({ required: true, default: 10 })\n  @IsNumber()\n  pageSize?: any;\n\n  @ApiProperty({ required: false, type: 'string', default: 'name' })\n  @IsOptional()\n  @IsString()\n  orderBy?: 'name' | 'created' = 'name';\n\n  @ApiProperty({ required: false, type: 'string', default: 'ASC' })\n  @IsOptional()\n  @IsString()\n  orderType?: 'ASC' | 'DESC' = 'ASC';\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchPaymentMethodDto.html":{"url":"classes/SearchPaymentMethodDto.html","title":"class - SearchPaymentMethodDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchPaymentMethodDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/paymentMethod/dto/search-paymentMethod.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                createdByGuid\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                guid\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                updatedByGuid\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        createdByGuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paymentMethod/dto/search-paymentMethod.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paymentMethod/dto/search-paymentMethod.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'number', required: false})@IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paymentMethod/dto/search-paymentMethod.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paymentMethod/dto/search-paymentMethod.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        updatedByGuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paymentMethod/dto/search-paymentMethod.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNumber, IsOptional, IsString } from 'class-validator';\n\nexport class SearchPaymentMethodDto {\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  guid?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @ApiProperty({ type: 'number', required: false })\n  @IsOptional()\n  @IsNumber()\n  isActive?: number;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  createdByGuid?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  updatedByGuid?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchPaymentMethodPaginationDto.html":{"url":"classes/SearchPaymentMethodPaginationDto.html","title":"class - SearchPaymentMethodPaginationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchPaymentMethodPaginationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/paymentMethod/dto/search-pagination-paymentMethod.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                createdBy\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                guid\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                offset\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                orderBy\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                orderType\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                pageSize\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                updatedBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paymentMethod/dto/search-pagination-paymentMethod.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paymentMethod/dto/search-pagination-paymentMethod.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'number', required: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paymentMethod/dto/search-pagination-paymentMethod.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paymentMethod/dto/search-pagination-paymentMethod.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true, default: 0})@IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paymentMethod/dto/search-pagination-paymentMethod.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"name\" | \"created\"\n\n                    \n                \n                \n                    \n                        Default value : 'name'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, type: 'string', default: 'name'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paymentMethod/dto/search-pagination-paymentMethod.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        orderType\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"ASC\" | \"DESC\"\n\n                    \n                \n                \n                    \n                        Default value : 'ASC'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, type: 'string', default: 'ASC'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paymentMethod/dto/search-pagination-paymentMethod.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true, default: 10})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paymentMethod/dto/search-pagination-paymentMethod.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        updatedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/paymentMethod/dto/search-pagination-paymentMethod.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNumber, IsOptional, IsString } from 'class-validator';\n\nexport class SearchPaymentMethodPaginationDto {\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  guid?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @ApiProperty({ type: 'number', required: false })\n  @IsOptional()\n  isActive?: number;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  createdBy?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  updatedBy?: string;\n\n  @ApiProperty({ required: true, default: 0 })\n  @IsNumber()\n  @IsOptional()\n  offset?: any;\n\n  @ApiProperty({ required: true, default: 10 })\n  @IsNumber()\n  pageSize?: any;\n\n  @ApiProperty({ required: false, type: 'string', default: 'name' })\n  @IsOptional()\n  @IsString()\n  orderBy?: 'name' | 'created' = 'name';\n\n  @ApiProperty({ required: false, type: 'string', default: 'ASC' })\n  @IsOptional()\n  @IsString()\n  orderType?: 'ASC' | 'DESC' = 'ASC';\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchUserDTO.html":{"url":"classes/SearchUserDTO.html","title":"class - SearchUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                category\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                document\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                googleID\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                guid\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isProfessional\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:235\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        document\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:207\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:230\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        googleID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:225\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:197\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'number', required: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:215\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isProfessional\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'number'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:211\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:220\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:202\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsEmail, IsEnum, IsNotEmpty, IsOptional, IsString, MaxLength, MinLength } from 'class-validator';\nimport { RoleEnum } from 'src/roles/role.enum';\n\nexport class LoginDTO {\n  @ApiProperty({ required: true })\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsString()\n  username: string;\n\n  @ApiProperty({ required: true })\n  @MinLength(3)\n  @MaxLength(70)\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\nexport class googleOAuthDTO {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  googleID: string;\n\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  email: string;\n\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  lastname: string;\n}\n\nexport class CreateUserDTO {\n  @ApiProperty({ required: true })\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsString()\n  username: string;\n\n  @ApiProperty({ required: true })\n  @MaxLength(10)\n  @MinLength(7)\n  @IsNotEmpty()\n  @IsString()\n  document: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsString()\n  @IsOptional()\n  phone: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsString()\n  @IsOptional()\n  birthdate: Date;\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  @MaxLength(250)\n  profileImage: string;\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  @MaxLength(250)\n  documentSideA: string;\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  @MaxLength(250)\n  documentSideB: string;\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  @MaxLength(250)\n  backgroundCheck: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsString()\n  @IsOptional()\n  backgroundCheckDate: Date;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsString()\n  @IsOptional()\n  backgroundCheckExpirationDate: Date;\n\n  @ApiProperty({ required: false })\n  @MaxLength(150)\n  @IsString()\n  @IsOptional()\n  mapAdress: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsOptional()\n  @IsString()\n  address: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsOptional()\n  @IsString()\n  @IsEmail()\n  email?: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsOptional()\n  @IsString()\n  googleID?: string;\n\n  @ApiProperty({ required: true })\n  @MinLength(3)\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @ApiProperty({ required: false })\n  @MinLength(3)\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsOptional()\n  @IsString()\n  lastname?: string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  isActive?: number;\n\n  @ApiProperty({ type: 'number' })\n  @IsOptional()\n  isProfessional?: number;\n\n  @ApiProperty({ required: false })\n  @MinLength(3)\n  @MaxLength(70)\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n\n  @ApiProperty({ required: false, enum: RoleEnum, type: 'string' })\n  @IsOptional()\n  @IsNotEmpty()\n  @IsEnum(RoleEnum, { each: true })\n  roleGuid: RoleEnum | string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  @IsString()\n  category?: string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  availability?: {};\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  isAvailable?: number;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  @IsString()\n  paymentMethods?: string;\n}\n\nexport class UpdateUserDTO extends PartialType(CreateUserDTO) { }\n\nexport class SearchUserDTO {\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  guid?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  username?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  document?: string;\n\n  @ApiProperty({ type: 'number' })\n  @IsOptional()\n  isProfessional?: number;\n\n  @ApiProperty({ type: 'number', required: false })\n  @IsOptional()\n  isActive?: number;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  password?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  googleID?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  email?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  category?: string;\n}\n\nexport class SearchUserPaginationDTO {\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  guid?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  paymentMethod?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  phone?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  lastname?: string;\n\n  @ApiProperty({ type: 'number', required: false })\n  @IsOptional()\n  isProfessional?: number;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  email?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  mapAdress?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  username?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  document?: string;\n\n  @ApiProperty({ type: 'number', required: false })\n  @IsOptional()\n  isActive?: number;\n\n  @ApiProperty({ required: false, enum: RoleEnum, type: 'string' })\n  @IsOptional()\n  @IsEnum(RoleEnum, { each: true })\n  roleGuid: RoleEnum | string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  createdByGuid?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  updatedByGuid?: string;\n\n  @ApiProperty({ required: true, default: 0 })\n  @IsOptional()\n  offset?: any;\n\n  @ApiProperty({ required: true, default: 10 })\n  @IsOptional()\n  pageSize?: any;\n\n  @ApiProperty({ required: false, type: 'string', default: 'name' })\n  @IsOptional()\n  @IsString()\n  orderBy?: 'name' | 'lastname' | 'username';\n\n  @ApiProperty({ required: false, type: 'string', default: 'ASC' })\n  @IsOptional()\n  @IsString()\n  orderType?: 'ASC' | 'DESC';\n\n  @ApiProperty({ required: false, type: 'string', default: '' })\n  @IsOptional()\n  @IsString()\n  category?: string;\n\n  @ApiProperty({ required: false, type: 'string', default: '' })\n  @IsOptional()\n  @IsString()\n  categoryID?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchUserPaginationDTO.html":{"url":"classes/SearchUserPaginationDTO.html","title":"class - SearchUserPaginationDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchUserPaginationDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                category\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                categoryID\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                createdByGuid\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                document\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                guid\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isProfessional\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastname\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                mapAdress\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                offset\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                orderBy\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                orderType\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                pageSize\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                paymentMethod\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    \n                                    \n                                roleGuid\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                updatedByGuid\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, type: 'string', default: ''})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:328\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        categoryID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, type: 'string', default: ''})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:333\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        createdByGuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:300\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        document\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:286\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:271\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:242\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'number', required: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:290\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isProfessional\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'number', required: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:266\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:262\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        mapAdress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:276\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:247\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true, default: 0})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:309\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        orderBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"name\" | \"lastname\" | \"username\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, type: 'string', default: 'name'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:318\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        orderType\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"ASC\" | \"DESC\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, type: 'string', default: 'ASC'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:323\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        pageSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true, default: 10})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:313\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        paymentMethod\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:252\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:257\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        roleGuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoleEnum | string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, enum: RoleEnum, type: 'string'})@IsOptional()@IsEnum(RoleEnum, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:295\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        updatedByGuid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:305\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:281\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsEmail, IsEnum, IsNotEmpty, IsOptional, IsString, MaxLength, MinLength } from 'class-validator';\nimport { RoleEnum } from 'src/roles/role.enum';\n\nexport class LoginDTO {\n  @ApiProperty({ required: true })\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsString()\n  username: string;\n\n  @ApiProperty({ required: true })\n  @MinLength(3)\n  @MaxLength(70)\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\nexport class googleOAuthDTO {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  googleID: string;\n\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  email: string;\n\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  lastname: string;\n}\n\nexport class CreateUserDTO {\n  @ApiProperty({ required: true })\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsString()\n  username: string;\n\n  @ApiProperty({ required: true })\n  @MaxLength(10)\n  @MinLength(7)\n  @IsNotEmpty()\n  @IsString()\n  document: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsString()\n  @IsOptional()\n  phone: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsString()\n  @IsOptional()\n  birthdate: Date;\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  @MaxLength(250)\n  profileImage: string;\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  @MaxLength(250)\n  documentSideA: string;\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  @MaxLength(250)\n  documentSideB: string;\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  @MaxLength(250)\n  backgroundCheck: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsString()\n  @IsOptional()\n  backgroundCheckDate: Date;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsString()\n  @IsOptional()\n  backgroundCheckExpirationDate: Date;\n\n  @ApiProperty({ required: false })\n  @MaxLength(150)\n  @IsString()\n  @IsOptional()\n  mapAdress: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsOptional()\n  @IsString()\n  address: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsOptional()\n  @IsString()\n  @IsEmail()\n  email?: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsOptional()\n  @IsString()\n  googleID?: string;\n\n  @ApiProperty({ required: true })\n  @MinLength(3)\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @ApiProperty({ required: false })\n  @MinLength(3)\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsOptional()\n  @IsString()\n  lastname?: string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  isActive?: number;\n\n  @ApiProperty({ type: 'number' })\n  @IsOptional()\n  isProfessional?: number;\n\n  @ApiProperty({ required: false })\n  @MinLength(3)\n  @MaxLength(70)\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n\n  @ApiProperty({ required: false, enum: RoleEnum, type: 'string' })\n  @IsOptional()\n  @IsNotEmpty()\n  @IsEnum(RoleEnum, { each: true })\n  roleGuid: RoleEnum | string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  @IsString()\n  category?: string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  availability?: {};\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  isAvailable?: number;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  @IsString()\n  paymentMethods?: string;\n}\n\nexport class UpdateUserDTO extends PartialType(CreateUserDTO) { }\n\nexport class SearchUserDTO {\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  guid?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  username?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  document?: string;\n\n  @ApiProperty({ type: 'number' })\n  @IsOptional()\n  isProfessional?: number;\n\n  @ApiProperty({ type: 'number', required: false })\n  @IsOptional()\n  isActive?: number;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  password?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  googleID?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  email?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  category?: string;\n}\n\nexport class SearchUserPaginationDTO {\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  guid?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  paymentMethod?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  phone?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  lastname?: string;\n\n  @ApiProperty({ type: 'number', required: false })\n  @IsOptional()\n  isProfessional?: number;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  email?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  mapAdress?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  username?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  document?: string;\n\n  @ApiProperty({ type: 'number', required: false })\n  @IsOptional()\n  isActive?: number;\n\n  @ApiProperty({ required: false, enum: RoleEnum, type: 'string' })\n  @IsOptional()\n  @IsEnum(RoleEnum, { each: true })\n  roleGuid: RoleEnum | string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  createdByGuid?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  updatedByGuid?: string;\n\n  @ApiProperty({ required: true, default: 0 })\n  @IsOptional()\n  offset?: any;\n\n  @ApiProperty({ required: true, default: 10 })\n  @IsOptional()\n  pageSize?: any;\n\n  @ApiProperty({ required: false, type: 'string', default: 'name' })\n  @IsOptional()\n  @IsString()\n  orderBy?: 'name' | 'lastname' | 'username';\n\n  @ApiProperty({ required: false, type: 'string', default: 'ASC' })\n  @IsOptional()\n  @IsString()\n  orderType?: 'ASC' | 'DESC';\n\n  @ApiProperty({ required: false, type: 'string', default: '' })\n  @IsOptional()\n  @IsString()\n  category?: string;\n\n  @ApiProperty({ required: false, type: 'string', default: '' })\n  @IsOptional()\n  @IsString()\n  categoryID?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendNotificationsToUserDTO.html":{"url":"classes/SendNotificationsToUserDTO.html","title":"class - SendNotificationsToUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendNotificationsToUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/dto/sendNotificationsToUser.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                body\n                            \n                            \n                                recipient\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/notification/dto/sendNotificationsToUser.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recipient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/notification/dto/sendNotificationsToUser.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class SendNotificationsToUserDTO {\n  recipient: string;\n  body: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SqlReader.html":{"url":"classes/SqlReader.html","title":"class - SqlReader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SqlReader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/utils/sqlParser.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                parseSqlString\n                            \n                            \n                                    Static\n                                readSqlFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/utils/sqlParser.ts:3\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        parseSqlString\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseSqlString(sqlString: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/utils/sqlParser.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sqlString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        readSqlFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    readSqlFile(filepath: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/utils/sqlParser.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filepath\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as fs from 'fs';\n\nexport class SqlReader {\n  constructor() { }\n\n  static parseSqlString(sqlString: string): string[] {\n    return (\n      sqlString\n        .replace(/(--)(.*)/g, '')\n        .replace(/\\r?\\n|\\r/g, ' ')\n        .replace(/\\/\\*.*\\*\\//g, ' ')\n        .replace(/\\s\\s+/g, ' ')\n        .split(';')\n        .map((query) => query.trim())\n        .filter((query) => query?.length)\n    );\n  }\n\n  static readSqlFile(filepath: string): string[] {\n    const sqlString = fs.readFileSync(filepath).toString();\n    return SqlReader.parseSqlString(sqlString);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TypeOrmConfigService.html":{"url":"injectables/TypeOrmConfigService.html","title":"injectable - TypeOrmConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TypeOrmConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            config/typeorm.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                    Readonly\n                                config\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createTypeOrmOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createTypeOrmOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTypeOrmOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in config/typeorm.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     TypeOrmModuleOptions\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                            Readonly\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ConfigService\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(ConfigService)\n                        \n                    \n                \n                    \n                        \n                                Defined in config/typeorm.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { TypeOrmModuleOptions, TypeOrmOptionsFactory } from '@nestjs/typeorm';\n\n@Injectable()\nexport class TypeOrmConfigService implements TypeOrmOptionsFactory {\n  @Inject(ConfigService)\n  private readonly config: ConfigService;\n\n  public createTypeOrmOptions(): TypeOrmModuleOptions {\n    return {\n      type: 'mysql',\n      host: this.config.get('DATABASE_HOST'),\n      port: this.config.get('DATABASE_PORT'),\n      database: this.config.get('DATABASE_NAME'),\n      username: this.config.get('DATABASE_USERNAME'),\n      password: this.config.get('DATABASE_PASSWORD'),\n      entities: ['dist/**/*.entity.{ts,js}'],\n      multipleStatements: true,\n      synchronize: false,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dto/update-category.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateCategoryDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateCategoryDto } from './create-category.dto';\n\nexport class UpdateCategoryDto extends PartialType(CreateCategoryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateNotificationDto.html":{"url":"classes/UpdateNotificationDto.html","title":"class - UpdateNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/dto/update-notification.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateNotificationDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateNotificationDto } from './create-notification.dto';\n\nexport class UpdateNotificationDto extends PartialType(CreateNotificationDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateOrganizationDto.html":{"url":"classes/UpdateOrganizationDto.html","title":"class - UpdateOrganizationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateOrganizationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/organization/dto/update-organization.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateOrganizationDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateOrganizationDto } from './create-organization.dto';\n\nexport class UpdateOrganizationDto extends PartialType(CreateOrganizationDto) { }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePaymentMethodDto.html":{"url":"classes/UpdatePaymentMethodDto.html","title":"class - UpdatePaymentMethodDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePaymentMethodDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/paymentMethod/dto/update-paymentMethod.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePaymentMethodDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreatePaymentMethodDto } from './create-paymentMethod.dto';\n\nexport class UpdatePaymentMethodDto extends PartialType(CreatePaymentMethodDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDTO.html":{"url":"classes/UpdateUserDTO.html","title":"class - UpdateUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDTO)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsEmail, IsEnum, IsNotEmpty, IsOptional, IsString, MaxLength, MinLength } from 'class-validator';\nimport { RoleEnum } from 'src/roles/role.enum';\n\nexport class LoginDTO {\n  @ApiProperty({ required: true })\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsString()\n  username: string;\n\n  @ApiProperty({ required: true })\n  @MinLength(3)\n  @MaxLength(70)\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\nexport class googleOAuthDTO {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  googleID: string;\n\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  email: string;\n\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  lastname: string;\n}\n\nexport class CreateUserDTO {\n  @ApiProperty({ required: true })\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsString()\n  username: string;\n\n  @ApiProperty({ required: true })\n  @MaxLength(10)\n  @MinLength(7)\n  @IsNotEmpty()\n  @IsString()\n  document: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsString()\n  @IsOptional()\n  phone: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsString()\n  @IsOptional()\n  birthdate: Date;\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  @MaxLength(250)\n  profileImage: string;\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  @MaxLength(250)\n  documentSideA: string;\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  @MaxLength(250)\n  documentSideB: string;\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  @MaxLength(250)\n  backgroundCheck: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsString()\n  @IsOptional()\n  backgroundCheckDate: Date;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsString()\n  @IsOptional()\n  backgroundCheckExpirationDate: Date;\n\n  @ApiProperty({ required: false })\n  @MaxLength(150)\n  @IsString()\n  @IsOptional()\n  mapAdress: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsOptional()\n  @IsString()\n  address: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsOptional()\n  @IsString()\n  @IsEmail()\n  email?: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsOptional()\n  @IsString()\n  googleID?: string;\n\n  @ApiProperty({ required: true })\n  @MinLength(3)\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @ApiProperty({ required: false })\n  @MinLength(3)\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsOptional()\n  @IsString()\n  lastname?: string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  isActive?: number;\n\n  @ApiProperty({ type: 'number' })\n  @IsOptional()\n  isProfessional?: number;\n\n  @ApiProperty({ required: false })\n  @MinLength(3)\n  @MaxLength(70)\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n\n  @ApiProperty({ required: false, enum: RoleEnum, type: 'string' })\n  @IsOptional()\n  @IsNotEmpty()\n  @IsEnum(RoleEnum, { each: true })\n  roleGuid: RoleEnum | string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  @IsString()\n  category?: string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  availability?: {};\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  isAvailable?: number;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  @IsString()\n  paymentMethods?: string;\n}\n\nexport class UpdateUserDTO extends PartialType(CreateUserDTO) { }\n\nexport class SearchUserDTO {\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  guid?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  username?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  document?: string;\n\n  @ApiProperty({ type: 'number' })\n  @IsOptional()\n  isProfessional?: number;\n\n  @ApiProperty({ type: 'number', required: false })\n  @IsOptional()\n  isActive?: number;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  password?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  googleID?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  email?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  category?: string;\n}\n\nexport class SearchUserPaginationDTO {\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  guid?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  paymentMethod?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  phone?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  lastname?: string;\n\n  @ApiProperty({ type: 'number', required: false })\n  @IsOptional()\n  isProfessional?: number;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  email?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  mapAdress?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  username?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  document?: string;\n\n  @ApiProperty({ type: 'number', required: false })\n  @IsOptional()\n  isActive?: number;\n\n  @ApiProperty({ required: false, enum: RoleEnum, type: 'string' })\n  @IsOptional()\n  @IsEnum(RoleEnum, { each: true })\n  roleGuid: RoleEnum | string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  createdByGuid?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  updatedByGuid?: string;\n\n  @ApiProperty({ required: true, default: 0 })\n  @IsOptional()\n  offset?: any;\n\n  @ApiProperty({ required: true, default: 10 })\n  @IsOptional()\n  pageSize?: any;\n\n  @ApiProperty({ required: false, type: 'string', default: 'name' })\n  @IsOptional()\n  @IsString()\n  orderBy?: 'name' | 'lastname' | 'username';\n\n  @ApiProperty({ required: false, type: 'string', default: 'ASC' })\n  @IsOptional()\n  @IsString()\n  orderType?: 'ASC' | 'DESC';\n\n  @ApiProperty({ required: false, type: 'string', default: '' })\n  @IsOptional()\n  @IsString()\n  category?: string;\n\n  @ApiProperty({ required: false, type: 'string', default: '' })\n  @IsOptional()\n  @IsString()\n  categoryID?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                availability\n                            \n                            \n                                    \n                                backgroundCheck\n                            \n                            \n                                    \n                                backgroundCheckDate\n                            \n                            \n                                    \n                                backgroundCheckExpirationDate\n                            \n                            \n                                    \n                                birthdate\n                            \n                            \n                                    \n                                    \n                                category\n                            \n                            \n                                    \n                                certifications\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                createdBy\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                deletedBy\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                document\n                            \n                            \n                                    \n                                documentSideA\n                            \n                            \n                                    \n                                documentSideB\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                googleID\n                            \n                            \n                                    \n                                guid\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                isAvailable\n                            \n                            \n                                    \n                                lastname\n                            \n                            \n                                    \n                                mapAdress\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                Organization\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                paymentMethod\n                            \n                            \n                                    \n                                phone\n                            \n                            \n                                    \n                                previusWorks\n                            \n                            \n                                    \n                                profileImage\n                            \n                            \n                                    \n                                    \n                                role\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                updatedBy\n                            \n                            \n                                    \n                                userCreated\n                            \n                            \n                                    \n                                userDeleted\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                            \n                                    \n                                userUpdated\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 50, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        availability\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 350, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:157\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        backgroundCheck\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        backgroundCheckDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        backgroundCheckExpirationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        birthdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, category => category.users)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:146\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        certifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 3250, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:166\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:127\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.userCreated, {nullable: true, onDelete: 'NO ACTION', onUpdate: 'NO ACTION'})@JoinColumn({foreignKeyConstraintName: 'Users_fk_1', name: 'createdBy', referencedColumnName: 'guid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:133\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        deletedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.userDeleted, {nullable: true, onDelete: 'NO ACTION', onUpdate: 'NO ACTION'})@JoinColumn({foreignKeyConstraintName: 'Users_fk_3', name: 'updatedBy', referencedColumnName: 'guid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:124\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 550, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:160\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        document\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 10, nullable: true})@Unique(['document'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        documentSideA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        documentSideB\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 50, nullable: false})@Unique(['email'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        googleID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 50, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        guid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'tinyint', nullable: false, default: '1'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isAvailable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'tinyint', nullable: false, default: '1'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:169\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 50, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        mapAdress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 150, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 50, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        Organization\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PaymentMethod[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, Organization => Organization.users)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:154\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 250, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        paymentMethod\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PaymentMethod[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, paymentMethod => paymentMethod.users)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:150\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 50, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        previusWorks\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 3250, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:163\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        profileImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, role => role.users, {nullable: false, onDelete: 'NO ACTION', onUpdate: 'NO ACTION'})@JoinColumn({foreignKeyConstraintName: 'Users_Roles_fk', name: 'roleGuid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:130\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        updatedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.userUpdated, {nullable: true, onDelete: 'NO ACTION', onUpdate: 'NO ACTION'})@JoinColumn({foreignKeyConstraintName: 'Users_fk_2', name: 'updatedBy', referencedColumnName: 'guid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:112\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userCreated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, user => user.createdBy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, user => user.deletedBy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:142\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 50, nullable: false})@Unique(['username'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userUpdated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, user => user.updatedBy)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:139\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  Unique,\n  UpdateDateColumn\n} from 'typeorm';\nimport { Category } from '../categories/entities/category.entity';\nimport { PaymentMethod } from '../paymentMethod/entities/paymentMethod.entity';\nimport { Role } from '../roles/roles.entity';\nimport { Organization } from '../organization/entities/organization.entity';\n\n@Entity({ name: 'Users' })\n@Unique('Users_uk', ['username'])\nexport class User {\n  @PrimaryGeneratedColumn('uuid')\n  guid: string;\n\n  @Column({ type: 'varchar', length: 10, nullable: true })\n  @Unique(['document'])\n  document: string;\n\n  @Column({ type: 'varchar', length: 50, nullable: false })\n  name: string;\n\n  @Column({ type: 'varchar', length: 50, nullable: true })\n  lastname: string;\n\n  @Column({ type: 'varchar', length: 50, nullable: false })\n  @Unique(['email'])\n  email: string;\n\n  @Column({ type: 'varchar', length: 50, nullable: true })\n  address: string;\n\n  @Column({ type: 'date', nullable: true })\n  birthdate: Date;\n\n  @Column()\n  profileImage: string;\n\n  @Column()\n  documentSideA: string;\n\n  @Column()\n  documentSideB: string;\n\n  @Column()\n  backgroundCheck: string;\n\n  @Column({ type: 'date', nullable: true })\n  backgroundCheckDate: Date;\n\n  @Column({ type: 'date', nullable: true })\n  backgroundCheckExpirationDate: Date;\n\n  @Column({ type: 'varchar', length: 50, nullable: true })\n  phone: string;\n\n  @Column({ type: 'varchar', length: 150, nullable: true })\n  mapAdress: string;\n\n  @Column({ type: 'varchar', length: 50, nullable: false })\n  @Unique(['username'])\n  username: string;\n\n  @Column({ type: 'varchar', length: 50, nullable: true })\n  googleID: string;\n\n  @ManyToOne(() => Role, (role) => role.users, {\n    nullable: false,\n    onDelete: 'NO ACTION',\n    onUpdate: 'NO ACTION'\n  })\n  @JoinColumn({ foreignKeyConstraintName: 'Users_Roles_fk', name: 'roleGuid' })\n  role: Role;\n\n  @Column({ type: 'tinyint', nullable: false, default: '1' })\n  isActive: number;\n\n  @Column({ type: 'varchar', length: 250, nullable: true })\n  password: string;\n\n  @ManyToOne(() => User, (user) => user.userCreated, {\n    nullable: true,\n    onDelete: 'NO ACTION',\n    onUpdate: 'NO ACTION'\n  })\n  @JoinColumn({\n    foreignKeyConstraintName: 'Users_fk_1',\n    name: 'createdBy',\n    referencedColumnName: 'guid'\n  })\n  createdBy?: User;\n\n  @ManyToOne(() => User, (user) => user.userUpdated, {\n    nullable: true,\n    onDelete: 'NO ACTION',\n    onUpdate: 'NO ACTION'\n  })\n  @JoinColumn({\n    foreignKeyConstraintName: 'Users_fk_2',\n    name: 'updatedBy',\n    referencedColumnName: 'guid'\n  })\n  updatedBy?: User;\n\n  @ManyToOne(() => User, (user) => user.userDeleted, {\n    nullable: true,\n    onDelete: 'NO ACTION',\n    onUpdate: 'NO ACTION'\n  })\n  @JoinColumn({\n    foreignKeyConstraintName: 'Users_fk_3',\n    name: 'updatedBy',\n    referencedColumnName: 'guid'\n  })\n  deletedBy?: User;\n\n  @CreateDateColumn({ type: 'timestamp' })\n  createdAt: Date;\n\n  @UpdateDateColumn({ type: 'timestamp' })\n  updatedAt: Date;\n\n  @Column({ type: 'timestamp', nullable: true })\n  deletedAt?: Date;\n\n  @OneToMany(() => User, (user) => user.createdBy)\n  userCreated: User[];\n\n  @OneToMany(() => User, (user) => user.updatedBy)\n  userUpdated: User[];\n\n  @OneToMany(() => User, (user) => user.deletedBy)\n  userDeleted: User[];\n\n  @ManyToMany(() => Category, (category) => category.users)\n  @JoinTable()\n  category: Category[];\n\n  @ManyToMany(() => PaymentMethod, (paymentMethod) => paymentMethod.users)\n  @JoinTable()\n  paymentMethod: PaymentMethod[];\n\n  @ManyToMany(() => Organization, (Organization) => Organization.users)\n  @JoinTable()\n  Organization: PaymentMethod[];\n\n  @Column({ type: 'varchar', length: 350, nullable: true })\n  availability: string;\n\n  @Column({ type: 'varchar', length: 550, nullable: true })\n  description: string;\n\n  @Column({ type: 'varchar', length: 3250, nullable: true })\n  previusWorks: string;\n\n  @Column({ type: 'varchar', length: 3250, nullable: true })\n  certifications: string;\n\n  @Column({ type: 'tinyint', nullable: false, default: '1' })\n  isAvailable: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserAlreadyExistsException.html":{"url":"classes/UserAlreadyExistsException.html","title":"class - UserAlreadyExistsException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserAlreadyExistsException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/users/users.exception.ts:3\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\nexport class UserAlreadyExistsException extends HttpException {\n  constructor() {\n    super('User already exists', HttpStatus.CONFLICT);\n  }\n}\n\nexport class UserNoExistsException extends HttpException {\n  constructor() {\n    super('User does not exist', HttpStatus.NOT_FOUND);\n  }\n}\n\nexport class UsernamePasswordNoExistsException extends HttpException {\n  constructor() {\n    super('Wrong username and/or password', HttpStatus.NOT_FOUND);\n  }\n}\n\n//custom exceptions that recieve a message\nexport class CustomException extends HttpException {\n  constructor(message: string, status: number) {\n    super(message, status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserNoExistsException.html":{"url":"classes/UserNoExistsException.html","title":"class - UserNoExistsException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserNoExistsException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/users/users.exception.ts:9\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\nexport class UserAlreadyExistsException extends HttpException {\n  constructor() {\n    super('User already exists', HttpStatus.CONFLICT);\n  }\n}\n\nexport class UserNoExistsException extends HttpException {\n  constructor() {\n    super('User does not exist', HttpStatus.NOT_FOUND);\n  }\n}\n\nexport class UsernamePasswordNoExistsException extends HttpException {\n  constructor() {\n    super('Wrong username and/or password', HttpStatus.NOT_FOUND);\n  }\n}\n\n//custom exceptions that recieve a message\nexport class CustomException extends HttpException {\n  constructor(message: string, status: number) {\n    super(message, status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsernamePasswordNoExistsException.html":{"url":"classes/UsernamePasswordNoExistsException.html","title":"class - UsernamePasswordNoExistsException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsernamePasswordNoExistsException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/users/users.exception.ts:15\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\nexport class UserAlreadyExistsException extends HttpException {\n  constructor() {\n    super('User already exists', HttpStatus.CONFLICT);\n  }\n}\n\nexport class UserNoExistsException extends HttpException {\n  constructor() {\n    super('User does not exist', HttpStatus.NOT_FOUND);\n  }\n}\n\nexport class UsernamePasswordNoExistsException extends HttpException {\n  constructor() {\n    super('Wrong username and/or password', HttpStatus.NOT_FOUND);\n  }\n}\n\n//custom exceptions that recieve a message\nexport class CustomException extends HttpException {\n  constructor(message: string, status: number) {\n    super(message, status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n            \n                Extends\n            \n            \n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                all\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                allProviders\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOneProvider\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                homeProviders\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                singup\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                whoami\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        all\n                        \n                    \n                \n            \n            \n                \n                        \n                    all(query: SearchUserPaginationDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all users'})@ApiResponse({type: ResposeSuccessPaginationDTO, status: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            SearchUserPaginationDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        allProviders\n                        \n                    \n                \n            \n            \n                \n                        \n                    allProviders(query: SearchUserPaginationDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('providers')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all providers'})@ApiResponse({type: ResposeSuccessPaginationDTO, status: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            SearchUserPaginationDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(files: literal type, body: CreateUserDTO, request: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create User'})@ApiResponse({type: ResposeSuccessDataDTO, status: undefined})@ApiResponse({type: ResposeDTO, status: undefined})@Post()@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:199\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            CreateUserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                request\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(guid: string, request: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':guid')@Auth(RoleEnum.Super)@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete User'})@ApiResponse({type: ResposeSuccessDataDTO, status: undefined})@ApiResponse({type: ResposeDTO, status: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:341\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                request\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(guid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':guid')@Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get one user by guid'})@ApiResponse({type: ResposeSuccessDataDTO, status: undefined})@ApiResponse({type: ResposeDTO, status: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:160\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findOneProvider\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneProvider(guid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('providers/:guid')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get one provider by guid'})@ApiResponse({type: ResposeSuccessDataDTO, status: undefined})@ApiResponse({type: ResposeDTO, status: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:114\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                guid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        homeProviders\n                        \n                    \n                \n            \n            \n                \n                        \n                    homeProviders(query: SearchUserPaginationDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('homeProviders')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get homepage providers'})@ApiResponse({type: ResposeSuccessPaginationDTO, status: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            SearchUserPaginationDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        singup\n                        \n                    \n                \n            \n            \n                \n                        \n                    singup(files: literal type, body: CreateUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')@Public()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'SignUp'})@ApiResponse({type: ResposeSuccessDataDTO, status: undefined})@ApiResponse({type: ResposeDTO, status: undefined})@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:251\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            CreateUserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(files: literal type, guid: string, body: UpdateUserDTO, request: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':guid')@Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update User'})@ApiResponse({type: ResposeSuccessDataDTO, status: undefined})@ApiResponse({type: ResposeDTO, status: undefined})@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:301\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                guid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            UpdateUserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                request\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        whoami\n                        \n                    \n                \n            \n            \n                \n                        \n                    whoami(request: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('whoami')@Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get Who am I'})@ApiResponse({type: ResposeSuccessDataDTO, status: undefined})@ApiResponse({type: ResposeDTO, status: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:136\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Param,\n  Patch,\n  Post,\n  Query,\n  Req,\n  UploadedFiles,\n  UseInterceptors\n} from '@nestjs/common';\nimport { FileFieldsInterceptor } from '@nestjs/platform-express';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { ResposeDTO, ResposeSuccessDataDTO, ResposeSuccessPaginationDTO } from 'src/app/api.dto';\nimport { Auth, DefaultController } from 'src/app/defaults/default.controller';\nimport { RoleEnum } from 'src/roles/role.enum';\nimport { CreateUserDTO, SearchUserPaginationDTO, UpdateUserDTO } from 'src/users/users.dto';\nimport { User } from 'src/users/users.entity';\nimport { Public } from '../roles/decorators/public.decorator';\nimport { UsersService } from './users.service';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController extends DefaultController {\n  @Inject(UsersService)\n  private readonly userService: UsersService;\n\n  constructor() {\n    super(UsersController);\n  }\n\n  @Get()\n  @Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get all users' })\n  @ApiResponse({ type: ResposeSuccessPaginationDTO, status: HttpStatus.OK })\n  async all(@Query() query: SearchUserPaginationDTO): Promise {\n    try {\n      return {\n        status: 'success',\n        data: await this.userService.all({ query: query })\n      };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${UsersController.name}-${error.message ?? error}`\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  @Get('providers')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get all providers' })\n  @ApiResponse({ type: ResposeSuccessPaginationDTO, status: HttpStatus.OK })\n  async allProviders(@Query() query: SearchUserPaginationDTO): Promise {\n    query.isProfessional = 1;\n    try {\n      return {\n        status: 'success',\n        data: await this.userService.all({ query: query })\n      };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${UsersController.name}-${error.message ?? error}`\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  @Get('homeProviders')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get homepage providers' })\n  @ApiResponse({ type: ResposeSuccessPaginationDTO, status: HttpStatus.OK })\n  async homeProviders(@Query() query: SearchUserPaginationDTO): Promise {\n    query.isProfessional = 1;\n    query.pageSize = 8;\n    query.offset = 0;\n    try {\n      return {\n        status: 'success',\n        data: await this.userService.all({ query: query })\n      };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${UsersController.name}-${error.message ?? error}`\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  @Get('providers/:guid')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get one provider by guid' })\n  @ApiResponse({ type: ResposeSuccessDataDTO, status: HttpStatus.OK })\n  @ApiResponse({ type: ResposeDTO, status: HttpStatus.NOT_FOUND })\n  async findOneProvider(@Param('guid') guid: string): Promise {\n    try {\n      const user = await this.userService.getBy({ query: { guid: guid, isProfessional: 1 } });\n      return { status: 'success', data: user };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${UsersController.name}-${error.message ?? error}`\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  @Get('whoami')\n  @Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get Who am I' })\n  @ApiResponse({ type: ResposeSuccessDataDTO, status: HttpStatus.OK })\n  @ApiResponse({ type: ResposeDTO, status: HttpStatus.NOT_FOUND })\n  async whoami(@Req() request: { user: User }): Promise {\n    try {\n      const user = await this.userService.getBy({\n        query: { guid: request.user.guid }\n      });\n      return { status: 'success', data: user };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${UsersController.name}-${error.message ?? error}`\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  @Get(':guid')\n  @Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get one user by guid' })\n  @ApiResponse({ type: ResposeSuccessDataDTO, status: HttpStatus.OK })\n  @ApiResponse({ type: ResposeDTO, status: HttpStatus.NOT_FOUND })\n  async findOne(@Param('guid') guid: string): Promise {\n    try {\n      const user = await this.userService.getBy({ query: { guid: guid } });\n      return { status: 'success', data: user };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${UsersController.name}-${error.message ?? error}`\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  @Post()\n  @Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOperation({ summary: 'Create User' })\n  @ApiResponse({ type: ResposeSuccessDataDTO, status: HttpStatus.CREATED })\n  @ApiResponse({ type: ResposeDTO, status: HttpStatus.CONFLICT })\n  @Post()\n  @UseInterceptors(\n    FileFieldsInterceptor(\n      [\n        { name: 'profileImage', maxCount: 1 },\n        { name: 'documentSideA', maxCount: 1 },\n        { name: 'documentSideB', maxCount: 1 },\n        { name: 'backgroundCheck', maxCount: 1 },\n        { name: 'previusWorks', maxCount: 10 },\n        { name: 'certifications', maxCount: 10 }\n      ],\n\n      {\n        dest: './uploads/temp'\n      }\n    )\n  )\n  async create(\n    @UploadedFiles()\n    files: {\n      profileImage?: Express.Multer.File;\n      documentSideA?: Express.Multer.File;\n      documentSideB?: Express.Multer.File;\n      backgroundCheck?: Express.Multer.File;\n      previusWorks?: Express.Multer.File[];\n      certifications?: Express.Multer.File[];\n    },\n    @Body() body: CreateUserDTO,\n    @Req() request: { user: User }\n  ): Promise {\n    try {\n      const user: User = await this.userService.create(files, {\n        body: body,\n        createdByGUID: request.user.guid\n      });\n      return { status: 'success', data: user };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${UsersController.name}-${error.message ?? error}`\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  @Post('signup')\n  @Public()\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOperation({ summary: 'SignUp' })\n  @ApiResponse({ type: ResposeSuccessDataDTO, status: HttpStatus.CREATED })\n  @ApiResponse({ type: ResposeDTO, status: HttpStatus.CONFLICT })\n  @UseInterceptors(\n    FileFieldsInterceptor(\n      [\n        { name: 'profileImage', maxCount: 1 },\n        { name: 'documentSideA', maxCount: 1 },\n        { name: 'documentSideB', maxCount: 1 },\n        { name: 'backgroundCheck', maxCount: 1 },\n        { name: 'previusWorks', maxCount: 10 },\n        { name: 'certifications', maxCount: 10 }\n      ],\n      {\n        dest: './uploads/temp'\n      }\n    )\n  )\n  async singup(\n    @UploadedFiles()\n    files: {\n      profileImage?: Express.Multer.File;\n      documentSideA?: Express.Multer.File;\n      documentSideB?: Express.Multer.File;\n      backgroundCheck?: Express.Multer.File;\n      previusWorks?: Express.Multer.File[];\n      certifications?: Express.Multer.File[];\n    },\n    @Body() body: CreateUserDTO\n  ): Promise {\n    try {\n      const user: User = await this.userService.create(files, {\n        body: body\n      });\n      return { status: 'success', data: user };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${UsersController.name}-${error.message ?? error}`\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  @Patch(':guid')\n  @Auth(RoleEnum.Super, RoleEnum.ServiceProvier, RoleEnum.Client, RoleEnum.Moderator)\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Update User' })\n  @ApiResponse({ type: ResposeSuccessDataDTO, status: HttpStatus.OK })\n  @ApiResponse({ type: ResposeDTO, status: HttpStatus.NOT_FOUND })\n  @UseInterceptors(\n    FileFieldsInterceptor(\n      [\n        { name: 'profileImage', maxCount: 1 },\n        { name: 'documentSideA', maxCount: 1 },\n        { name: 'documentSideB', maxCount: 1 },\n        { name: 'backgroundCheck', maxCount: 1 },\n        { name: 'previusWorks', maxCount: 10 },\n        { name: 'certifications', maxCount: 10 }\n      ],\n      {\n        dest: './uploads/temp'\n      }\n    )\n  )\n  async update(\n    @UploadedFiles()\n    files: {\n      profileImage?: Express.Multer.File;\n      documentSideA?: Express.Multer.File;\n      documentSideB?: Express.Multer.File;\n      backgroundCheck?: Express.Multer.File;\n      previusWorks?: Express.Multer.File[];\n      certifications?: Express.Multer.File[];\n    },\n\n    @Param('guid') guid: string,\n    @Body() body: UpdateUserDTO,\n    @Req() request: { user: User }\n  ): Promise {\n    try {\n      const updatedUser = await this.userService.update(files, {\n        guid: guid,\n        body: body,\n        updatedByGUID: request.user.guid\n      });\n      return { status: 'success', data: updatedUser };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${UsersController.name}-${error.message ?? error}`\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  @Delete(':guid')\n  @Auth(RoleEnum.Super)\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Delete User' })\n  @ApiResponse({ type: ResposeSuccessDataDTO, status: HttpStatus.OK })\n  @ApiResponse({ type: ResposeDTO, status: HttpStatus.NOT_FOUND })\n  async delete(@Param('guid') guid: string, @Req() request: { user: User }): Promise {\n    try {\n      const service = await this.userService.delete({\n        guid: guid,\n        updatedByGUID: request.user.guid\n      });\n      return { status: 'success', data: service };\n    } catch (error) {\n      this.logger.error(error.message ?? error);\n      throw new HttpException(\n        {\n          status: 'error',\n          message: `${UsersController.name}-${error.message ?? error}`\n        },\n        error.status ?? HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Role } from 'src/roles/roles.entity';\nimport { User } from 'src/users/users.entity';\nimport { Category } from 'src/categories/entities/category.entity';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\nimport { PaymentMethod } from 'src/paymentMethod/entities/paymentMethod.entity';\n\n@Module({\n  imports: [ConfigModule, TypeOrmModule.forFeature([User, Role, Category, PaymentMethod])],\n  providers: [UsersService],\n  controllers: [UsersController],\n  exports: [UsersService]\n})\nexport class UsersModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            DefaultService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                    Readonly\n                                categoryRepository\n                            \n                            \n                                    \n                                    Private\n                                    Readonly\n                                paymentMethodRepository\n                            \n                            \n                                    \n                                    Private\n                                    Readonly\n                                userRepository\n                            \n                            \n                                    \n                                    Private\n                                    Readonly\n                                userRoleRepository\n                            \n                            \n                                    Public\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                _hashPassword\n                            \n                            \n                                    Async\n                                all\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getBy\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:24\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        _hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    _hashPassword(password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        all\n                        \n                    \n                \n            \n            \n                \n                        \n                    all(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(files: literal type, params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:242\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:454\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getBy\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBy(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(files: literal type, params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:331\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                            Readonly\n                        categoryRepository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(Category)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                            Readonly\n                        paymentMethodRepository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(PaymentMethod)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                            Readonly\n                        userRepository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(User)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                            Readonly\n                        userRoleRepository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(Role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                        \n                            \n                                Inherited from         DefaultService\n\n                            \n                        \n                    \n                        \n                                Defined in         DefaultService:4\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport * as bcrypt from 'bcrypt';\nimport { ResposeResultsPaginationDTO } from 'src/app/api.dto';\nimport { DefaultService } from 'src/app/defaults/defatul.service';\nimport { RoleEnum } from 'src/roles/role.enum';\nimport { Role } from 'src/roles/roles.entity';\nimport { CreateUserDTO, SearchUserDTO, SearchUserPaginationDTO, UpdateUserDTO } from 'src/users/users.dto';\nimport { User } from 'src/users/users.entity';\nimport { UserAlreadyExistsException, UserNoExistsException } from 'src/users/users.exception';\nimport { Category } from 'src/categories/entities/category.entity';\nimport { PaymentMethod } from 'src/paymentMethod/entities/paymentMethod.entity';\nimport { In, IsNull, Like, Repository } from 'typeorm';\nimport { saveFiles } from '../app/utils/filePersistor';\n@Injectable()\nexport class UsersService extends DefaultService {\n  @InjectRepository(User)\n  private readonly userRepository: Repository;\n  @InjectRepository(Role)\n  private readonly userRoleRepository: Repository;\n  @InjectRepository(Category)\n  private readonly categoryRepository: Repository;\n  @InjectRepository(PaymentMethod)\n  private readonly paymentMethodRepository: Repository;\n\n  constructor() {\n    super(UsersService);\n  }\n\n  private async _hashPassword(password: string): Promise {\n    const salt = await bcrypt.genSalt(8);\n    return await bcrypt.hash(password, salt);\n  }\n\n  async getBy(params: { query: SearchUserDTO; withPassword?: boolean }): Promise {\n    try {\n      const user = await this.userRepository.findOne({\n        select: {\n          guid: true,\n          name: true,\n          lastname: true,\n          document: true,\n          email: true,\n          profileImage: true,\n          username: true,\n          documentSideA: true,\n          documentSideB: true,\n          backgroundCheck: true,\n          backgroundCheckDate: true,\n          backgroundCheckExpirationDate: true,\n          birthdate: true,\n          address: true,\n          phone: true,\n          mapAdress: true,\n          isActive: true,\n          googleID: true,\n          createdAt: true,\n          updatedAt: true,\n          availability: true,\n          isAvailable: true,\n          certifications: true,\n          previusWorks: true,\n          description: true,\n          category: {\n            guid: true,\n            name: true,\n            description: true\n          },\n\n\n          paymentMethod: {\n            guid: true,\n            name: true\n          },\n          password: params.withPassword || false,\n          createdBy: {\n            guid: true,\n            name: true,\n            lastname: true,\n            email: true,\n            username: true,\n            createdAt: true,\n            updatedAt: true,\n            password: false\n          }\n        },\n        relations: ['role', 'createdBy', 'updatedBy', 'deletedBy', 'category', 'paymentMethod'],\n        where: {\n          guid: params.query.guid || undefined,\n          username: params.query.username || undefined,\n          googleID: params.query.googleID || undefined,\n          email: params.query.email || undefined,\n          document: params.query.document || undefined,\n          isActive: params.query.isActive || undefined,\n          deletedAt: IsNull()\n        }\n      });\n\n      if (!user) throw new UserNoExistsException();\n      user.availability = JSON.parse(user.availability);\n      user.certifications = JSON.parse(user.certifications);\n      user.previusWorks = JSON.parse(user.previusWorks);\n      return user;\n    } catch (error) {\n      throw new Error(`${UsersService.name}[getBy]:${error.message}`);\n    }\n  }\n\n  async all(params: { query: SearchUserPaginationDTO }): Promise {\n    const emptyResponse = {\n      total: 0,\n      pageSize: 0,\n      offset: params.query.offset,\n      results: []\n    };\n    try {\n      if (Object.keys(params.query).length === 0) {\n        return emptyResponse;\n      }\n      if (params.query.pageSize?.toString() === '0') {\n        return emptyResponse;\n      }\n\n      const order = {};\n      if (params.query.orderBy && params.query.orderType) {\n        order[params.query.orderBy] = params.query.orderType;\n      }\n\n      let categoriesIDs: Category[] = [];\n      if (params.query.categoryID) {\n        categoriesIDs = await Promise.all(\n          params.query.categoryID\n            .trim()\n            .substring(1, params.query.categoryID.length - 1)\n            .split(',')\n            .map((jobType) => jobType.trim())\n            .map(async (categoryId) => {\n              const category = await this.categoryRepository.findOneBy({\n                guid: categoryId\n              });\n              if (!category) {\n                throw new Error('Category not found');\n              }\n              return category;\n            })\n        );\n      }\n\n      const forPage: number = parseInt(params.query.pageSize);\n      const skip: number = parseInt(params.query.offset);\n      const [user, total] = await this.userRepository.findAndCount({\n        select: {\n          guid: true,\n          name: true,\n          lastname: true,\n          email: true,\n          document: true,\n          profileImage: true,\n          documentSideA: true,\n          documentSideB: true,\n          backgroundCheck: true,\n          backgroundCheckDate: true,\n          backgroundCheckExpirationDate: true,\n          username: true,\n          birthdate: true,\n          address: true,\n          phone: true,\n          mapAdress: true,\n          availability: true,\n          isActive: true,\n          googleID: true,\n          createdAt: true,\n          updatedAt: true,\n          paymentMethod: true,\n          isAvailable: true,\n          certifications: true,\n          previusWorks: true,\n          description: true,\n          category: {\n            guid: true,\n            name: true,\n            description: true\n          },\n          role: {\n            guid: true,\n            role: true,\n            description: true\n          },\n          createdBy: {\n            guid: true,\n            name: true,\n            lastname: true,\n            email: true,\n            username: true,\n            createdAt: true,\n            updatedAt: true,\n            password: false\n          }\n        },\n        relations: ['role', 'createdBy', 'updatedBy', 'deletedBy', 'category', 'paymentMethod'],\n        where: {\n          deletedAt: IsNull(),\n          name: params.query.name ? Like(`%${params.query.name}%`) : undefined,\n          lastname: params.query.lastname ? Like(`%${params.query.lastname}%`) : undefined,\n          email: params.query.email ? Like(`%${params.query.email}%`) : undefined,\n          document: params.query.document ? Like(`%${params.query.document}%`) : undefined,\n          username: params.query.username ? Like(`%${params.query.username}%`) : undefined,\n          isActive: params.query.isActive || undefined,\n          mapAdress: params.query.mapAdress || undefined,\n          phone: params.query.phone || undefined,\n          role: {\n            guid: params.query.roleGuid || undefined\n          },\n          category: {\n            guid: categoriesIDs.length > 0 ? In(categoriesIDs.map((category) => category.guid)) : undefined,\n            name: params.query.category ? Like(`%${params.query.category}%`) : undefined\n          },\n          paymentMethod: {\n            guid: params.query.paymentMethod || undefined\n          }\n        },\n        order,\n        take: forPage,\n        skip: skip\n      });\n      user.forEach((user) => {\n        user.availability = JSON.parse(user.availability);\n        user.certifications = JSON.parse(user.certifications);\n        user.previusWorks = JSON.parse(user.previusWorks);\n      });\n      return {\n        total: total,\n        pageSize: forPage,\n        offset: parseInt(params.query.offset),\n        results: user\n      };\n    } catch (error) {\n      throw new Error(`${UsersService.name}[all]:${error.message}`);\n    }\n  }\n\n  async create(\n    files: {\n      profileImage?: Express.Multer.File;\n      documentSideA?: Express.Multer.File;\n      documentSideB?: Express.Multer.File;\n      backgroundCheck?: Express.Multer.File;\n      previusWorks?: Express.Multer.File[];\n      certifications?: Express.Multer.File[];\n    },\n    params: {\n      body: CreateUserDTO;\n      createdByGUID?: string;\n    }\n  ): Promise {\n    try {\n      saveFiles(files);\n      let user = await this.userRepository.findOneBy({\n        username: params.body.username\n      });\n      if (user) {\n        throw new UserAlreadyExistsException();\n      }\n      const hashedPassword: string = await this._hashPassword(params.body.password);\n\n      let categories: Category[] = [];\n      if (params.body.category) {\n        categories = await Promise.all(\n          params.body.category\n            .trim()\n            .substring(1, params.body.category.length - 1)\n            .split(',')\n            .map((jobType) => jobType.trim())\n            .map(async (categoryId) => {\n              const category = await this.categoryRepository.findOneBy({\n                guid: categoryId\n              });\n              if (!category) {\n                throw new Error('Category not found');\n              }\n              return category;\n            })\n        );\n      }\n\n\n      if (!params.body.roleGuid) {\n        params.body.roleGuid = 'R02';\n      }\n      user = await this.userRepository.save({\n        name: params.body.name,\n        lastname: params.body.lastname,\n        email: params.body.email,\n        document: params.body.document || null,\n        password: hashedPassword,\n        googleID: params.body.googleID || null,\n        username: params.body.username,\n        birthdate: params.body.birthdate || null,\n        address: params.body.address || null,\n        mapAdress: params.body.mapAdress || null,\n        phone: params.body.phone || null,\n        profileImage: files?.profileImage?.[0]?.filename || '',\n        documentSideA: files?.documentSideA?.[0]?.filename || '',\n        documentSideB: files?.documentSideB?.[0]?.filename || '',\n        backgroundCheck: files?.backgroundCheck?.[0]?.filename || '',\n        backgroundCheckDate: params.body.backgroundCheckDate || null,\n        backgroundCheckExpirationDate: params.body.backgroundCheckExpirationDate || null,\n        certifications: JSON.stringify(files?.certifications?.map((certification) => certification.filename)) || null,\n        previusWorks: JSON.stringify(files?.previusWorks?.map((previusWork) => previusWork.filename)) || null,\n        description: params.body.description || null,\n        isAvailable: params.body.isAvailable || 0,\n        availability: JSON.stringify(params.body.availability) || null,\n        paymentMethods: params.body.paymentMethods || null,\n        category: categories || [],\n        role: await this.userRoleRepository.findOneBy({\n          guid: params.body.roleGuid\n        }),\n        isActive: params.body.isActive || 1,\n        isProfessional: 0\n      });\n      user.createdBy = (await this.userRepository.findOneBy({ guid: params.createdByGUID })) || user;\n      delete user.createdBy;\n      user.certifications = JSON.parse(user.certifications);\n      user.previusWorks = JSON.parse(user.previusWorks);\n      return user;\n    } catch (error) {\n      throw new Error(`${UsersService.name}[create]:${error.message}`);\n    }\n  }\n\n  async update(\n    files: {\n      profileImage?: Express.Multer.File;\n      documentSideA?: Express.Multer.File;\n      documentSideB?: Express.Multer.File;\n      backgroundCheck?: Express.Multer.File;\n      previusWorks?: Express.Multer.File[];\n      certifications?: Express.Multer.File[];\n    },\n    params: {\n      guid: string;\n      body: UpdateUserDTO;\n      updatedByGUID: string;\n    }\n  ): Promise {\n    try {\n      saveFiles(files);\n      const user = await this.userRepository.findOne({\n        select: {\n          paymentMethod: {\n            guid: true,\n            name: true\n          }\n        },\n        where: { guid: params.guid, deletedAt: IsNull() },\n        relations: ['role', 'createdBy', 'updatedBy', 'deletedBy', 'category', 'paymentMethod']\n      });\n      if (!user) {\n        throw new UserNoExistsException();\n      }\n\n      if (files?.documentSideA && files?.documentSideB && !params.body.isProfessional) {\n        params.body.roleGuid = RoleEnum.ServiceProvier;\n      }\n\n      let categories: Category[] = [];\n      if (params.body.category) {\n        categories = await Promise.all(\n          params.body.category\n            .trim()\n            .substring(1, params.body.category.length - 1)\n            .split(',')\n            .map((jobType) => jobType.trim())\n            .map(async (categoryId) => {\n              const category = await this.categoryRepository.findOneBy({\n                guid: categoryId\n              });\n              if (!category) {\n                throw new Error('Category not found');\n              }\n              return category;\n            })\n        );\n      } else {\n        categories = user.category;\n      }\n\n      let paymentMethods: PaymentMethod[] = [];\n      if (params.body.paymentMethods) {\n        paymentMethods = await Promise.all(\n          params.body.paymentMethods\n            .trim()\n            .substring(1, params.body.paymentMethods.length - 1)\n            .split(',')\n            .map((paymentMethod) => paymentMethod.trim())\n            .map(async (paymentMethodId) => {\n              const paymentMethod = await this.paymentMethodRepository.findOneBy({\n                guid: paymentMethodId\n              });\n              if (!paymentMethod) {\n                throw new Error('Payment Method not found');\n              }\n              return paymentMethod;\n            })\n        );\n      } else {\n        paymentMethods = user.paymentMethod;\n        console.log('payment from service', user.paymentMethod);\n      }\n\n      user.name = params.body.name || user.name;\n      user.email = params.body.email || user.email;\n      user.address = params.body.address || user.address;\n      user.phone = params.body.phone || user.phone;\n      user.googleID = params.body.googleID || user.googleID;\n      user.birthdate = params.body.birthdate || user.birthdate;\n      user.profileImage = files?.profileImage?.[0]?.filename || user.profileImage;\n      user.documentSideA = files?.documentSideA?.[0]?.filename || user.documentSideA;\n      user.documentSideB = files?.documentSideB?.[0]?.filename || user.documentSideB;\n      user.backgroundCheck = files?.backgroundCheck?.[0]?.filename || user.backgroundCheck;\n      user.backgroundCheckExpirationDate = params.body.backgroundCheckExpirationDate || user.backgroundCheckExpirationDate;\n      user.backgroundCheckDate = params.body.backgroundCheckDate || user.backgroundCheckDate;\n      user.lastname = params.body.lastname || user.lastname;\n      user.username = params.body.username || user.username;\n      user.document = params.body.document || user.document;\n      user.mapAdress = params.body.mapAdress || user.mapAdress;\n      user.category = categories || user.category;\n      user.backgroundCheckDate = params.body.backgroundCheckDate || user.backgroundCheckDate;\n      user.password = params.body.password ? await this._hashPassword(params.body.password) : user.password;\n      user.isActive = params.body.isActive !== undefined ? params.body.isActive : user.isActive;\n      user.isAvailable = params.body.isAvailable !== undefined ? params.body.isAvailable : user.isAvailable;\n      user.availability = JSON.stringify(params.body.availability) || user.availability;\n      user.paymentMethod = paymentMethods || user.paymentMethod;\n      user.certifications = JSON.stringify(files?.certifications?.map((certification) => certification.filename)) || user.certifications;\n      user.previusWorks = JSON.stringify(files?.previusWorks?.map((previusWork) => previusWork.filename)) || user.previusWorks;\n      user.description = params.body.description || user.description;\n      if (params.body.roleGuid !== undefined) {\n        user.role = await this.userRoleRepository.findOneBy({\n          guid: params.body.roleGuid\n        });\n      }\n\n      let newUser = await this.userRepository.save(user);\n      newUser.availability = JSON.parse(newUser.availability);\n      newUser.certifications = newUser.certifications ? JSON.parse(newUser.certifications) : [];\n      newUser.previusWorks = newUser.previusWorks ? JSON.parse(newUser.previusWorks) : [];\n\n      return newUser;\n    } catch (error) {\n      throw new Error(`${UsersService.name}[update]:${error.message}`);\n    }\n  }\n\n  async delete(params: { guid: string; updatedByGUID: string }): Promise {\n    try {\n      const userToDelete = await this.userRepository.findOne({\n        where: { guid: params.guid, deletedAt: IsNull() }\n      });\n      if (!userToDelete) {\n        throw new UserNoExistsException();\n      }\n\n      const user = await this.userRepository.findOne({\n        where: { guid: params.updatedByGUID }\n      });\n      if (!user) {\n        throw new Error('UserNoExists');\n      }\n\n      userToDelete.deletedAt = new Date();\n      userToDelete.updatedBy = user;\n      userToDelete.isActive = 0;\n      return await this.userRepository.save(userToDelete);\n    } catch (error) {\n      throw new Error(`${UsersService.name}[delete]:${error.message}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UtilsModule.html":{"url":"modules/UtilsModule.html","title":"module - UtilsModule","body":"\n                   \n\n\n\n\n    Modules\n    UtilsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UtilsModule\n\n\n\ncluster_UtilsModule_exports\n\n\n\ncluster_UtilsModule_providers\n\n\n\n\nUtilsService \n\nUtilsService \n\n\n\nUtilsModule\n\nUtilsModule\n\nUtilsService  -->\n\nUtilsModule->UtilsService \n\n\n\n\n\nUtilsService\n\nUtilsService\n\nUtilsModule -->\n\nUtilsService->UtilsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/utils/utils.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UtilsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UtilsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UtilsService } from './utils.service';\n\n@Module({\n  providers: [UtilsService],\n  exports: [UtilsService],\n})\nexport class UtilsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UtilsService.html":{"url":"injectables/UtilsService.html","title":"injectable - UtilsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UtilsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/utils/utils.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Private\n                                    Readonly\n                                config\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                basePath\n                            \n                            \n                                clearUrlPath\n                            \n                            \n                                getTimezone\n                            \n                            \n                                getYYYYMMDDDateFormat\n                            \n                            \n                                isValidDate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        basePath\n                        \n                    \n                \n            \n            \n                \nbasePath()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/utils/utils.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearUrlPath\n                        \n                    \n                \n            \n            \n                \nclearUrlPath(url: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/utils/utils.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTimezone\n                        \n                    \n                \n            \n            \n                \ngetTimezone()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/utils/utils.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getYYYYMMDDDateFormat\n                        \n                    \n                \n            \n            \n                \ngetYYYYMMDDDateFormat(date: Date, includeTime)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/utils/utils.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                includeTime\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isValidDate\n                        \n                    \n                \n            \n            \n                \nisValidDate(dateString: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/utils/utils.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dateString\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Private\n                            Readonly\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ConfigService\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(ConfigService)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/utils/utils.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as moment from 'moment';\n\n@Injectable()\nexport class UtilsService {\n  @Inject(ConfigService)\n  private readonly config: ConfigService;\n\n  getTimezone(): string {\n    const d = new Date().toString();\n    return (\n      d\n        .substring(d.search('GMT'), d.length)\n        .split(' ')[0]\n        .split('GMT')[1]\n        .substring(0, 3) +\n      ':' +\n      d\n        .substring(d.search('GMT'), d.length)\n        .split(' ')[0]\n        .split('GMT')[1]\n        .substring(3)\n    );\n  }\n\n  getYYYYMMDDDateFormat(date: Date, includeTime = true): string {\n    try {\n      const day = date.getDate().toString().padStart(2, '0');\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\n\n      return `${date.getFullYear()}-${month}-${day}${\n        includeTime\n          ? ` ${date.getUTCHours()}:${date.getMinutes()}:${date.getSeconds()}`\n          : ''\n      }`;\n    } catch (error) {\n      throw new Error(\n        `${UtilsService.name}(getYYYYMMDDDateFormat): ${error.message}`,\n      );\n    }\n  }\n\n  isValidDate(dateString: string): boolean {\n    const date = moment(dateString, 'YYYY-MM-DD', true);\n    return date.isValid();\n  }\n\n  clearUrlPath(url: string): string {\n    return url.charAt(url.length - 1) === '/'\n      ? url.substring(0, url.length - 1)\n      : url;\n  }\n\n  basePath(): string {\n    const envBasePath = this.config.get('BASEPATH');\n    return envBasePath && envBasePath.length > 1\n      ? envBasePath.charAt(envBasePath.length - 1) === '/'\n        ? envBasePath.substring(0, envBasePath.length - 1)\n        : envBasePath\n      : '';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                config/typeorm.datasource.ts\n            \n            variable\n            AppDataSource\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                config/typeorm.datasource.ts\n            \n            variable\n            configService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                config/typeorm.service.ts\n            \n            injectable\n            TypeOrmConfigService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                migrations/1717483943918-CREATE-DB.ts\n            \n            class\n            Migrations1717483943918\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1719099417082-CREATE-ORGANIZATION.ts\n            \n            class\n            Migrations1719099417082\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/api.controller.ts\n            \n            controller\n            ApiController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/api.dto.ts\n            \n            class\n            ArrayGuidDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/api.dto.ts\n            \n            class\n            PaginationDTO\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/api.dto.ts\n            \n            class\n            ResposeDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/api.dto.ts\n            \n            class\n            ResposeResultsPaginationDTO\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/api.dto.ts\n            \n            class\n            ResposeSuccessDataDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/api.dto.ts\n            \n            class\n            ResposeSuccessPaginationDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/api.interface.ts\n            \n            interface\n            JWTPayloadInterface\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/api.service.ts\n            \n            injectable\n            ApiService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/defaults/defatul.service.ts\n            \n            class\n            DefaultService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/defaults/default.controller.ts\n            \n            class\n            DefaultController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/defaults/default.controller.ts\n            \n            variable\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/defaults/default.without-security.controller.ts\n            \n            class\n            DefaultWithoutSecurityController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/utils/filePersistor.ts\n            \n            variable\n            deleteFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/utils/filePersistor.ts\n            \n            variable\n            getPaths\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/utils/filePersistor.ts\n            \n            variable\n            saveFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/utils/filePersistor.ts\n            \n            variable\n            saveFiles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/utils/sqlParser.ts\n            \n            class\n            SqlReader\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/utils/utils.service.ts\n            \n            injectable\n            UtilsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/guard/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/guard/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategie/api-key.strategy.ts\n            \n            injectable\n            ApiKeyStrategy\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/strategie/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/categories/categories.controller.ts\n            \n            controller\n            CategoriesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/categories/categories.service.ts\n            \n            injectable\n            CategoriesService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/categories/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/categories/dto/search-category.dto.ts\n            \n            class\n            SearchCategoryDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/categories/dto/search-pagination-category.dto.ts\n            \n            class\n            SearchCategoryPaginationDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/categories/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/categories/entities/category.entity.ts\n            \n            entity\n            Category\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            LOGGER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/notification/dto/add-message.dto.ts\n            \n            class\n            AddMessageDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/notification/dto/create-notification.dto.ts\n            \n            class\n            CreateNotificationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/notification/dto/search-notification.dto.ts\n            \n            class\n            SearchNotificationDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/notification/dto/search-pagination-notification.dto.ts\n            \n            class\n            SearchNotificationPaginationDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/notification/dto/sendNotificationsToUser.dto.ts\n            \n            class\n            SendNotificationsToUserDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/notification/dto/update-notification.dto.ts\n            \n            class\n            UpdateNotificationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/notification/entities/notification.entity.ts\n            \n            entity\n            Notification\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/notification/entities/notificationType.entity.ts\n            \n            entity\n            NotificationType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/notification/notification.controller.ts\n            \n            controller\n            NotificationController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/notification/notification.exeptions.ts\n            \n            class\n            CustomException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/notification/notification.exeptions.ts\n            \n            class\n            NotificationAlreadyExistsException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/notification/notification.exeptions.ts\n            \n            class\n            NotificationNoExistsException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/notification/notification.gateway.ts\n            \n            class\n            NotificationGateway\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/notification/notification.service.ts\n            \n            injectable\n            NotificationService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/organization/dto/create-organization.dto.ts\n            \n            class\n            CreateOrganizationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/organization/dto/search-organization.dto.ts\n            \n            class\n            SearchOrganizationDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/organization/dto/search-pagination-organization.dto.ts\n            \n            class\n            SearchOrganizationPaginationDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/organization/dto/update-organization.dto.ts\n            \n            class\n            UpdateOrganizationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/organization/entities/organization.entity.ts\n            \n            entity\n            Organization\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/organization/organization.controller.ts\n            \n            controller\n            OrganizationController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/organization/organization.exeptions.ts\n            \n            class\n            CustomException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/organization/organization.exeptions.ts\n            \n            class\n            OrganizationAlreadyExistsException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/organization/organization.exeptions.ts\n            \n            class\n            OrganizationNoExistsException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/organization/organization.service.ts\n            \n            injectable\n            OrganizationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/paymentMethod/dto/create-paymentMethod.dto.ts\n            \n            class\n            CreatePaymentMethodDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/paymentMethod/dto/search-pagination-paymentMethod.dto.ts\n            \n            class\n            SearchPaymentMethodPaginationDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/paymentMethod/dto/search-paymentMethod.dto.ts\n            \n            class\n            SearchPaymentMethodDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/paymentMethod/dto/update-paymentMethod.dto.ts\n            \n            class\n            UpdatePaymentMethodDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/paymentMethod/entities/paymentMethod.entity.ts\n            \n            entity\n            PaymentMethod\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/paymentMethod/paymentMethod.controller.ts\n            \n            controller\n            PaymentMethodController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/paymentMethod/paymentMethod.exeptions.ts\n            \n            class\n            CustomException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/paymentMethod/paymentMethod.exeptions.ts\n            \n            class\n            PaymentMethodAlreadyExistsException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/paymentMethod/paymentMethod.exeptions.ts\n            \n            class\n            PaymentMethodNoExistsException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/paymentMethod/paymentMethod.service.ts\n            \n            injectable\n            PaymentMethodService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/roles/decorators/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/roles.entity.ts\n            \n            entity\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/users/users.dto.ts\n            \n            class\n            CreateUserDTO\n            \n                0 %\n                (0/26)\n            \n        \n        \n            \n                \n                src/users/users.dto.ts\n            \n            class\n            googleOAuthDTO\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.dto.ts\n            \n            class\n            LoginDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/users.dto.ts\n            \n            class\n            SearchUserDTO\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/users/users.dto.ts\n            \n            class\n            SearchUserPaginationDTO\n            \n                0 %\n                (0/21)\n            \n        \n        \n            \n                \n                src/users/users.dto.ts\n            \n            class\n            UpdateUserDTO\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/38)\n            \n        \n        \n            \n                \n                src/users/users.exception.ts\n            \n            class\n            CustomException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/users.exception.ts\n            \n            class\n            UserAlreadyExistsException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/users.exception.ts\n            \n            class\n            UsernamePasswordNoExistsException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/users.exception.ts\n            \n            class\n            UserNoExistsException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/13)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : 10.0.0\n        \n            @nestjs/config : 3.0.0\n        \n            @nestjs/core : 10.0.0\n        \n            @nestjs/jwt : ^10.1.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/microservices : ^10.3.8\n        \n            @nestjs/passport : ^10.0.0\n        \n            @nestjs/platform-express : ^10.3.8\n        \n            @nestjs/serve-static : ^4.0.1\n        \n            @nestjs/swagger : 7.1.8\n        \n            @nestjs/typeorm : 10.0.1\n        \n            @nestjs/websockets : ^10.3.8\n        \n            @types/multer : ^1.4.11\n        \n            bcrypt : ^5.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            helmet : 7.0.0\n        \n            moment : ^2.29.4\n        \n            multer : ^1.4.5-lts.1\n        \n            mysql2 : ^3.9.7\n        \n            passport : ^0.7.0\n        \n            passport-headerapikey : ^1.2.2\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            path : ^0.12.7\n        \n            reflect-metadata : 0.1.13\n        \n            rxjs : 7.8.1\n        \n            swagger-themes : ^1.4.2\n        \n            typeorm : 0.3.20\n        \n            uuid : ^9.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            RoleEnum   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/roles/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        RoleEnum\n                    \n                \n                        \n                            \n                                 Super\n                            \n                        \n                        \n                            \n                                Value : R01\n                            \n                        \n                        \n                            \n                                 Client\n                            \n                        \n                        \n                            \n                                Value : R02\n                            \n                        \n                        \n                            \n                                 ServiceProvier\n                            \n                        \n                        \n                            \n                                Value : R03\n                            \n                        \n                        \n                            \n                                 Moderator\n                            \n                        \n                        \n                            \n                                Value : R04\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/googleOAuthDTO.html":{"url":"classes/googleOAuthDTO.html","title":"class - googleOAuthDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  googleOAuthDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                googleID\n                            \n                            \n                                    \n                                    \n                                    \n                                lastname\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        googleID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: true})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsEmail, IsEnum, IsNotEmpty, IsOptional, IsString, MaxLength, MinLength } from 'class-validator';\nimport { RoleEnum } from 'src/roles/role.enum';\n\nexport class LoginDTO {\n  @ApiProperty({ required: true })\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsString()\n  username: string;\n\n  @ApiProperty({ required: true })\n  @MinLength(3)\n  @MaxLength(70)\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\nexport class googleOAuthDTO {\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  googleID: string;\n\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  email: string;\n\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @ApiProperty({ required: true })\n  @IsNotEmpty()\n  @IsString()\n  lastname: string;\n}\n\nexport class CreateUserDTO {\n  @ApiProperty({ required: true })\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsString()\n  username: string;\n\n  @ApiProperty({ required: true })\n  @MaxLength(10)\n  @MinLength(7)\n  @IsNotEmpty()\n  @IsString()\n  document: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsString()\n  @IsOptional()\n  phone: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsString()\n  @IsOptional()\n  birthdate: Date;\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  @MaxLength(250)\n  profileImage: string;\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  @MaxLength(250)\n  documentSideA: string;\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  @MaxLength(250)\n  documentSideB: string;\n\n  @ApiProperty({ required: false })\n  @IsString()\n  @IsOptional()\n  @MaxLength(250)\n  backgroundCheck: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsString()\n  @IsOptional()\n  backgroundCheckDate: Date;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsString()\n  @IsOptional()\n  backgroundCheckExpirationDate: Date;\n\n  @ApiProperty({ required: false })\n  @MaxLength(150)\n  @IsString()\n  @IsOptional()\n  mapAdress: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsOptional()\n  @IsString()\n  address: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsOptional()\n  @IsString()\n  @IsEmail()\n  email?: string;\n\n  @ApiProperty({ required: false })\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsOptional()\n  @IsString()\n  googleID?: string;\n\n  @ApiProperty({ required: true })\n  @MinLength(3)\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @ApiProperty({ required: false })\n  @MinLength(3)\n  @MaxLength(50)\n  @IsNotEmpty()\n  @IsOptional()\n  @IsString()\n  lastname?: string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  isActive?: number;\n\n  @ApiProperty({ type: 'number' })\n  @IsOptional()\n  isProfessional?: number;\n\n  @ApiProperty({ required: false })\n  @MinLength(3)\n  @MaxLength(70)\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n\n  @ApiProperty({ required: false, enum: RoleEnum, type: 'string' })\n  @IsOptional()\n  @IsNotEmpty()\n  @IsEnum(RoleEnum, { each: true })\n  roleGuid: RoleEnum | string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  @IsString()\n  category?: string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  availability?: {};\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  isAvailable?: number;\n\n  @ApiProperty({ required: false })\n  @IsOptional()\n  @IsString()\n  paymentMethods?: string;\n}\n\nexport class UpdateUserDTO extends PartialType(CreateUserDTO) { }\n\nexport class SearchUserDTO {\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  guid?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  username?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  document?: string;\n\n  @ApiProperty({ type: 'number' })\n  @IsOptional()\n  isProfessional?: number;\n\n  @ApiProperty({ type: 'number', required: false })\n  @IsOptional()\n  isActive?: number;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  password?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  googleID?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  email?: string;\n\n  @ApiProperty({ type: 'string' })\n  @IsOptional()\n  @IsString()\n  category?: string;\n}\n\nexport class SearchUserPaginationDTO {\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  guid?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  paymentMethod?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  phone?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  lastname?: string;\n\n  @ApiProperty({ type: 'number', required: false })\n  @IsOptional()\n  isProfessional?: number;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  email?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  mapAdress?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  username?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  document?: string;\n\n  @ApiProperty({ type: 'number', required: false })\n  @IsOptional()\n  isActive?: number;\n\n  @ApiProperty({ required: false, enum: RoleEnum, type: 'string' })\n  @IsOptional()\n  @IsEnum(RoleEnum, { each: true })\n  roleGuid: RoleEnum | string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  createdByGuid?: string;\n\n  @ApiProperty({ type: 'string', required: false })\n  @IsOptional()\n  @IsString()\n  updatedByGuid?: string;\n\n  @ApiProperty({ required: true, default: 0 })\n  @IsOptional()\n  offset?: any;\n\n  @ApiProperty({ required: true, default: 10 })\n  @IsOptional()\n  pageSize?: any;\n\n  @ApiProperty({ required: false, type: 'string', default: 'name' })\n  @IsOptional()\n  @IsString()\n  orderBy?: 'name' | 'lastname' | 'username';\n\n  @ApiProperty({ required: false, type: 'string', default: 'ASC' })\n  @IsOptional()\n  @IsString()\n  orderType?: 'ASC' | 'DESC';\n\n  @ApiProperty({ required: false, type: 'string', default: '' })\n  @IsOptional()\n  @IsString()\n  category?: string;\n\n  @ApiProperty({ required: false, type: 'string', default: '' })\n  @IsOptional()\n  @IsString()\n  categoryID?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nKAIROS\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ApiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NotificationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OrganizationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaymentMethodModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UtilsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_imports\n\n\n\ncluster_ApiModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_exports\n\n\n\ncluster_CategoriesModule_providers\n\n\n\ncluster_NotificationModule\n\n\n\ncluster_NotificationModule_exports\n\n\n\ncluster_NotificationModule_providers\n\n\n\ncluster_OrganizationModule\n\n\n\ncluster_OrganizationModule_exports\n\n\n\ncluster_OrganizationModule_providers\n\n\n\ncluster_PaymentMethodModule\n\n\n\ncluster_PaymentMethodModule_exports\n\n\n\ncluster_PaymentMethodModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UtilsModule\n\n\n\ncluster_UtilsModule_exports\n\n\n\ncluster_UtilsModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nNotificationModule\n\nNotificationModule\n\nNotificationModule -->\n\nAuthModule->NotificationModule\n\n\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nAuthModule->ApiModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nApiModule -->\n\nCategoriesModule->ApiModule\n\n\n\n\n\nCategoriesService \n\nCategoriesService \n\nCategoriesService  -->\n\nCategoriesModule->CategoriesService \n\n\n\nApiModule -->\n\nNotificationModule->ApiModule\n\n\n\n\n\nNotificationGateway \n\nNotificationGateway \n\nNotificationGateway  -->\n\nNotificationModule->NotificationGateway \n\n\n\n\n\nNotificationService \n\nNotificationService \n\nNotificationService  -->\n\nNotificationModule->NotificationService \n\n\n\n\n\nOrganizationModule\n\nOrganizationModule\n\nApiModule -->\n\nOrganizationModule->ApiModule\n\n\n\n\n\nOrganizationService \n\nOrganizationService \n\nOrganizationService  -->\n\nOrganizationModule->OrganizationService \n\n\n\n\n\nPaymentMethodModule\n\nPaymentMethodModule\n\nApiModule -->\n\nPaymentMethodModule->ApiModule\n\n\n\n\n\nPaymentMethodService \n\nPaymentMethodService \n\nPaymentMethodService  -->\n\nPaymentMethodModule->PaymentMethodService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nApiModule -->\n\nUsersModule->ApiModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\nAppModule -->\n\nApiModule->AppModule\n\n\n\n\n\nApiService\n\nApiService\n\nApiModule -->\n\nApiService->ApiModule\n\n\n\n\n\nApiKeyStrategy\n\nApiKeyStrategy\n\nAuthModule -->\n\nApiKeyStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nCategoriesService\n\nCategoriesService\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\nNotificationService\n\nNotificationService\n\nNotificationModule -->\n\nNotificationService->NotificationModule\n\n\n\n\n\nOrganizationService\n\nOrganizationService\n\nOrganizationModule -->\n\nOrganizationService->OrganizationModule\n\n\n\n\n\nPaymentMethodService\n\nPaymentMethodService\n\nPaymentMethodModule -->\n\nPaymentMethodService->PaymentMethodModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nUtilsService \n\nUtilsService \n\n\n\nUtilsModule\n\nUtilsModule\n\nUtilsService  -->\n\nUtilsModule->UtilsService \n\n\n\n\n\nUtilsService\n\nUtilsService\n\nUtilsModule -->\n\nUtilsService->UtilsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    7 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    51 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppDataSource   (config/.../typeorm.datasource.ts)\n                        \n                        \n                            Auth   (src/.../default.controller.ts)\n                        \n                        \n                            configService   (config/.../typeorm.datasource.ts)\n                        \n                        \n                            deleteFile   (src/.../filePersistor.ts)\n                        \n                        \n                            getPaths   (src/.../filePersistor.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            LOGGER   (src/.../main.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            saveFile   (src/.../filePersistor.ts)\n                        \n                        \n                            saveFiles   (src/.../filePersistor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    config/typeorm.datasource.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AppDataSource\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DataSource({\n  type: 'mysql',\n  host: configService.get('DATABASE_HOST'),\n  port: configService.get('DATABASE_PORT'),\n  username: configService.get('DATABASE_USERNAME'),\n  password: configService.get('DATABASE_PASSWORD'),\n  database: configService.get('DATABASE_NAME'),\n  entities: ['src/**/*.entity.{ts,js}'],\n  migrations: ['./migrations/*.{ts,js}'],\n  migrationsTableName: 'migrations',\n  multipleStatements: true,\n  synchronize: true,\n  charset: 'utf8mb4',\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ConfigService()\n                    \n                \n\n\n        \n    \n\n    src/app/defaults/default.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: RoleEnum[]) =>\n  applyDecorators(\n    UseGuards(JwtAuthGuard),\n    Roles(...roles),\n    UseGuards(RolesGuard),\n  )\n                    \n                \n\n\n        \n    \n\n    src/app/utils/filePersistor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deleteFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (file: Express.Multer.File) => {\n  unlinkSync(`../files/${file.filename}`);\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPaths\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (fileName: string) => {\n  return `../files/${fileName}`;\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (file: Express.Multer.File) => {\n  // const fileExt = file?.mimetype?.split('/')[1];\n  // extraer la extension del archivo del nombre original\n  const originalName = file.originalname.split('.');\n  const fileExt = originalName.at(-1);\n  const fileGen = `${Date.now()}_${file.filename}.${fileExt}`;\n  file.filename = fileGen;\n  copyFileSync(file.path, `./files/${fileGen}`);\n  unlinkSync(file.path);\n  return file;\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveFiles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (files: Express.Multer.File[] | Express.Multer.File | null | {}) => {\n  if (files) {\n    Object.values(files).forEach((fileOrFiles) => {\n      if (Array.isArray(fileOrFiles)) {\n        fileOrFiles.forEach((file) => saveFile(file));\n      } else if (fileOrFiles) {\n        saveFile(fileOrFiles);\n      }\n    });\n  }\n}\n                    \n                \n\n\n        \n    \n\n    src/roles/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LOGGER\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('API')\n                    \n                \n\n\n        \n    \n\n    src/roles/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: RoleEnum[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
